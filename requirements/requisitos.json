[
  {
    "PUID": "SECM-CAT-ICU-001",
    "Requirement description": "The mobile application should not contain hardcoded details of external resources, credentials, or API keys to prevent unauthorized access and secure the app from vulnerabilities.",
    "Source": "SRG-APP-000516-MAPP-000064: The mobile app code must not contain hardcoded references to resources external to the app \\[17\\].  Minimize API Key Exposure: Avoid hardcoding API keys into the app\\'s codebase or configuration files \\[18\\].  SRG-APP-000033-MAPP-000012: A mobile app must not call APIs or otherwise invoke resources external to the mobile app unless such activity serves the documented purposes of the mobile app \\[17\\].  Avoid Using Hardcoded Credentials: Hardcoded credentials can be easily discovered by attackers and provide an easy access point for unauthorized users. Always avoid using hardcoded credentials in your mobile app's code or configuration files \\[3\\].  3.9. Do not store any passwords or secrets in the application binary. Do not use a generic shared secret for integration with the backend server (like password embedded in code). Mobile application binaries can be easily downloaded and reverse engineered \\[16\\].  CWE-798: Use of Hard-coded Credentials  The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data \\[35\\].",
    "Priority": "Not described",
    "Rationale": "This requirement helps decrease the potential threat of hardcoded credentials and data/coming out with mobile software. Reverse engineering: Hardcoded elements like API keys, passwords, or cryptographic secrets can be dropped via simple disassembly and are a common security threat. If left unsecured, unauthorized users could potentially tamper with these elements to access the backend systems, external services, or secured data within the application, which would result in a breakdown of how confidential and integral the whole application and its users are.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICU-002, SECM-CAT-ICU-003",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Perform a code review to check the codebase for hard-coded credentials or references to external resources.  Securitize Your Keys, Passwords, and Secrets --- Store these securely in environment variables or with an OS service like the secure key-management service.  Make sure that credentials are never hardcoded and security practices are held to secure your confidential information.  Look at the binary to see that someone cannot reverse-engineer it to extract secrets.  Confirm that 2nd-level approval is mandated wherever required.",
    "controles": "The mobile application should not contain hardcoded details of external resources, credentials, or API keys to prevent unauthorized access and secure the app from vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-ICU-002",
    "Requirement description": "Applications shall not store passwords or secrets in the application binary, nor inhibit backend integration by using generic shared secrets.",
    "Source": "3.9. Do not store any passwords or secrets in the application binary. Do not use a generic shared secret for integration with the backend server (like password embedded in code). Mobile application binaries can be easily downloaded and reverse engineered \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This is to secure sensitive information in mobile apps and avoid storing passwords or any secrets within the application binary. All applications that store such data right in their binary can be easily reverse engineered, which makes it easy for an attacker to extract such information as a password, API key, or cryptographic secret. This can result in unauthorized access to backend services, which will ultimately make your app and its users vulnerable to data breaches and hence introduce security threats. Protecting passwords and secrets from potential exposure through having them hard-coded into the codebase improves the security of an application.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "",
    "Parent PUIDs": "SECM-CAT-ICU-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Ensure the application codebase contains no hardcoded passwords or secrets.  Are sensitive data like API keys or cryptographic secrets stored securely, such as by encrypted storage solutions or other more secure methods.  Conduct a rich code review to identify embedded secrets in the mobile app binary.  Verify the use of appropriate secure mechanisms like environment variables, secrets management for sensitive data.",
    "controles": "Applications shall not store passwords or secrets in the application binary, nor inhibit backend integration by using generic shared secrets."
  },
  {
    "PUID": "SECM-CAT-ICU-003",
    "Requirement description": "To avoid unauthorized access and reduce the security risks of the application, the requirement is to ensure that hardcoded default credentials are not used in the application.",
    "Source": "Default credentials: 1. Refrain from using hardcoded default credentials \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement aims to eliminate hardcoded default credentials in the application as a means of preventing unauthorized access. Default credentials hardcoded into the device are probably one of the most common vulnerabilities out there, as they can be discovered by attackers very quickly and could also easily provide a low-barrier entry point for unauthorized users. By doing so, the application mitigates a direct unauthorized access vector and thus provides improved authentication security.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICU-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "To avoid unauthorized access and reduce the security risks of the application, the requirement is to ensure that hardcoded default credentials are not used in the application."
  },
  {
    "PUID": "SECM-CAT-ICU-004",
    "Requirement description": "The application will validate access to the credentials used in check signatures, with which only a valid app for the organization can be made, and correct API calls corresponding to what is described in mobile app documents.",
    "Source": "Application Verification: For credentials used only by applications developed by the same organization, verify access through check signatures to confirm that the requesting app is authorized \\[18\\].  SRG-APP-000033-MAPP-000012: A mobile app must not call APIs or otherwise invoke resources external to the mobile app unless such activity serves the documented purposes of the mobile app \\[17\\].",
    "Priority": "Not described",
    "Rationale": "This requirement is designed to prevent unauthorized use and ensure proper security by requiring applications to secure specific keys, which can only be used by apps published from the same organization. When the checkSignatures method is used in our app, it prevents random software from making requests to your API. It also helps to maintain that all external API calls are in line with the legitimate mobile application purposes written in your documentation, compared against potential misuse, hence keeping secure personal information.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "100",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application will validate access to the credentials used in check signatures, with which only a valid app for the organization can be made, and correct API calls corresponding to what is described in mobile app documents."
  },
  {
    "PUID": "SECM-CAT-ISU-001",
    "Requirement description": "Development, testing, and production key usage (to prevent cross-environment exposure); Explicit intents when binding to services (to reduce intercept risk) --- This means an application should generate environment-specific API keys for these key life stages so that they do not share the same value across development and production environments.",
    "Source": "Use of Environment-Specific API Keys: Generate and use separate API keys for development, testing, and production environments to prevent cross-environment exposure. Each environment should have its own isolated API keys to minimize risks, allowing the ability to disable or revoke keys in one environment without impacting others \\[18\\].  When binding to a Service, use explicit intents to ensure that the correct service is started. Implicit intents for services are a security risk, as they can be intercepted by unintended services. As of Android 5.0 (API level 21), using an implicit intent with bindService() will throw an exception. \\[18\\]",
    "Priority": "Not described",
    "Rationale": "The main reason for this rule is to control the risk of a compromised key and decrease the possibility that if someone gains unauthorized access to an application and its keys, they also gain this level of access to another environment. Furthermore, when binding to services with explicit intents, only the specified service is going to be called, protecting against interception and any unauthorized access by unsolicited services as a result. For Android application this is moreover a security concern as implicit intents are interceptable.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "100",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Development, testing, and production key usage (to prevent cross-environment exposure); Explicit intents when binding to services (to reduce intercept risk) --- This means an application should generate environment-specific API keys for these key life stages so that they do not share the same value across development and production environments."
  },
  {
    "PUID": "SECM-CAT-ISU-002",
    "Requirement description": "Applications must not change the SSL verification method that can allow self-signed certificates. Self-signed certificates or a local Certificate Authority (CA) must be used during development to keep with good SSL practices.",
    "Source": "General Best Practices: 13. During development cycles, avoid overriding SSL verification methods to allow untrusted certificates, instead try using self-signed certificates or a local development certificate authority (CA) \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Enforce secured development cycles to follow proper SSL/TLS practices. Like anything else, bypassing SSL verification and letting untrusted certificates be validated comes with security trade-offs: the app is opening itself up to man-in-the-middle (MITM) attacks among other risks. See the news with that self-signed certificate or local CA, without disrupting the verification process, is a very useful aspect for securely testing SSL connections in developers. This means that one has to present valid SSL verification when running on external URLs in order for any insecure configs not to be deployed by accident into production.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must not change the SSL verification method that can allow self-signed certificates. Self-signed certificates or a local Certificate Authority (CA) must be used during development to keep with good SSL practices."
  },
  {
    "PUID": "SECM-CAT-ISU-003",
    "Requirement description": "The application shall not contain any unmanaged and unsigned mobile code.",
    "Source": "V-222665: The designer must ensure uncategorized or emerging mobile code is not used in applications. Remove uncategorized or emerging mobile code from the application or obtain a waiver and risk acceptance to operate \\[15\\].  V-222618: Unsigned Category 1A mobile code must not be used in the application in accordance with DoD policy. Configure the application so Category 1A mobile code is signed \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This is done to mitigate security threats by making sure that the application uses mobile code which has been labeled, and only those apps are used. Capsules that are left uncategorized or unsigned mobile code can behave as a weakness because they may not have had complete security validation and thereby open up the system to unauthorized code execution or exploitation.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-004",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "By requiring signing for unverifiable execution modes on Category 1A mobile code.  Deleting or waiving those slots that currently offer an automatic verification out of the box.  Removing the ability to execute all uncategorized mobile code from non-native store applications with a CORI presented on behalf of signatory backing.",
    "controles": "The application shall not contain any unmanaged and unsigned mobile code."
  },
  {
    "PUID": "SECM-CAT-ISU-004",
    "Requirement description": "The application shall not contain any mobile code that is uncategorized or lacks a digital signature.",
    "Source": "1.10. Consider the security of the whole data lifecycle in writing your application (collection over the wire, temporary storage, caching, backup, deletion, etc.) \\[16\\]  Use of Type-Safe Languages: The application should be developed using type-safe programming languages to reduce the likelihood of input validation vulnerabilities \\[18\\]  Follow security best practices: Implement general security best practices in your development process, including secure coding techniques, code reviews, and vulnerability scanning \\[18\\].  CIS Critical Security Control 16: Application Software Security: Manage the security life cycle of in-house developed, hosted, or acquired software to prevent, detect, and remediate security weaknesses before they can impact the enterprise \\[14\\].",
    "Priority": "Not described",
    "Rationale": "This expectation ensures that the application is secure from all aspects, be it development level or at database levels. Minimizing exposure and risk of mishandling: securing data across the entire lifecycle from creation, transmission, storage to destruction. When we design applications with type-safe programming languages, they are less prone to input validation vulnerabilities, creating more robust and more secure applications. This translates to adopting secure coding standards and practices, such as securing dev environments with code reviews or facilitating scanning for vulnerabilities at regular intervals in the development lifecycle.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall not contain any mobile code that is uncategorized or lacks a digital signature."
  },
  {
    "PUID": "SECM-CAT-ISU-005",
    "Requirement description": "The application must remove all code that seems to accept every SSL/TLS certificate, e.g., org.apache.http.conn.ssl.AllowAllHostnameVerifier, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER, post-development cycle for secure certificate validation",
    "Source": "Android Specific Best Practices: 1. Remove all code after the development cycle that may allow the application to accept all certificates such as org.apache.http.conn.ssl.AllowAllHostnameVerifier or SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER. These are equivalent to trusting all certificates \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This rule is designed to protect SSL/TLS connections through rigorous certificate-checking functions. Code elements like AllowAllHostnameVerifier or ALLOW_ALL_HOSTNAME_VERIFIER can be exploited to bypass security controls in applications using any SSL/TLS certificate. This is very dangerous, especially in production environments where it effectively opens the application to man-in-the-middle (MITM) attacks and other forms of interception. Elimination of such code during the development cycle and using very good SSL/TLS validation is important for ensuring data integrity and confidentiality in transit.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must remove all code that seems to accept every SSL/TLS certificate, e.g., org.apache.http.conn.ssl.AllowAllHostnameVerifier, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER, post-development cycle for secure certificate validation"
  },
  {
    "PUID": "SECM-CAT-ISU-006",
    "Requirement description": "The application must incorporate look designs to distinguish unauthorized code changes and meddling with the binary.",
    "Source": "Insecure Authorization Prevention: 3. If offline authorization checks are necessary within the mobile app's code, developers should perform local integrity checks to detect unauthorized code changes \\[3\\].  Tampering detection via integrity checks: 1. The system must implement integrity checks to detect any tampering with the binary code. Upon detection, the application should become unusable by removing or disabling critical resources \\[3\\].",
    "Priority": "Not described",
    "Rationale": "The purpose behind this requirement is to improve security by instituting methods to determine and react if someone has tampered or modified the binary of an application without permission. If contained code changes are not detected, mobile applications could face exploitable attacks to the reversed side of passing authorization checks. The application finds any manipulation of its code or structure by conducting integrity checks. A protection---tampering with the object (all the more important part) can cause it to be disabled or removed, in case this is a very critical resource, and this will most likely make the application useless which will help to protect those same data that were sensitive from a leak, as well as a malformation from malicious actions.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must incorporate look designs to distinguish unauthorized code changes and meddling with the binary."
  },
  {
    "PUID": "SECM-CAT-ISU-007",
    "Requirement description": "The application shall be secure from code signing and execution, including a deny-all, permit-by-exception (whitelist) software execution policy that verifies the source and full intent of software prior to allowing it any level of distribution on an Android platform.",
    "Source": "9.6. Malicious Insider Threats: Ensure secure app signing and distribution processes to prevent attackers from signing and distributing malicious code \\[3\\].  V-222517: The application must employ a deny-all, permit-by-exception (whitelist) policy to allow the execution of authorized software programs. Configure the application to utilize a deny-all, permit-by-exception policy when allowing the execution of authorized software \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This ensures that the app can be distributed and run only in authorized or non-frozen-term way and/or owned devices. The reason behind it: protect applications, to prevent unauthorized or malicious code to be signed so as to distribute appsiders into appsides (actually verified by tests done on) in adherence with secure application designation policies. It mitigates insider threats to the enterprise by only distributing signed applications. Also, with a deny-all, permit-by-exception approach in place, the system will only allow known and trusted applications to run while prohibiting any unapproved or dangerous code from launching in the application environment.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-008",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall be secure from code signing and execution, including a deny-all, permit-by-exception (whitelist) software execution policy that verifies the source and full intent of software prior to allowing it any level of distribution on an Android platform."
  },
  {
    "PUID": "SECM-CAT-ISU-008",
    "Requirement description": "Ensure that any resources used outside of standard app-store mechanisms are signed and also verify the signature before accepting updates.",
    "Source": "9.6. Resources used by apps that are outside of the app-store normal mechanism must be signed. Apps must verify the signature before accepting the updated resource \\[16\\].  V-222645: Application files must be cryptographically hashed prior to deploying to DoD operational networks. Application Admins validate cryptographic hashes prior to deploying the application to production \\[15\\].",
    "Priority": "Not described",
    "Rationale": "To protect the resources and files of the application, implemented through a signature check and cryptographic hashing. The more these resources are picked in a non-standard app-store mechanism, the higher the chance of malicious tampering. This application enforces these resources to be signed and verified, ensuring that only trusted updates are accepted. In addition, all application files are cryptographically hashed and must be approved by the administrators before being deployed, preventing unauthorized changes to the files, thereby keeping the file integrity and security policies compliant.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure that any resources used outside of standard app-store mechanisms are signed and also verify the signature before accepting updates."
  },
  {
    "PUID": "SECM-CAT-ISU-009",
    "Requirement description": "The application shall be subject to periodic security assessments including code reviews, penetration tests, and cryptographic vulnerabilities assessments according to the results of which security holes must be remedied. All findings should be logged, tagged, and resolved before moving them into production.",
    "Source": "V-222648: An application code review must be performed on the application. Conduct and document code reviews on the application during development and identify and remediate all known and potential security vulnerabilities prior to releasing the application \\[15\\].  Regular Security Testing: 1. Conduct regular security assessments, including penetration testing and code reviews, to identify and address vulnerabilities \\[3\\].  General Best Practices: 14. During security assessments, it is advised to analyze application traffic to see if any traffic goes through plaintext channels \\[3\\].  Conduct Security Testing: 1. Perform thorough security testing, including cryptographic vulnerability assessments, penetration testing, and code reviews. Identify and remediate any weaknesses or vulnerabilities discovered during the testing process \\[3\\].",
    "Priority": "Not described",
    "Rationale": "To improve the security posture of your application by requiring continuous, complete, and thorough security testing to be performed on a regular basis throughout the development lifecycle. Code reviews, penetration testing, and cryptographic vulnerability assessments should be performed to find both existing and potential security vulnerabilities that could bring harm if neglected. Using plaintext channels for application traffic is often a vector of attack during assessments, and analyzing them helps prevent data exposure --- particularly sensitive information. This ensures that the app can identify and fix any vulnerabilities before release, reducing the chances of getting compromised in production.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall be subject to periodic security assessments including code reviews, penetration tests, and cryptographic vulnerabilities assessments according to the results of which security holes must be remedied. All findings should be logged, tagged, and resolved before moving them into production."
  },
  {
    "PUID": "SECM-CAT-ISU-010",
    "Requirement description": "The app should not be deployed using the ad-hoc signed certificates that are used during the development and testing phase. For deployment, only production-ready certificates should be used to ensure security and reliability.",
    "Source": "9.7. Do not deploy apps with ad-hoc signing certificates used for development and testing \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This is done so that there is minimum risk of application breaches, as in production only that certificate will be used which is certified and secure. These are the ad-hoc signing certificates developers usually use for a development and testing environment, but absolutely it is in no way that those meet the suitable security standard we should have in our production. An application with such certificates, when deployed, can be vulnerable to unauthorized modifications and misuse. This, therefore, authenticates our app and reduces the possibility of it being exploited by using production-level, verified certificates.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The app should not be deployed using the ad-hoc signed certificates that are used during the development and testing phase. For deployment, only production-ready certificates should be used to ensure security and reliability."
  },
  {
    "PUID": "SECM-CAT-ISU-011",
    "Requirement description": "The application must continue with strong access control, and local integrity checks applied to determine if the code has been modified without permission.",
    "Source": "Not described",
    "Priority": "Not described",
    "Rationale": "To protect electronic protected health information (ePHI) by robustly requiring appropriate authorization for offline access scenarios. Local integrity checks will allow the app to catch unauthorized code modifications that could tamper with access controls. It helps prevent security flaws like Ships of Theseus attacks, where developers make mistakes in implementing the necessary authorization checks and allow unauthorized access to sensitive resources. This ensures that ePHI access is only available through authorized methods, helping to maintain compliance with the administrative safeguards and prevent circumvention of necessary access limitations.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-012",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must continue with strong access control, and local integrity checks applied to determine if the code has been modified without permission."
  },
  {
    "PUID": "SECM-CAT-ISU-012",
    "Requirement description": "The anti-tampering techniques to prevent code alterations and runtime inspections of your application must be implemented by the application.",
    "Source": "MASVS-RESILIENCE-4: The app implements anti-dynamic analysis techniques: Sometimes pure static analysis is very difficult and time consuming so it typically goes hand in hand with dynamic analysis. Observing and manipulating an app during runtime makes it much easier to decipher its behavior. This control aims to make it as difficult as possible to perform dynamic analysis, as well as prevent dynamic instrumentation which could allow an attacker to modify the code at runtime \\[20\\]",
    "Priority": "Not described",
    "Rationale": "This requirement aims to increase application resilience through protections against dynamic analysis and runtime manipulation. Dynamic analysis is the process of attackers observing and modifying app behavior at runtime, making it easier to reverse-engineer the application's functionality or inject malicious code. The application RANDS using anti-dynamic analysis techniques increases the security aspect by limiting the usage of runtime instrumentation that could potentially violate your security features or lead to code functionality changes or expose your credentials.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The anti-tampering techniques to prevent code alterations and runtime inspections of your application must be implemented by the application."
  },
  {
    "PUID": "SECM-CAT-ISU-013",
    "Requirement description": "The application should check that all of its elements will be detected and are necessary for the application to function. Constantly manage an inventory of all infrastructure-related assets---including those that are mobile, IoT, and cloud-based---to identify, protect, and remediate any unauthorized or unmanaged asset.",
    "Source": "1.1: Verify all application components are identified and are known to be needed \\[19\\].  CIS Critical Security Control 1: Inventory and Control of Enterprise Assets: Actively manage (inventory, track, and correct) all enterprise assets (end-user devices, including portable and mobile; network devices; non-computing/Internet of Things (IoT) devices; and servers) connected to the infrastructure physically, virtually, remotely, and those within cloud environments, to accurately know the totality of assets that need to be monitored and protected within the enterprise. This will also support identifying unauthorized and unmanaged assets to remove or remediate \\[14\\].",
    "Priority": "Not described",
    "Rationale": "This helps to ensure that the application runs with minimal components, and all assets are accounted for. It helps prevent unauthorized access and ensures that the infrastructure is protected from unmanaged or possibly harmful devices by maintaining an inventory of all application components and enterprise assets. Security management system of the VMs will dynamically manage the life cycle of the VMs, and after monitoring and tracking the potentially compromised devices, they can be removed from the system in the event an attack is detected.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application should check that all of its elements will be detected and are necessary for the application to function. Constantly manage an inventory of all infrastructure-related assets---including those that are mobile, IoT, and cloud-based---to identify, protect, and remediate any unauthorized or unmanaged asset."
  },
  {
    "PUID": "SECM-CAT-ISU-014",
    "Requirement description": "If a class extending SSLSocketFactory is being used, the checkServerTrusted method of that class must be correctly implemented and must validate the server certificate",
    "Source": "Android Specific Best Practices: 2. If using a class which extends SSLSocketFactory, make sure checkServerTrusted method is properly implemented so that server certificate is correctly checked \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This prescriptive rule aims to promote the resilience of the application against SSL/TLS-based attacks by mandating a robust cross-verification process for server certificate validation. Improper implementation of the checkServerTrusted method could allow the application to accept untrusted certificates, thus potentially exposing the user to man-in-the-middle (MITM) attacks. Overriding checkServerTrusted correctly in every subclass of SSLSocketFactory used by the application guarantees a correct SSL/TLS handshake, confirming that the server delivered an authentic certificate, and thus securing the interaction.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "If a class extending SSLSocketFactory is being used, the checkServerTrusted method of that class must be correctly implemented and must validate the server certificate"
  },
  {
    "PUID": "SECM-CAT-ISU-015",
    "Requirement description": "OS-provided file encryption APIs and secure key storage should be used to encrypt sensitive data (e.g., passwords, authorization tokens) and keep keys secure on the device.",
    "Source": "1.9. data encryption and secure key management are especially important \\[16\\]  Java Cryptography Architecture (JCA) Security Providers: Use the Google-provided JCA security providers in the specified order. Prioritize using the highest level of framework implementations available for your use case. \\[18\\]  1.3. When storing sensitive data on the device, use a file encryption API provided by the OS or other trusted source. Some platforms (e.g., iOS and Android) provide file encryption API's which use a secret key protected by the device unlock code and delete-able on remote wipe. If this is available, it should be used as it increases the security of the encryption without creating extra burden on the end-user. It also makes stored data safer in the case of loss or theft. However, it should be borne in mind that even when protected by the device unlock key, if data is stored on the device, its security is dependent on the security of the device unlock code if remote deletion of the key is for any reason not possible \\[16\\].  SR7: Secure Storage Since mobile devices are prone to threats, there must be secure storage on the mobile device to store health records and cryptographic credentials \\[30\\].  2.21. In the case passwords need to be stored on the device, leverage the encryption and key-store mechanisms provided by the mobile OS to securely store passwords, password equivalents and authorization tokens. Never store passwords in clear text. Do not store passwords or long-term session IDs without appropriate encryption \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This requirement aims to augment the SSL/TLS security of the application by comprehensively checking the server X509 certificates before establishing the SSL/TLS connection. If the checkServerTrusted method is not implemented properly, the application will accept untrusted certificates which may put the users at risk of man-in-the-middle (MITM) attacks. When the application uses an SSLSocketFactory instance, by implementing checkServerTrusted properly in any custom SSLSocketFactory class, the application can enforce a proper SSL/TLS handshake, verify the authenticity of the server\\'s certificate, and enhance secure communication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "01",
    "Number of audits": "01",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "OS-provided file encryption APIs and secure key storage should be used to encrypt sensitive data (e.g., passwords, authorization tokens) and keep keys secure on the device."
  },
  {
    "PUID": "SECM-CAT-ISU-016",
    "Requirement description": "The application shall restrict the embedding of one data type within another through organization-defined limits to ensure the integrity of the data and to restrict unauthorized nesting of data.",
    "Source": "SRG-APP-000057-MAPP-000017: The mobile app must enforce organization-defined limitations on the embedding of data types within other data types \\[17\\].  Easily adjustable security settings for different types of data \\[26\\].",
    "Priority": "Not described",
    "Rationale": "This rule enforces data integrity by preventing the embedding of one data type inside another data type in accordance with organizational policy. Improper data embedding creates potential vulnerabilities like data injection or type mismatch attack vectors that are prone to using these routes to inject malicious content or bypass query validation. The application restricts unintentional nesting of data by imposing rigid constraints, reducing the possibility of unforeseen security threats.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall restrict the embedding of one data type within another through organization-defined limits to ensure the integrity of the data and to restrict unauthorized nesting of data."
  },
  {
    "PUID": "SECM-CAT-ISU-017",
    "Requirement description": "If tampering or fraud is detected, the application backend server should take the appropriate action based on the integrity check result to implement preventive measures, block potential attacks, and help reduce abuse.",
    "Source": "Server Response to Integrity Checks: The system\\'s backend server must respond appropriately to integrity check results by taking preventive actions to block potential attacks and reduce abuse when tampering or fraud is detected \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Here this is a must as the backend server has to play an active role in maintaining the security of the application by doing integrity checks and taking preventive measures. When tampering or fraud is detected, the server's reaction is crucial for mitigating abuse, minimizing sensitive data leakage, and preventing further exploitation of vulnerabilities. Focusing on integrity issues improves the application's overall resilience and can lessen the impact that unauthorized activities may have.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "If tampering or fraud is detected, the application backend server should take the appropriate action based on the integrity check result to implement preventive measures, block potential attacks, and help reduce abuse."
  },
  {
    "PUID": "SECM-CAT-ISU-018",
    "Requirement description": "The application must validate and only accept server responses from backend APIs to ensure the data is both correct and secure.",
    "Source": "12.11. Always validate server responses when using backend APIs. Introduce a whitelist model for accepted responses \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Following this guideline is crucial for ensuring token-based authentication methods for mobile application and backend APIs, where data integrity and trustworthiness are key considerations especially when dealing with sensitive health information. This prevents the application from accepting or processing the data in the server response without the risk of malicious data or unexpected data, which could cause unauthorized access, corrupted data, and system vulnerabilities, as you can imagine. This is important to ensure sensitive patient data is protected and healthcare security standards are followed.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate and only accept server responses from backend APIs to ensure the data is both correct and secure."
  },
  {
    "PUID": "SECM-CAT-ISU-019",
    "Requirement description": "The app should not store any biometric data or private keys on the client device, thus would store and process sensitive data only on the server.",
    "Source": "1.2. Store and process sensitive data on the server instead of the client-end device. Highly sensitive data (e.g., biometric data, private keys) should not be transported from the component that were initially created \\[16\\].",
    "Priority": "Not described",
    "Rationale": "There is an increasing necessity to protect sensitive data, especially for healthcare applications --- the security and privacy of biometric data, private keys, and highly sensitive data is essential. Sensitive data is better protected against unauthorized access, theft, or tampering than on client devices when it is kept and processed on secure servers. Furthermore, sensitive data remain in the environment in which they were originally created, eliminating the need for transferring data that can be intercepted, in turn improving compliance toward healthcare data security standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The app should not store any biometric data or private keys on the client device, thus would store and process sensitive data only on the server."
  },
  {
    "PUID": "SECM-CAT-ISU-020",
    "Requirement description": "There should be means of providing feedback (e.g., provide a security email address (e.g., security@domain.com)).",
    "Source": "9.3. Provide feedback channels for users to report security problems with apps such as a security@ email address \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Using this requirement, users must have access to an effective and direct way of reporting security issues, so the application must have better responsiveness about security vulnerabilities and threats. In healthcare applications, timely reporting and resolution of security problems becomes critical since they are responsible for securing sensitive patient information. A feedback system implemented correctly allows the organization to effectively correct problems and improve the security posture of the application.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "There should be means of providing feedback (e.g., provide a security email address (e.g., security@domain.com))."
  },
  {
    "PUID": "SECM-CAT-ISU-021",
    "Requirement description": "Application should analyze and perform client-side data processing for sensitive operations (if applicable) to avoid sending confidential data to the server unnecessarily.",
    "Source": "Client-Side Data Processing: The application should evaluate whether sensitive data operations can be performed on the client-side to avoid unnecessary data transmission to a server \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This is important to secure the handling of sensitive data and reduce the cost of moving it to a server. A common client-side operation involves the use of client-side analytics tools that can collect user behavior data without sending it to the server. This approach balances functionality and confidentiality through its consideration of client-side data processing, which reduces security risks while maintaining data protection principles.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Application should analyze and perform client-side data processing for sensitive operations (if applicable) to avoid sending confidential data to the server unnecessarily."
  },
  {
    "PUID": "SECM-CAT-ISU-022",
    "Requirement description": "The application must have at least one administrator signed up for receiving update notifications and security alerts to ensure timely patching/updates of both the application as well as its components.",
    "Source": "V-222669: At least one application administrator must be registered to receive update notifications or security alerts when automated alerts are available. Register administrators to receive update notifications so they can patch and update applications and application components \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement will send notifications when there are significant updates or security issues, and help apply patches and updates without delay. Prompt updates are necessary to fix vulnerabilities and preserve the security health of clinical applications, which normally manage private patient data. Automated notifications decrease the chances of these critical updates going unnoticed, protecting your organization from new vulnerabilities and maintaining compliance with security best practices.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must have at least one administrator signed up for receiving update notifications and security alerts to ensure timely patching/updates of both the application as well as its components."
  },
  {
    "PUID": "SECM-CAT-ISU-023",
    "Requirement description": "The application must have a method of forcing updates of the app for critical security patches so that vulnerabilities are resolved before the app is used. It should also be structured in such a way that security updates can be made end-to-end in a timely fashion while respecting app-store approval processes.",
    "Source": "164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  (A) Security reminders (Addressable)  Periodic security updates \\[9\\].  MASVS-CODE-2: The app has a mechanism for enforcing app updates: Sometimes critical vulnerabilities are discovered in the app when it is already in production. This control ensures that there is a mechanism to force the users to update the app before they can continue using it \\[20\\].  Implementation of countermeasures for critical risks: 1. The system must implement appropriate countermeasures for identified critical risks to mitigate the impact of potential attacks \\[3\\].  9.1. Applications must be designed and provisioned to allow updates for security patches, taking into account the requirements for approval by app-stores and the extra delay this may imply \\[16\\].  Lack of Security Awareness: Establish security controls for app updates, patches, and releases to prevent attackers from exploiting vulnerabilities in the app \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This is important for maintaining the security of healthcare applications by forcing updates that patch important security holes. Applications deployed on production can be subject to emerging attacks, and it is essential to have mechanisms in place to encourage (with the risk of crippling production) or force users to update (with the risk of doing the same) to a patched version. Furthermore, designing the application to facilitate quick updates (while accounting for the approval process for app-stores) minimizes delays in the deployment fix, thus ensuring that vulnerabilities are not exploited.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-024",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must have a method of forcing updates of the app for critical security patches so that vulnerabilities are resolved before the app is used. It should also be structured in such a way that security updates can be made end-to-end in a timely fashion while respecting app-store approval processes."
  },
  {
    "PUID": "SECM-CAT-ISU-024",
    "Requirement description": "Security updates must all be shipped using an encrypted connection and the security update must be checked from their proper publisher. This ensures the confidentiality and integrity of non-local maintenance and diagnostic communications using cryptographic mechanisms.",
    "Source": "9.5. Out-of-appstore security updates should be shipped using an encrypted connection and their content should be verified before applying the update \\[16\\].  V-222563: Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the confidentiality of non-local maintenance and diagnostic communications. Configure the application to encrypt remote application maintenance sessions \\[15\\].  V-222562: Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the integrity of non-local maintenance and diagnostic communications. Configure the application to encrypt remote application maintenance sessions \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This is very important for healthcare applications that are dealing with sensitive data --- it guarantees the distribution of security updates by a secure mechanism outside of the app store that is applied directly. By encrypting connections, updates are safeguarded against interception during transfer, while integrity verification is used to ensure that only valid updates are applied, thereby reducing the possibility of tampering. Provides cryptographic protection for non-local maintenance and diagnostic communication to ensure the confidentiality and integrity of sensitive interactions to avoid exploitation as presented during remote sessions.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Security updates must all be shipped using an encrypted connection and the security update must be checked from their proper publisher. This ensures the confidentiality and integrity of non-local maintenance and diagnostic communications using cryptographic mechanisms."
  },
  {
    "PUID": "SECM-CAT-ISU-025",
    "Requirement description": "App must validate those resources outside the app-store mechanisms which will be consumed are signed and get validated before updating and applying.",
    "Source": "9.6. Resources used by apps that are updated outside of the app-store normal mechanism must be signed. Apps must verify the signature before accepting the updated resource \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This requirement helps to ensure the integrity and authenticity of content that can be updated by means other than the usual app-store mechanisms. Use of signature verification ensures that only trusted updates that have not been tampered with are accepted. This is especially critical in healthcare applications because unauthorized updates will affect sensitive data or application behavior, putting back-end systems and patient information at great risk.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "App must validate those resources outside the app-store mechanisms which will be consumed are signed and get validated before updating and applying."
  },
  {
    "PUID": "SECM-CAT-ISU-026",
    "Requirement description": "The application must implement appropriate mechanisms to protect the integrity of its code and resources, preventing unauthorized modifications, and ensuring that only appropriate and authorized content is loaded within the application.",
    "Source": "MASVS-RESILIENCE-2: The app implements anti-tampering mechanisms: Apps run on a user-controlled device, and without proper protections it's relatively easy to run a modified version locally (e.g. to cheat in a game, or enable premium features without paying), or upload a backdoored version of it to third-party app stores. This control tries to ensure the integrity of the app's intended functionality by preventing modifications to the original code and resources. \\[20\\].  Tamper-proof access logs with different views \\[34\\].  Test ID 10: Verify that only mission-appropriate content may be uploaded within the application \\[36\\].",
    "Priority": "Not described",
    "Rationale": "Helps ensure the integrity and security of the healthcare application by preventing tampering. However, in the absence of anti-tampering mechanisms, attackers can modify the application in ways that circumvent security controls, insert backdoors, or activate unwanted features. As it prevents uploading a certain type of content, it helps reduce the entry of potentially harmful or inappropriate information in the application and ensures security and operation standards are maintained.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-027",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement appropriate mechanisms to protect the integrity of its code and resources, preventing unauthorized modifications, and ensuring that only appropriate and authorized content is loaded within the application."
  },
  {
    "PUID": "SECM-CAT-ISU-027",
    "Requirement description": "The user-facing components of the application must be logically or physically separated from the data storage and management interfaces and security functions. And security-related functionality is to be isolated; you can\\'t have someone open an admin function in a different corner of your site.",
    "Source": "V-222574: The application user interface must be either physically or logically separated from data storage and management interfaces. Configure the application so user interface to the application and management interface to the application is separated \\[15\\].  SC-2 SEPARATION OF SYSTEM AND USER FUNCTIONALITY  Control: Separate user functionality, including user interface services, from system management functionality.  Discussion: System management functionality includes functions that are necessary to administer databases, network components, workstations, or servers. These functions typically require privileged user access. The separation of user functions from system management functions is physical or logical. Organizations may separate system management functions from user functions by using different computers, instances of operating systems, central processing units, or network addresses; by employing virtualization techniques; or some combination of these or other methods. Separation of system management functions from user functions includes web administrative interfaces that employ separate authentication methods for users of any other system resources. Separation of system and user functions may include isolating administrative interfaces on different domains and with additional access controls. The separation of system and user functionality can be achieved by applying the systems security engineering design principles in SA-8, including SA-8(1), SA-8(3), SA-8(4), SA-8(10), SA-8(12), SA-8(13), SA-8(14), and SA-8(18) \\[11\\].  V-222590: The application must isolate security functions from non-security functions. Implement controls within the application that limits access to security configuration functionality and isolates regular application function from security-oriented function \\[15\\].",
    "Priority": "Not described",
    "Rationale": "By separating sensitive operations from user-oriented features, this requirement mitigates the potential for security breaches and minimizes the attack surface by preventing unauthorized access to critical system functions. In healthcare applications, we have sensitive data and critical operations, so the separation of these functionalities is key to ensuring security and proper operation. Logical or physical separation of user and administrative interfaces helps you to mitigate privilege escalation attacks and enforce stricter access controls to management and security functions.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-026",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The user-facing components of the application must be logically or physically separated from the data storage and management interfaces and security functions. And security-related functionality is to be isolated; you can\\'t have someone open an admin function in a different corner of your site."
  },
  {
    "PUID": "SECM-CAT-ISU-028",
    "Requirement description": "Control the application response includes keeping all third-party libraries, frameworks, etc., up-to-date, free from known vulnerabilities and regularly assessing them for potential security threats. Also, it is necessary to perform periodic security updates and vulnerability assessments and keep a record of results for compliance verification purposes.",
    "Source": "V-222574: The application user interface must be either physically or logically separated from data storage and management interfaces. Configure the application so user interface to the application and management interface to the application is separated \\[15\\].  164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  (B) Security reminders (Addressable)  Periodic security updates \\[9\\].  Keep your security software up to date \\[32\\].  1.2: Verify all third-party components used by the mobile app, such as libraries and frameworks, are identified, and checked for known vulnerabilities \\[19\\].  1.8: Verify all third-party components have been assessed (associated risks) before being used or implemented. Additionally verify that a process is in place to ensure that each time a security update for a third-party component is published, the change is inspected and the risk evaluated \\[19\\].  Stay Informed: 1. Stay up to date with the latest security threats and vulnerabilities in the mobile application landscape. Monitor security forums, security advisories, and mobile platform updates to ensure timely mitigation of emerging risks \\[3\\].  1.10: Verify that all components that are not part of the application but that the application relies on to operate, are clearly identified and the security implications of using those components are known \\[19\\].  Keep your code up-to-date: Be sure to update your source code, including any third-party libraries and dependencies, to guard against the latest vulnerabilities \\[18\\].  Stay informed: Stay updated on the latest security threats and best practices for API key management \\[18\\].  Lack of Security in Third-Party Components:  ```{=html} <!-- --> ``` Implement secure coding practices, code review, and testing throughout the mobile app development lifecycle to identify and mitigate vulnerabilities.  Use only trusted and validated third-party libraries or components to reduce the risk of vulnerabilities\\[3\\].  ```{=html} <!-- --> ``` MASVS-CODE-3: The app only uses software components without known vulnerabilities: To be truly secure, a full Whitebox assessment should have been performed on all app components. However, as it usually happens with e.g. for third-party components this is not always feasible and not typically part of a penetration test. This control covers \"low-hanging fruit\" cases, such as those that can be detected just by scanning libraries for known vulnerabilities \\[20\\].  MASVS-CODE-1: The app requires an up-to-date platform version: Every release of the mobile OS includes security patches and new security features. By supporting older versions, apps stay vulnerable to well-known threats. This control ensures that the app is running on an up-to-date platform version so that users have the latest security protections \\[20\\].  V-222515: An application vulnerability assessment must be conducted. Configure the application vulnerability scanners to test all components of the application, conduct vulnerability scans on a regular basis and remediate identified issues. Retain scan results for compliance verification \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the security of healthcare applications by addressing risks in third-party components and platform dependencies. Vulnerabilities in outdated or unassessed libraries can expose sensitive data and compromise system functionality. Regular updates and vulnerability scans reduce these risks, ensuring compliance with security best practices. Timely remediation and documentation of scan results further enhance the application\\'s resilience and support regulatory requirements.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Control the application response includes keeping all third-party libraries, frameworks, etc., up-to-date, free from known vulnerabilities and regularly assessing them for potential security threats. Also, it is necessary to perform periodic security updates and vulnerability assessments and keep a record of results for compliance verification purposes."
  },
  {
    "PUID": "SECM-CAT-ISU-029",
    "Requirement description": "The app must timely notifications or alerts for product updates and security patches, containing a description of the issue, a summary of the associated risks, potential mitigations, and instructions on how to obtain it. To accomplish secure updates, a distribution mechanism must also be implemented.",
    "Source": "V-222670: The application must provide notifications or alerts when product update and security related patches are available. Provide a distribution mechanism for obtaining updates to the application. Include a description of the issue, a summary of risk as well as potential mitigations and how to obtain the update \\[15\\].  ```{=html} <!-- --> ``` 164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  \\(C\\) Security reminders (Addressable)  Periodic security updates \\[9\\].",
    "Priority": "Not described",
    "Rationale": "This requirement keeps users aware of updates to the healthcare application and any associated security patches to maintain the security and resiliency of the application. Specifically, clear risk, mitigation, and update communication allows users and administrators to take corrective action in a timely fashion, reducing their exposure to the vulnerability at hand. Based on this distribution method, one can always deliver the updates with high security and reliability, ensuring sensitive healthcare data and system integrity.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-030",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The app must timely notifications or alerts for product updates and security patches, containing a description of the issue, a summary of the associated risks, potential mitigations, and instructions on how to obtain it. To accomplish secure updates, a distribution mechanism must also be implemented."
  },
  {
    "PUID": "SECM-CAT-ISU-030",
    "Requirement description": "The app must keep all the SDKs, libraries, and platform components up-to-date with their latest version to patch vulnerabilities and adopt security improvements. Software is periodically updated through patches to cryptographic components and security measures.",
    "Source": "Make sure your SDKs and libraries are updated to the latest version \\[18\\].  MASVS-CODE-1: The app requires an up-to-date platform version: Every release of the mobile OS includes security patches and new security features. By supporting older versions, apps stay vulnerable to well-known threats. This control ensures that the app is running on an up-to-date platform version so that users have the latest security protections \\[20\\].  MASVS-CODE-3: The app only uses software components without known vulnerabilities: To be truly secure, a full whitebox assessment should have been performed on all app components. However, as it usually happens with e.g. for third-party components this is not always feasible and not typically part of a penetration test. This control covers \"low-hanging fruit\" cases, such as those that can be detected just by scanning libraries for known vulnerabilities \\[20\\].  Regularly Update Security Measures: 1. Stay informed about security updates, patches, and recommendations from cryptographic libraries, frameworks, and platform providers. Keep the mobile application and underlying cryptographic components up to date to address any identified vulnerabilities or weaknesses \\[3\\].  Make security updates regularly through patches \\[25\\].",
    "Priority": "Not described",
    "Rationale": "All components --- SDKs, libraries, and cryptographic frameworks --- should be kept up to date, thereby improving the security posture of healthcare applications. This comprises npm installations, docker requirements, etc. Outdated components may leave the application open to known flaws and compromise the defenses. It also makes sure standard security updates and patches are made, helping the application to comply with best practices and reduce the risk of sensitive healthcare information being targeted by threats.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The app must keep all the SDKs, libraries, and platform components up-to-date with their latest version to patch vulnerabilities and adopt security improvements. Software is periodically updated through patches to cryptographic components and security measures."
  },
  {
    "PUID": "SECM-CAT-ISU-031",
    "Requirement description": "Continuous updating of all software components and third-party libraries (e.g., SDKs, libraries, and cryptographic frameworks) ensures addressing known vulnerabilities by integrating regular security and platform updates to support the latest security features.",
    "Source": "V-222614: Security-relevant software updates and patches must be kept up to date. Check for application updates at least weekly and apply patches immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources \\[15\\].  Security Updates: Native libraries and tools used in the application must be kept up to date with the latest security patches to avoid exploitation through known vulnerabilities in outdated code. \\[18\\].  MASVS-CODE-1: The app requires an up-to-date platform version: Every release of the mobile OS includes security patches and new security features. By supporting older versions, apps stay vulnerable to well-known threats. This control ensures that the app is running on an up-to-date platform version so that users have the latest security protections \\[20\\].  MASVS-CODE-3: The app only uses software components without known vulnerabilities: To be truly secure, a full whitebox assessment should have been performed on all app components. However, as it usually happens with e.g. for third-party components this is not always feasible and not typically part of a penetration test. This control covers \"low-hanging fruit\" cases, such as those that can be detected just by scanning libraries for known vulnerabilities \\[20\\].  6.2. Track third party frameworks/APIs used in the mobile application for security patches. Integrate security updates for third party code/libraries/frameworks/APIs on a regular basis together with your own code. Ask the provider for a security report \\[16\\].  ```{=html} <!-- --> ``` 164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  (C) Security reminders (Addressable)  Periodic security updates \\[9\\].  Regularly Update and Patch Dependencies: 1. Keep all libraries, frameworks, and third-party dependencies up to date, as they may contain security vulnerabilities that could lead to insecure data storage. Regularly apply security patches and updates provided by the respective vendors \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Software maintenance and update is a key preventive activity to protect healthcare-relevant applications from vulnerabilities. Regularly updating libraries, frameworks, and dependencies safeguards against the exploitation of known vulnerabilities, which minimizes risks to sensitive patient data as well as the integrity of the application itself. With specific patching guidelines and a regular cadence of updates, the application ensures it meets security best practices and minimizes the attack surface.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Continuous updating of all software components and third-party libraries (e.g., SDKs, libraries, and cryptographic frameworks) ensures addressing known vulnerabilities by integrating regular security and platform updates to support the latest security features."
  },
  {
    "PUID": "SECM-CAT-ISU-032",
    "Requirement description": "Modify and maintain privileges for software libraries must be controlled within application owners.",
    "Source": "V-222514: The applications must limit privileges to change the software resident within software libraries.  Configure the application OS file permissions to restrict access to software libraries and configure the application to restrict user access regarding software library update functionality to only authorized users or processes \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring this is a critical requirement for maintaining the integrity and security of software libraries used in healthcare applications. This enhances security by limiting who can modify or execute the application, thereby reducing the risk of unauthorized alterations that might introduce bugs or malicious software. By restricting access only at the OS-level and implementing proper permissions, we ensure that only application-level controls can modify the libraries, thus protecting sensitive data and maintaining system functionalities.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Modify and maintain privileges for software libraries must be controlled within application owners."
  },
  {
    "PUID": "SECM-CAT-ISU-033",
    "Requirement description": "The application shall remove out-of-date components after update installation, disable the use of unsupported components, and be decommissioned when there is no maintenance or vendor support available.",
    "Source": "V-222613: The application must remove organization-defined software components after updated versions have been installed. Configure or design the application to remove old components when updating \\[15\\].  6.5. Software components that are no longer supported by the vendor or developer must not be used \\[16\\].  V-222659: The application must be decommissioned when maintenance or support is no longer available. Ensure there is maintenance for the application \\[15\\].  SA-22 UNSUPPORTED SYSTEM COMPONENTS  Control:  a\\. Replace system components when support for the components is no longer available from the developer, vendor, or manufacturer; or  b\\. Provide the following options for alternative sources for continued support for unsupported components \\[Selection (one or more): in-house support; \\[Assignment: organization-defined support from external providers\\]\\].  Discussion: Support for system components includes software patches, firmware updates, replacement parts, and maintenance contracts. An example of unsupported components includes when vendors no longer provide critical software patches or product updates, which can result in an opportunity for adversaries to exploit weaknesses in the installed components. Exceptions to replacing unsupported system components include systems that provide critical mission or business capabilities where newer technologies are not available or where the systems are so isolated that installing replacement components is not an option \\[11\\].  V-222658: All products must be supported by the vendor or the development team. Remove or decommission all unsupported software products in the application \\[15\\].",
    "Priority": "Not described",
    "Rationale": "The need to do this forces the application to be secure or still has no risk of using frameworks that have reached End Of Life. Old systems can still harbor malware or other vulnerabilities that could be exploited by bad actors, so removing old components, disallowing unsupported software, and retiring applications that no longer have vendor support helps keep them secure and ensure integrity.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall remove out-of-date components after update installation, disable the use of unsupported components, and be decommissioned when there is no maintenance or vendor support available."
  },
  {
    "PUID": "SECM-CAT-ISU-034",
    "Requirement description": "The application must preserve its own execution domains in each process, must comply with Android\\'s application sandbox model, and must deploy to secure, dedicated platforms for sensitive or high-availability use.",
    "Source": "V-222591: The application must maintain a separate execution domain for each executing process. Design and configure applications to maintain a separate execution domain for each executing process \\[15\\].  Application Sandbox: Native code must respect the Android application sandbox, where each application operates under a unique User Identifier (UID) with restricted permissions. Developers must ensure that native code adheres to Android's sandboxing model to maintain application security \\[18\\]  V-222635: The application must not be hosted on a general-purpose machine if the application is designated as critical or high availability by the ISSO. Deploy mission critical applications on servers that are not shared by other less critical applications \\[15\\].  MASVS-RESILIENCE-1: The app validates the integrity of the platform: Running on a platform that has been tampered with can be very dangerous for apps, as this may disable certain security features, putting the data of the app at risk. Trusting the platform is essential for many of the MASVS controls relying on the platform being secure (e.g. secure storage, biometrics, sandboxing, etc.). This control tries to validate that the OS has not been compromised and its security features can thus be trusted \\[20\\].",
    "Priority": "Not described",
    "Rationale": "This is designed for critical healthcare applications to be secure and isolated, sandboxing common applications, and deploying on secure platforms. Good separation reduces the risks of process interference, tampered platforms, and sharing of system resources with less valuable apps. Together, these controls can increase the resiliency of applications and ensure trust in platform security features.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ISU-035",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must preserve its own execution domains in each process, must comply with Android\\'s application sandbox model, and must deploy to secure, dedicated platforms for sensitive or high-availability use."
  },
  {
    "PUID": "SECM-CAT-ISU-035",
    "Requirement description": "The application must be free of adware and known malware (via virus-checking against some established library of viruses), and should prevent the execution of malicious code, as well as disallow the uploading of malicious or dangerous-looking scripts or files.",
    "Source": "SRG-APP-000516-MAPP-000077: The mobile app source code must not contain adware or known malware \\[17\\].  CIS Critical Security Control 10: Malware Defenses: Prevent or control the installation, spread, and execution of malicious applications, code, or scripts on enterprise assets \\[14\\].  Test ID 9: The EHR application will not permit malicious code to be uploaded \\[36\\]",
    "Priority": "Not described",
    "Rationale": "This will help keep your healthcare applications safe from adware, malware, and malicious code that could sabotage your productivity. The application protects sensitive information and allows for compliance with healthcare security standards by preventing insertion and execution of malicious scripts, proactively detecting and removing harmful components from the source code.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ISU-034",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must be free of adware and known malware (via virus-checking against some established library of viruses), and should prevent the execution of malicious code, as well as disallow the uploading of malicious or dangerous-looking scripts or files."
  },
  {
    "PUID": "SECM-CAT-ISU-036",
    "Requirement description": "The application should be built to run in untrusted environments and should only retrieve the absolute minimum amount of information needed to function---limiting the potential for data leakage or corruption.",
    "Source": "Execution in untrusted environments: 1. Applications should be designed to run in untrusted environments, obtaining only the minimum necessary information for functionality, reducing the risk of data leakage or tampering \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This ensures that healthcare applications are robust when they run in possibly untrusted environments (both on personal devices and on public networks). Reducing the amount of data collected to only what is necessary to make the application function limits the attack surface and minimizes risks related to data exposure, manipulation, or unauthorized access. This method improves patient data privacy, as well as the security posture of the application.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application should be built to run in untrusted environments and should only retrieve the absolute minimum amount of information needed to function---limiting the potential for data leakage or corruption."
  },
  {
    "PUID": "SECM-CAT-ISU-037",
    "Requirement description": "The application needs to implement protections against log injection by clients so that event histories in the backend system cannot be corrupted or forged.",
    "Source": "5.6. Protect the back-end from client-initiated log injections that may corrupt or forge the history of events \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This ensures the backend system that handles event logs in case a client tries to inject logs they are not supposed to inject. An example of this can be in a healthcare application where accurate event histories are needed for compliance, auditing, and operational analysis. These records may be corrupted, and it is an attacker opportunity as can be used to obfuscate attack the logs. The application protects the backend from such vulnerabilities by enforcing protections.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application needs to implement protections against log injection by clients so that event histories in the backend system cannot be corrupted or forged."
  },
  {
    "PUID": "SECM-CAT-ISU-038",
    "Requirement description": "Secure management and protection of the application signing key using hardware security modules (HSMs), air-gapped systems, or key vaults to prevent unauthorized access or misuse.",
    "Source": "9.4. If an enterprise app store is used, protect the application signing key with the utmost care (e.g., use an HSM, air-gapped machine, etc.). \\[16\\].  Follow Secure Key Management Practices: 1. Employ secure key management techniques, such as using key vaults or hardware security modules (HSMs) to securely store encryption keys. Protect keys from unauthorized access, including restricting access to authorized personnel, encrypting keys at rest, and using secure key distribution mechanisms \\[3\\].",
    "Priority": "Not described",
    "Rationale": "The application signing key is a sensitive asset that needs to be protected from being stolen or misused. With signing keys, you want to keep them protected using secure management techniques (e.g., HSMs, air-gapped systems, encrypted storage) so that the risk of compromise is minimized. The security of signing keys can significantly affect the integrity and protection of sensitive data in healthcare applications where there is a great deal of capacity and quality for trust.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Secure management and protection of the application signing key using hardware security modules (HSMs), air-gapped systems, or key vaults to prevent unauthorized access or misuse."
  },
  {
    "PUID": "SECM-CAT-ISU-039",
    "Requirement description": "Implement mechanisms in the application to detect potentially risky or fraudulent interactions, including interactions coming from tampered versions of the application or untrustworthy environments.",
    "Source": "Detection of Risky Interactions: The system must detect potentially risky or fraudulent interactions, including those from tampered app versions or untrustworthy environments \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This is required to help all healthcare applications be used in such a manner that they can find ways to identify and mitigate the interaction so that it doesn\\'t harm the data integrity of the system. The application protects sensitive patient information and maintains operational trust by detecting risky behaviors like interactions from tampering presence on app versions and environments that are not trusted. These mechanisms play a vital role in reducing the effects of fraud and preserving compliance with security regulations.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Implement mechanisms in the application to detect potentially risky or fraudulent interactions, including interactions coming from tampered versions of the application or untrustworthy environments."
  },
  {
    "PUID": "SECM-CAT-ISU-040",
    "Requirement description": "The application shall implement procedures to notify the user upon the application being deprecated.",
    "Source": "V-222660: Procedures must be in place to notify users when an application is decommissioned. Create and establish procedures to notify users when an application is decommissioned \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This proposal would add a new P&E section that specifies that applications should inform users if and when they are decommissioned in a timely manner to avert confusion and/or potential security risks. The anticipation of service termination leads to improved communication with users, allowing them to plan for the transition to supported applications or alternative solutions, thereby minimizing workflow disruption and enabling critical healthcare and other services to continue uninterrupted, especially when timely and reliable application functionality plays a vital role.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "98",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall implement procedures to notify the user upon the application being deprecated."
  },
  {
    "PUID": "SECM-CAT-ISU-041",
    "Requirement description": "The application must automatically create a notification of detected integrity violations, send it to specialized services to find unauthorized versions of the distribution platforms and remove such versions.",
    "Source": "Detection Automatic violation notifications: 1. Detected integrity violations must be automatically reported to specialized services that can identify and remove unauthorized versions of the app from distribution platforms \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that the healthcare application can respond to integrity violations in a timely manner with automated identification and reporting. These versions are not official and can lead to dangerous outcomes such as exposing sensitive data or installing malware. This helps maintain the integrity and legitimacy of the application on distribution platforms by reporting these violations to relevant services.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically create a notification of detected integrity violations, send it to specialized services to find unauthorized versions of the distribution platforms and remove such versions."
  },
  {
    "PUID": "SECM-CAT-ISU-042",
    "Requirement description": "The application shall enter into a mode of operation that is considered to be a safe state upon detection of conditions that cause the application to enter into a safe state per information defined in CCI-0002856 (CP-12), per the guidance in CCI-0002857 (CP-12).",
    "Source": "SRG-APP-000388-MAPP-000100: The mobile app, when conditions defined in CCI-0002856, CP-12 are detected, must enter a safe mode of operation defined in CCI-0002857, CP-12 \\[17\\].",
    "Priority": "Not described",
    "Rationale": "This is needed for the application to securely react to defined situations/incidents (for example, a security violation) and switch to a secure operational state. It only allows the application to run the minimum required processes, while keeping sensitive data safe and reducing risk potential. The integrated solution is critical for healthcare technology, which needs to ensure rapid, secure responses to operate while complying with the strictest patient safety and data privacy standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall enter into a mode of operation that is considered to be a safe state upon detection of conditions that cause the application to enter into a safe state per information defined in CCI-0002856 (CP-12), per the guidance in CCI-0002857 (CP-12)."
  },
  {
    "PUID": "SECM-CAT-ISU-043",
    "Requirement description": "The application must (a) disable all of the functionalities of the application to the extent possible (b) use only approved ports, protocols, and services (c) ensure that any temporary compiled data cannot be compromised.",
    "Source": "10.5. Strip unused functionalities from interpreters \\[16\\]  CM-7 LEAST FUNCTIONALITY  Control:  a\\. Configure the system to provide only \\[Assignment: organization-defined mission essential capabilities\\]; and  b\\. Prohibit or restrict the use of the following functions, ports, protocols, software, and/or services: \\[Assignment: organization-defined prohibited or restricted functions, system ports, protocols, software, and/or services\\] \\[11\\].  Compiled data should be temporary and be eliminated after the app objective is completed \\[25\\].  V-222518: The application must be configured to disable non-essential capabilities. Disable application extraneous application functionality that is not required in order to fulfill the application\\'s mission \\[15\\].  V-222519: The application must be configured to use only functions, ports, and protocols permitted to it in the PPSM CAL. Configure the application to utilize application ports approved by the PPSM CAL \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement enforces the principle of least functionality, requiring the application to restrict operations to the capabilities that are necessary for its mission while minimizing the attack surface. The application also minimizes vulnerabilities by disabling unused functionalities and limiting unauthorized protocol connections and ports. Besides, the removal of temporarily prepared data eliminates the risk of its abuse and provides a secure data processing approach --- a huge demand in healthcare solutions.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must (a) disable all of the functionalities of the application to the extent possible (b) use only approved ports, protocols, and services (c) ensure that any temporary compiled data cannot be compromised."
  },
  {
    "PUID": "SECM-CAT-ISU-044",
    "Requirement description": "Disable JavaScript for WebViews unless it is explicitly required for the functionality of the application and configure WebViews securely to avoid vulnerabilities such as XSS or sensitive data portion leakage.",
    "Source": "6.5: Verify that JavaScript is disabled in WebViews unless explicitly required \\[19\\].  JavaScript Usage in WebView: The application must not enable JavaScript in WebView by calling setJavaScriptEnabled() unless it is absolutely necessary for the app's functionality. If JavaScript is not required, do not use setJavaScriptEnabled() to prevent potential cross-site scripting (XSS) vulnerabilities \\[18\\].  MASVS-PLATFORM-2: The app performs identity pinning for all remote endpoints under the developer's control: WebViews are typically used by apps that have a need for increased control over the UI. This control ensures that WebViews are configured securely to prevent sensitive data leakage as well as sensitive functionality exposure (e.g. via JavaScript bridges to native code) \\[20\\].",
    "Priority": "Not described",
    "Rationale": "This ensures that JavaScript executed in a WebView used in a healthcare application cannot perform actions that violate HIPAA or PHI exposure rules. To use JavaScript or not; the answer is clear: disable JavaScript by default and only use it when the need justifies it for the functionality of your application. The use of WebViews with a secure configuration also provides additional mitigation against risks associated with unauthorized access to or exposure to sensitive functionality.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Disable JavaScript for WebViews unless it is explicitly required for the functionality of the application and configure WebViews securely to avoid vulnerabilities such as XSS or sensitive data portion leakage."
  },
  {
    "PUID": "SECM-CAT-ISU-045",
    "Requirement description": "Extreme caution must be used when using addJavaScriptInterface() and it must be limited to trusted web content embedded in the APK or internal sources, and WebViews must be configured correctly so that sensitive data does not leak and sensitive functionality is not exposed.",
    "Source": "Use of JavaScript to Interface Methods: The application must use addJavaScriptInterface() with extreme caution and only expose it to trusted web content. JavaScript interfaces must only be exposed to content embedded within the application's APK or trusted internal sources. If untrusted input is allowed, do not use addJavaScriptInterface(), as this could allow malicious JavaScript to invoke Android methods within the app \\[18\\].  MASVS-PLATFORM-2: The app performs identity pinning for all remote endpoints under the developer's control: WebViews are typically used by apps that have a need for increased control over the UI. This control ensures that WebViews are configured securely to prevent sensitive data leakage as well as sensitive functionality exposure (e.g. via JavaScript bridges to native code) \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Most of the risks of exposing JavaScript interfaces to untrusted content, such as the unauthorized invocation of Android methods or leaking sensitive data. Limiting addJavaScriptInterface() usage to trusted sources and securing WebViews protects the application\\'s attack surface and sensitive health information from being abused.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Extreme caution must be used when using addJavaScriptInterface() and it must be limited to trusted web content embedded in the APK or internal sources, and WebViews must be configured correctly so that sensitive data does not leak and sensitive functionality is not exposed."
  },
  {
    "PUID": "SECM-CAT-ISU-046",
    "Requirement description": "The WebView must restrict JavaScript execution to only JS within the app package, and properly configured WebViews must not leak sensitive data or functionality.",
    "Source": "6.8: Verify that if Java objects are exposed in a WebView, verify that the WebView only renders JavaScript contained within the app package \\[19\\].  MASVS-PLATFORM-2: The app performs identity pinning for all remote endpoints under the developer's control: WebViews are typically used by apps that have a need for increased control over the UI. This control ensures that WebViews are configured securely to prevent sensitive data leakage as well as sensitive functionality exposure (e.g. via JavaScript bridges to native code) \\[20\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures incorrect, untrusted Java objects are not exposed to the WebView; only trusted, app-packaged JavaScript is accessible. This reduces the risk of data leakage, unauthorized access to sensitive application functionality, and similar concerns. The application both preserves healthcare data integrity and controls operational security by enforcing secure WebView configurations and JavaScript sources.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The WebView must restrict JavaScript execution to only JS within the app package, and properly configured WebViews must not leak sensitive data or functionality."
  },
  {
    "PUID": "SECM-CAT-ISU-047",
    "Requirement description": "The application shall limit access to domains that are not compliant within any third-party components used for embedded browsing that utilize a user-supplied agent (for example, WebViews) as well as disable any platform-supported features that are not used to reduce security risks.",
    "Source": "12.1. In the case that the application includes embedded web browsing capabilities (e.g., WebViews), restrict access to third party domains that do not comply with the required security standards, disable any unused platform supported functionalities, such as the plugins, local file accessibility, local content provider (content URL) accessibility and the dynamic code (e.g., JavaScript) execution support. Furthermore, avoid using full screen web interfaces since these can be abused from attackers to create fake application screens \\[16\\]",
    "Priority": "Not described",
    "Rationale": "This rule addresses the proper configuration of embedded web browsing components, such as WebViews, to prevent unauthorized domain access and potential wasting of unused features, as well as phishing attacks that might occur through the display of a screen similar to an application. The allomorph is using controls for access to secure domains, disabling unnecessary features, and avoiding full-screen interfaces that mitigate its vulnerability to attacks while providing a secure environment for the unexamined data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application shall limit access to domains that are not compliant within any third-party components used for embedded browsing that utilize a user-supplied agent (for example, WebViews) as well as disable any platform-supported features that are not used to reduce security risks."
  },
  {
    "PUID": "SECM-CAT-ISU-048",
    "Requirement description": "The application should manage webview caching. It should remove local cache using clearCache() after handling sensitive data and should use server-side headers like no-store to avoid caching sensitive content.",
    "Source": "Cache Management: The application must clear local WebView caches using clearCache() if sensitive data is processed through WebView. Server-side headers such as no-store must be used to ensure that sensitive content is not cached by the WebView \\[18\\].",
    "Priority": "Not described",
    "Rationale": "By mandating this setting, we make sure that sensitive healthcare-related data that will be processed through Webviews is neither locally nor server-side cached, thus minimizing the potential for data breaches or leakage. Query caching also allows for patient confidentiality and ensures secure coding adherence for any applications dealing with sensitive information.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application should manage webview caching. It should remove local cache using clearCache() after handling sensitive data and should use server-side headers like no-store to avoid caching sensitive content."
  },
  {
    "PUID": "SECM-CAT-ISU-049",
    "Requirement description": "Display only trusted content in WebView (on older Android versions) to mitigate Man-In-The-Middle web attacks, Updatable Security Provider (for SSL vulnerabilities).",
    "Source": "WebView Version and Security Patches: For devices running Android versions older than 4.4 (API level 19), the application must ensure that WebView only displays trusted content to avoid known security issues in the older webkit version. The application must use the updatable security Provider object to mitigate potential SSL vulnerabilities by keeping the security provider up to date \\[18\\].",
    "Priority": "Not described",
    "Rationale": "To prevent Man-In-The-Middle web attacks, the WebView application must restrict its display to only trusted content on devices running versions of Android prior to 4.4 (API level 19). The application must be using the updatable Security Provider object to mitigate specific vulnerabilities in SSL by keeping the security provider up to date. This requirement mitigates the potential security risks of older WebView versions, offering to ensure that applications operating on older devices are not compromised. These measures limit exposure by only hosting trusted content inside the WebView while keeping the security provider up to date whenever applicable, helping secure against SSL vulnerabilities and outdated webkit implementations, allowing sensitive healthcare data to remain safe in the application itself",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Display only trusted content in WebView (on older Android versions) to mitigate Man-In-The-Middle web attacks, Updatable Security Provider (for SSL vulnerabilities)."
  },
  {
    "PUID": "SECM-CAT-ISU-050",
    "Requirement description": "The application must make use of WebViews to enable only the minimum set of protocol handlers, ideally limited to HTTPS, and disable potentially dangerous handlers such as file, tel, and app-id.",
    "Source": "6.6: Verify that WebViews are configured to allow only the minimum set of protocol handlers required (ideally, only https). Potentially dangerous handlers, such as file, tel and app-id, are disabled \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Links for applications should be configured in such a way that only the protocol handlers needed for their functionality are registered for WebView. Disabling potentially dangerous handlers minimizes the risk of unauthorized access, leakage of sensitive data, or exploitation of system resources, enhancing the security posture of healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must make use of WebViews to enable only the minimum set of protocol handlers, ideally limited to HTTPS, and disable potentially dangerous handlers such as file, tel, and app-id."
  },
  {
    "PUID": "SECM-CAT-ISU-051",
    "Requirement description": "The application must ensure that WebViews do not load user-supplied local resources to prevent unauthorized access or malicious content execution.",
    "Source": "6.7: Verify that the app does not load user-supplied local resources into WebViews \\[19\\].",
    "Priority": "Not described",
    "Rationale": "This requirement mitigates the risk of unauthorized access, malicious code execution, or data leakage by restricting WebViews from loading user-supplied local resources. Ensuring that only trusted and verified resources are loaded into WebViews helps protect the integrity of healthcare applications and the sensitive data they handle.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that WebViews do not load user-supplied local resources to prevent unauthorized access or malicious content execution."
  },
  {
    "PUID": "SECM-CAT-ISU-052",
    "Requirement description": "The application must validate all input data in WebViews used for network content, ensuring that insecure protocols are not trusted and all incoming data is sanitized.",
    "Source": "WebView Data Handling: Applications using WebView for network content must validate all input data, ensuring that insecure protocols are not trusted and all incoming data is sanitized \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that WebView configurations in healthcare applications mitigate risks from untrusted protocols and unsanitized input. Proper validation and sanitization of data protect against injection attacks, data leakage, and unauthorized access, ensuring secure communication and preserving the integrity of sensitive data processed by the application.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate all input data in WebViews used for network content, ensuring that insecure protocols are not trusted and all incoming data is sanitized."
  },
  {
    "PUID": "SECM-CAT-ISU-053",
    "Requirement description": "The application must implement object serialization using safe serialization APIs to prevent security vulnerabilities such as unauthorized data access or deserialization attacks.",
    "Source": "6.9: Verify that object serialization, if any, is implemented using safe serialization APIs \\[19\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that object serialization in the application is performed securely, mitigating risks associated with unsafe serialization practices, such as deserialization attacks, data corruption, or unauthorized access. Using safe serialization APIs enhances data integrity and protects against the potential exploitation of serialized objects in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement object serialization using safe serialization APIs to prevent security vulnerabilities such as unauthorized data access or deserialization attacks."
  },
  {
    "PUID": "SECM-CAT-ISU-054",
    "Requirement description": "The application must securely implement object deserialization by validating untrusted data before deserialization and protecting against unauthorized gadget chain execution.",
    "Source": "6.9: CWE-502: Deserialization of Untrusted Data:  The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.  It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security \\-- which is a dangerous security assumption.  Data that is untrusted cannot be trusted to be well-formed.  When developers place no restrictions on \\\"gadget chains,\\\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell \\[19\\].",
    "Priority": "Not described",
    "Rationale": "This requirement mitigates risks associated with the deserialization of untrusted data, such as unauthorized actions, code execution, or data corruption. By validating data prior to deserialization and preventing gadget chain execution, the application ensures robust protection against vulnerabilities that could compromise the security of healthcare data and systems.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must securely implement object deserialization by validating untrusted data before deserialization and protecting against unauthorized gadget chain execution."
  },
  {
    "PUID": "SECM-CAT-ISU-055",
    "Requirement description": "The application must detect and mitigate interactions from untrustworthy environments, such as rooted or jailbroken devices, and ensure operation only on secure, verified Android-powered devices.",
    "Source": "Mitigation of Untrustworthy Environments: The system must be able to detect and mitigate interactions from untrustworthy environments, ensuring that the app only operates in secure, verified Android-powered devices \\[18\\].  6.10: Verify that the app detects whether it is being executed on a rooted or jailbroken device. Depending on the business requirement, users are warned, or the app is terminated if the device is rooted or jailbroken \\[19\\].  MASVS-RESILIENCE-1: The app validates the integrity of the platform: Running on a platform that has been tampered with can be very dangerous for apps, as this may disable certain security features, putting the data of the app at risk. Trusting the platform is essential for many of the MASVS controls relying on the platform being secure (e.g. secure storage, biometrics, sandboxing, etc.). This control tries to validate that the OS has not been compromised and its security features can thus be trusted \\[20\\].  4.13. In the case of rooted or jailbroken devices, consider to integrate a custom or third-party secure container for the transmission channel, since the platform security controls that establish the TLS connection cannot be trusted \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that healthcare applications operate in secure environments by detecting tampered devices, such as rooted or jailbroken devices. Operating on compromised platforms may disable critical security features, increasing risks of data breaches and unauthorized access. Mitigating these risks through device validation and secure containment enhances overall application resilience and data protection.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must detect and mitigate interactions from untrustworthy environments, such as rooted or jailbroken devices, and ensure operation only on secure, verified Android-powered devices."
  },
  {
    "PUID": "SECM-CAT-ISU-056",
    "Requirement description": "The application must request the READ_SMS permission only when absolutely necessary, minimize its usage, and securely handle SMS data to prevent misuse or exploitation by malicious third parties.",
    "Source": "Permissions Handling: The application must request the READ_SMS permission only if absolutely necessary and must minimize its use to reduce the risk of exposure of SMS data to other applications. If the app needs to process SMS messages, it must validate and securely handle them to prevent misuse or exploitation by malicious third parties \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that the application adheres to the principle of least privilege by requesting READ_SMS permission only when essential. Minimizing the use of this permission reduces the risk of SMS data being exposed to unauthorized applications or malicious actors. Secure handling of SMS messages protects sensitive user data and ensures compliance with privacy standards in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must request the READ_SMS permission only when absolutely necessary, minimize its usage, and securely handle SMS data to prevent misuse or exploitation by malicious third parties."
  },
  {
    "PUID": "SECM-CAT-ISU-057",
    "Requirement description": "The application must ensure that API keys are excluded from version control systems and securely injected during the build process using configuration management tools.",
    "Source": "Secure API Key in Continuous Delivery Pipelines: Exclude API keys from version control systems like Git, and use configuration management tools to inject them during the build process \\[18\\].  Exclude API Keys from Source Control: API keys must not be committed to source code repositories (e.g., Git) to avoid accidental exposure in public or shared repositories \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the secure handling of API keys in the development and deployment lifecycle, protecting them from accidental exposure in version control systems. By excluding API keys from source control and securely injecting them during the build process, the application minimizes the risk of unauthorized access to backend systems or APIs, preserving data confidentiality and integrity.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that API keys are excluded from version control systems and securely injected during the build process using configuration management tools."
  },
  {
    "PUID": "SECM-CAT-ISU-058",
    "Requirement description": "The application must securely handle API keys during the continuous integration and delivery process using encrypted environment variables or secure vaults. It must also manage keys in the project with tools like Gradle's secrets-gradle-plugin for injection at build time.",
    "Source": "Secure API Key in Continuous Delivery Pipelines: When working with infrastructure teams, ensure API keys are securely handled during the continuous integration and delivery process, using encrypted environment variables or secure vaults \\[18\\].  Exclude API Keys from Source Control: Use tools like Gradle's secrets-gradle-plugin to manage API keys securely in your project and inject them during build time \\[18\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the secure handling of API keys throughout the continuous integration and delivery process, reducing the risk of accidental exposure. By using tools like Gradle's secrets-gradle-plugin and secure storage solutions such as encrypted environment variables or secure vaults, the application safeguards sensitive keys from unauthorized access during development and deployment.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must securely handle API keys during the continuous integration and delivery process using encrypted environment variables or secure vaults. It must also manage keys in the project with tools like Gradle's secrets-gradle-plugin for injection at build time."
  },
  {
    "PUID": "SECM-CAT-ISU-059",
    "Requirement description": "The application must include execution flow diagrams and design documents demonstrating how deadlock and recursion issues in web services are mitigated during development.",
    "Source": "V-222625: Execution flow diagrams and design documents must be created to show how deadlock and recursion issues in web services are being mitigated. Develop web services to account for deadlock issues \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that deadlock and recursion issues, which can disrupt the functionality and reliability of web services, are effectively identified and mitigated during the application design and development phases. Providing execution flow diagrams and design documentation improves transparency and accountability, enabling secure and efficient web service implementation in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must include execution flow diagrams and design documents demonstrating how deadlock and recursion issues in web services are mitigated during development."
  },
  {
    "PUID": "SECM-CAT-IAA-001",
    "Requirement description": "The application must uniquely identify and authenticate non-organizational users and processes acting on their behalf to ensure secure access and prevent unauthorized usage.",
    "Source": "V-222556: The application must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). Configure the application to identify and authenticate all non-organizational users \\[15\\].  One unique account for each patient and each health care provider \\[26\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that non-organizational users and processes are properly identified and authenticated before accessing application resources. By implementing robust identification and authentication mechanisms, the application prevents unauthorized access and safeguards sensitive healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must uniquely identify and authenticate non-organizational users and processes acting on their behalf to ensure secure access and prevent unauthorized usage."
  },
  {
    "PUID": "SECM-CAT-IAA-002",
    "Requirement description": "The application must define and document user actions that can be performed without identification or authentication, ensuring they align with the organizational mission and business functions and provide supporting rationale in the security plan.",
    "Source": "AC-14 PERMITTED ACTIONS WITHOUT IDENTIFICATION OR AUTHENTICATION  Control:  a\\. Identify \\[Assignment: organization-defined user actions\\] that can be performed on the system without identification or authentication consistent with organizational mission and business functions; and  b\\. Document and provide supporting rationale in the security plan for the system, user actions not requiring identification or authentication \\[11\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that any user actions permitted without identification or authentication are clearly defined, justified, and documented. By aligning these actions with organizational goals and documenting them in the security plan, the application reduces potential misuse and enhances transparency in access control policies.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "100",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must define and document user actions that can be performed without identification or authentication, ensuring they align with the organizational mission and business functions and provide supporting rationale in the security plan."
  },
  {
    "PUID": "SECM-CAT-IAA-003",
    "Requirement description": "The application must prevent non-privileged users from executing privileged functions, including disabling, circumventing, or altering implemented security safeguards or countermeasures.",
    "Source": "V-222429: The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that only authorized users with appropriate privileges can execute critical functions or modify security safeguards. Preventing non-privileged users from accessing or altering privileged functionalities mitigates risks such as unauthorized access, data breaches, and the compromise of application security measures, which is especially critical in healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-004",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent non-privileged users from executing privileged functions, including disabling, circumventing, or altering implemented security safeguards or countermeasures."
  },
  {
    "PUID": "SECM-CAT-IAA-004",
    "Requirement description": "The application must terminate all existing user sessions immediately upon account deletion to prevent unauthorized access to application resources.",
    "Source": "V-222549: The application must terminate existing user sessions upon account deletion. Configure the application to terminate existing sessions of users whose accounts are deleted \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that deleted user accounts no longer retain active sessions that could allow unauthorized access to sensitive data or application resources. Terminating existing sessions upon account deletion prevents potential misuse, enhances security, and aligns with best practices for session management in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must terminate all existing user sessions immediately upon account deletion to prevent unauthorized access to application resources."
  },
  {
    "PUID": "SECM-CAT-IAA-005",
    "Requirement description": "The application must automatically terminate non-privileged user sessions and log off users after a 15-minute period of inactivity to enhance security and prevent unauthorized access.",
    "Source": "V-222389: The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15-minute idle time period has elapsed. Design and configure the application to terminate the non-privileged users session after 15 minutes of inactivity \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that inactive sessions are automatically terminated to prevent unauthorized access to the application and sensitive data. Enforcing a 15-minute timeout period enhances security by minimizing risks posed by unattended sessions, particularly in environments handling healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically terminate non-privileged user sessions and log off users after a 15-minute period of inactivity to enhance security and prevent unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IAA-006",
    "Requirement description": "The application must automatically terminate administrator user sessions and log off users after a 10-minute period of inactivity to safeguard access to privileged functions.",
    "Source": "V-222390: The application must automatically terminate the admin user session and log off admin users after a 10-minute idle time period is exceeded. Design and configure the application to terminate the admin users session after 10 minutes of inactivity \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that administrator sessions are automatically terminated after a short idle period to minimize the risk of unauthorized access to privileged functions. By enforcing a 10-minute timeout for admin users, the application enhances security for critical operations and prevents misuse in environments handling sensitive healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically terminate administrator user sessions and log off users after a 10-minute period of inactivity to safeguard access to privileged functions."
  },
  {
    "PUID": "SECM-CAT-IAA-007",
    "Requirement description": "The application must ensure that system or application identifiers are not displayed until the log-on process has been successfully completed.",
    "Source": "9.4.2 Secure log-on procedures: a) not display system or application identifiers until the log-on process has been successfully completed; \\[7\\].",
    "Priority": "Not described",
    "Rationale": "This requirement protects the application from unauthorized information disclosure by ensuring that sensitive system or application identifiers are hidden until user authentication is successfully completed. By enforcing secure log-on procedures, the application minimizes exposure to unauthorized users and enhances the overall security posture.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-008",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that system or application identifiers are not displayed until the log-on process has been successfully completed."
  },
  {
    "PUID": "SECM-CAT-IAA-008",
    "Requirement description": "The application must prevent the display of help messages during the log-on procedure and obscure authentication feedback to avoid aiding unauthorized users or exposing sensitive authentication information.",
    "Source": "9.4.2 Secure log-on procedures: c) not provide help messages during the log-on procedure that would aid an unauthorized user; \\[7\\].  IA-6 AUTHENTICATION FEEDBACK  Control: Obscure feedback of authentication information during the authentication process to protect the information from possible exploitation and use by unauthorized individuals.  Discussion: Authentication feedback from systems does not provide information that would allow unauthorized individuals to compromise authentication mechanisms. For some types of systems, such as desktops or notebooks with relatively large monitors, the threat (referred to as shoulder surfing) may be significant. For other types of systems, such as mobile devices with small displays, the threat may be less significant and is balanced against the increased likelihood of typographic input errors due to small keyboards. Thus, the means for obscuring authentication feedback is selected accordingly. Obscuring authentication feedback includes displaying asterisks when users type passwords into input devices or displaying feedback for a very limited time before obscuring it \\[11\\].",
    "Priority": "Not described",
    "Rationale": "This requirement minimizes the risk of unauthorized access by ensuring that no helpful information is provided to attackers during the authentication process. By disabling log-on help messages and obscuring authentication feedback, the application reduces the likelihood of information leakage that could aid in compromising authentication mechanisms, enhancing the security of sensitive healthcare systems.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent the display of help messages during the log-on procedure and obscure authentication feedback to avoid aiding unauthorized users or exposing sensitive authentication information."
  },
  {
    "PUID": "SECM-CAT-IAA-009",
    "Requirement description": "The application must encrypt passwords during transmission to ensure that no passwords are sent in clear text over the network.",
    "Source": "9.4.2 Secure log-on procedures: j) not transmit passwords in clear text over a network; \\[7\\].  V-222543: The application must transmit only cryptographically-protected passwords. Configure the application to encrypt passwords when they are being transmitted \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the confidentiality and security of user credentials by mandating cryptographic protection for passwords during transmission. By encrypting passwords, the application prevents exposure to eavesdropping, man-in-the-middle attacks, and other network-based threats, maintaining the integrity of authentication mechanisms in healthcare systems.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must encrypt passwords during transmission to ensure that no passwords are sent in clear text over the network."
  },
  {
    "PUID": "SECM-CAT-IAA-010",
    "Requirement description": "The application must validate log-on information only after all input data has been completed and must not indicate which specific part of the input is correct or incorrect in case of an error.",
    "Source": "9.4.2 Secure log-on procedures: d) validate the log-on information only on completion of all input data. If an error condition arises, the system should not indicate which part of the data is correct or incorrect; \\[7\\].",
    "Priority": "Not described",
    "Rationale": "This requirement protects the log-on process from enumeration attacks by ensuring that the application does not provide detailed error messages indicating the correctness of individual input fields. By validating log-on information after all input data is entered, the application minimizes the risk of information disclosure that could aid attackers in bypassing authentication mechanisms.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate log-on information only after all input data has been completed and must not indicate which specific part of the input is correct or incorrect in case of an error."
  },
  {
    "PUID": "SECM-CAT-IAA-011",
    "Requirement description": "The application must enforce a limit of three consecutive invalid log-on attempts within a 15-minute time period and lock the account or take other defined actions when the maximum number of unsuccessful attempts is exceeded.",
    "Source": "AC-7 UNSUCCESSFUL LOGON ATTEMPTS  Control:  a\\. Enforce a limit of \\[Assignment: organization-defined number\\] consecutive invalid logon attempts by a user during a \\[Assignment: organization-defined time period\\]; and  b\\. Automatically \\[Selection (one or more): lock the account or node for an \\[Assignment: organization-defined time period\\]; lock the account or node until released by an administrator; delay next logon prompt per \\[Assignment: organization-defined delay algorithm\\]; notify system administrator; take other \\[Assignment: organization-defined action\\]\\] when the maximum number of unsuccessful attempts is exceeded.; \\[11\\].  V-222432: The application must enforce the limit of three consecutive invalid logon attempts by a user during a 15-minute time period. Configure the application to enforce an account lock after 3 failed logon attempts occurring within a 15-minute window \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement mitigates risks associated with brute force and unauthorized access attempts by limiting the number of invalid log-on attempts. Enforcing account lockout or other protective actions after a set number of failed attempts strengthens security and helps prevent malicious actors from compromising user accounts in healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-012",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a limit of three consecutive invalid log-on attempts within a 15-minute time period and lock the account or take other defined actions when the maximum number of unsuccessful attempts is exceeded."
  },
  {
    "PUID": "SECM-CAT-IAA-012",
    "Requirement description": "The application administrator must follow an approved process to unlock locked user accounts, including validating user identity prior to unlocking the account.",
    "Source": "V-222433: The application administrator must follow an approved process to unlock locked user accounts. Create a standard approved process for unlocking locked application accounts which includes validating user identity prior to unlocking the account. Use that process when unlocking application user accounts \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that the process for unlocking user accounts is secure and standardized to prevent unauthorized access. Validating the user's identity before unlocking an account reduces the risk of account compromise and enhances the overall security of the application, particularly in healthcare settings where sensitive information must be protected.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application administrator must follow an approved process to unlock locked user accounts, including validating user identity prior to unlocking the account."
  },
  {
    "PUID": "SECM-CAT-IAA-013",
    "Requirement description": "The application must display a system use notification banner before granting access, warning users that the system is for authorized use only and providing legal and privacy notices.",
    "Source": "9.4.2 Secure log-on procedures: b) display a general notice warning that the computer should only be accessed by authorized users \\[7\\].  V-222434: The application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application. Configure the application to present the standard DoD-approved banner prior to granting access to the application \\[15\\].  Easy-to-understand privacy policy which clearly indicates that my personal data are well protected \\[26\\].  AC-8 SYSTEM USE NOTIFICATION  Control:  a\\. Display \\[Assignment: organization-defined system use notification message or banner\\] to users before granting access to the system that provides privacy and security notices consistent with applicable laws, executive orders, directives, regulations, policies, standards, and guidelines and state that:  1\\. Users are accessing a U.S. Government system;  2\\. System usage may be monitored, recorded, and subject to audit;  3\\. Unauthorized use of the system is prohibited and subject to criminal and civil penalties; and  4\\. Use of the system indicates consent to monitoring and recording;  b\\. Retain the notification message or banner on the screen until users acknowledge the usage conditions and take explicit actions to log on to or further access the system; and  c\\. For publicly accessible systems:  1\\. Display system use information \\[Assignment: organization-defined conditions\\], before granting further access to the publicly accessible system;  2\\. Display references, if any, to monitoring, recording, or auditing that are consistent with privacy accommodations for such systems that generally prohibit those activities; and  3\\. Include a description of the authorized uses of the system \\[11\\].  Test ID 2: Only currently authorized users are able to access the EHR data \\[36\\].  The application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application. Configure the application to present the standard DoD-approved banner prior to granting access to the application \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Displaying a system use notification banner ensures that users are informed of the terms and conditions of system access, including privacy, monitoring, and authorized use policies. This promotes compliance with organizational security policies and legal requirements, protecting sensitive healthcare data from unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must display a system use notification banner before granting access, warning users that the system is for authorized use only and providing legal and privacy notices."
  },
  {
    "PUID": "SECM-CAT-IAA-014",
    "Requirement description": "The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until the user acknowledges the usage conditions and explicitly logs on for further access.",
    "Source": "V-222435: The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access. Configure the application to retain the standard DoD-approved banner until the user accepts the usage conditions prior to granting access to the application \\[15\\].  V-222436: The publicly accessible application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application. Configure the application to present the standard DoD-approved banner prior to granting access to the application \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that users are informed of the usage conditions, privacy notices, and consent requirements before accessing the application. By retaining the notice until explicit acknowledgment, the application mitigates risks of unauthorized use and ensures compliance with legal and organizational policies.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until the user acknowledges the usage conditions and explicitly logs on for further access."
  },
  {
    "PUID": "SECM-CAT-IAA-015",
    "Requirement description": "The application must automatically remove or disable temporary user accounts 72 hours after account creation to prevent unauthorized access.",
    "Source": "V-222409: The application must automatically remove or disable temporary user accounts 72 hours after account creation. Configure temporary accounts to be automatically removed or disabled after 72 hours after account creation \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that temporary accounts do not persist beyond their intended usage period, reducing the risk of unauthorized access. Automatically removing or disabling these accounts enforces strict access control policies and prevents unused accounts from becoming security vulnerabilities.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically remove or disable temporary user accounts 72 hours after account creation to prevent unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IAA-016",
    "Requirement description": "The application must disable or delete unnecessary user accounts, including built-in accounts, and prevent the creation of unessential accounts during installation.",
    "Source": "V-222412: Unnecessary application accounts must be disabled, or deleted. Design the application so unessential user accounts are not created during installation. Disable or delete all unnecessary application user accounts \\[15\\].  V-222661: Unnecessary built-in application accounts must be disabled. Disable unnecessary built-in user-ids, use other strong authentication when possible and use strong passwords if accounts are necessary for application operation.",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that only essential user accounts exist within the application, reducing the attack surface and preventing unauthorized access. By disabling or deleting unnecessary accounts, including built-in ones, and enforcing strong authentication for essential accounts, the application minimizes the risk of compromise in healthcare environments.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must disable or delete unnecessary user accounts, including built-in accounts, and prevent the creation of unessential accounts during installation."
  },
  {
    "PUID": "SECM-CAT-IAA-017",
    "Requirement description": "The application must replace default passwords with DoD-approved strong passwords and prioritize the use of strong authenticators instead of passwords wherever possible.",
    "Source": "V-222662: Default passwords must be changed. Configure the application to use strong authenticators instead of passwords when possible. Otherwise, change default passwords to a DoD-approved strength password and follow all guidance for passwords \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that default passwords, which are often well-known and vulnerable to exploitation, are replaced with strong passwords compliant with DoD standards. By promoting the use of strong authenticators, the application further enhances security and reduces reliance on traditional password mechanisms, aligning with modern security practices in healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-018",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must replace default passwords with DoD-approved strong passwords and prioritize the use of strong authenticators instead of passwords wherever possible."
  },
  {
    "PUID": "SECM-CAT-IAA-018",
    "Requirement description": "The application must automatically disable user accounts after a 35-day period of inactivity to mitigate unauthorized access risks.",
    "Source": "V-222411: The application must automatically disable accounts after a 35-day period of account inactivity. Design and configure the application to expire user accounts after 35 days of inactivity \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that inactive accounts are automatically disabled, reducing the risk of unauthorized access through dormant or forgotten accounts. By enforcing account expiration after a 35-day inactivity period, the application strengthens access control and minimizes vulnerabilities in healthcare environments.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically disable user accounts after a 35-day period of inactivity to mitigate unauthorized access risks."
  },
  {
    "PUID": "SECM-CAT-IAA-019",
    "Requirement description": "The application must implement processes or features to prevent the removal or disabling of emergency accounts while the emergency situation is ongoing.",
    "Source": "V-222410: The application must have a process, feature or function that prevents removal or disabling of emergency accounts. Identify accounts that are created in an emergency situation and ensure procedures or processes are in place to prevent disabling or deleting the account while the emergency is underway \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Emergency accounts provide critical access during urgent situations and must remain active for the duration of the emergency. Preventing the removal or disabling of these accounts ensures continuity of operations and supports effective incident response, particularly in healthcare environments where timely access to data and systems is essential.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement processes or features to prevent the removal or disabling of emergency accounts while the emergency situation is ongoing."
  },
  {
    "PUID": "SECM-CAT-IAA-020",
    "Requirement description": "The application must terminate shared or group account credentials immediately when group members leave, ensuring the security of the group account.",
    "Source": "V-222408: Shared/group account credentials must be terminated when members leave the group. Create a procedure for deleting either member accounts or the entire group account when members leave the group \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that shared or group accounts are protected from unauthorized access when members leave the group. By promptly terminating credentials or accounts associated with departed members, the application prevents potential misuse and maintains the integrity of sensitive healthcare systems.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must terminate shared or group account credentials immediately when group members leave, ensuring the security of the group account."
  },
  {
    "PUID": "SECM-CAT-IAA-021",
    "Requirement description": "The application must terminate all user sessions and network connections at the end of a session or after defined inactivity periods, including verifying remote disconnection for non-local maintenance sessions.",
    "Source": "V-222566: The application must terminate all sessions and network connections when non-local maintenance is completed. Configure the application to expire idle user sessions after 10 minutes of inactivity for admin users and after 15 minutes of inactivity for regular users \\[15\\].  V-222564: Applications used for non-local maintenance sessions must verify remote disconnection at the termination of non-local maintenance and diagnostic sessions. Configure the application to verify termination of remote maintenance sessions \\[15\\].  V-222568: The application must terminate all network connections associated with a communications session at the end of the session. Configure or design the application to terminate application network sessions at the end of the session \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that sessions and network connections are securely terminated after use or inactivity, preventing unauthorized access and reducing the risk of session hijacking. Verifying disconnection for non-local maintenance sessions ensures proper session management in remote diagnostics and maintenance scenarios, aligning with secure practices for healthcare systems.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-022",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must terminate all user sessions and network connections at the end of a session or after defined inactivity periods, including verifying remote disconnection for non-local maintenance sessions."
  },
  {
    "PUID": "SECM-CAT-IAA-022",
    "Requirement description": "The application must provide the capability to limit the number of concurrent logon sessions per user based on organization-defined thresholds.",
    "Source": "V-222387: The application must provide a capability to limit the number of logon sessions per user. Design and configure the application to specify the number of logon sessions that are allowed per user \\[15\\].  AC-10 CONCURRENT SESSION CONTROL  Control: Limit the number of concurrent sessions for each \\[Assignment: organization-defined account and/or account type\\] to \\[Assignment: organization-defined number\\]; \\[11\\].",
    "Priority": "Not described",
    "Rationale": "This requirement prevents security risks associated with excessive or unauthorized concurrent sessions. By limiting the number of active sessions per user, the application reduces the attack surface and enforces secure session management, which is particularly important in healthcare systems where sensitive data must be protected.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must provide the capability to limit the number of concurrent logon sessions per user based on organization-defined thresholds."
  },
  {
    "PUID": "SECM-CAT-IAA-023",
    "Requirement description": "The application must uniquely identify and authenticate organizational users and processes acting on their behalf, ensuring that identifiers do not rely on personally identifiable device information and uniquely identify patients within the system.",
    "Source": "V-222522: The application must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users). Configure the application to uniquely identify and authenticate users and user processes \\[15\\].  One unique account for each patient and each health care provider \\[26\\].  IA-2 IDENTIFICATION AND AUTHENTICATION  Control: Uniquely identify and authenticate organizational users and associate that unique identification with processes acting on behalf of those users \\[11\\].  Unique Identifier Generation: If a Globally Unique Identifier (GUID) is needed, the application must generate a large, unique number and avoid using phone identifiers (e.g., phone number or IMEI) that may be linked to personal information \\[18\\].  SR4: Privacy It must retain the privacy for the patient\\'s identity when stored on the devices as well as when used during communication \\[30\\].  4.9.2. Correct Processing of Information  Security Requirement 75 -- Uniquely Identifying Patients/Persons: The EHRi and PoS systems connected to the EHRi must:  a\\) Ensure that patients/persons are assigned an identifier (patient ID) that can uniquely identify the patient/person within the EHRi or within the PoS system \\[10\\];",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the secure and accurate identification of organizational users, processes, and patients within the system. By generating unique identifiers and avoiding the use of personal device information, the application enhances privacy and supports precise authentication and record matching in healthcare environments.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must uniquely identify and authenticate organizational users and processes acting on their behalf, ensuring that identifiers do not rely on personally identifiable device information and uniquely identify patients within the system."
  },
  {
    "PUID": "SECM-CAT-IAA-024",
    "Requirement description": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR).",
    "Source": "§ 164.312 Technical safeguards.  \\(d\\) Standard: Person or entity authentication  Implement procedures to verify that a person or entity seeking access to electronic protected health information is the one claimed \\[9\\].  4.5. Human Resources Security:  Security Requirement 13 -- Verifying the Identity of Users All organizations connecting to the EHRi or hosting components of the EHRi must verify the identity and address of each permanent or temporary staff member or contractor who will become a registered user of a PoS system connected to the EHRi or who will have access to hosted components of the EHRi \\[10\\].  1.3. Are there procedures to verify that any person or entity claiming access to electronic protected health information complies with its claim? \\[33\\].  9.2.1 User registration and de-registration: Access to health information systems that process personal health information shall be subject to a formal user registration process. User registration procedures shall ensure that the level of authentication required of claimed user identity is consistent with the level(s) of access that will become available to the user \\[7\\].  1.1. Is there any registration/log-in available in the app? \\[33\\].  4.2.8.1. User Registration: Security Requirement 53 -- Registering Users: All organizations connecting to the EHRi must subject potential users of PoS systems that connect to the EHRi to a formal user-registration process. These user-registration procedures must ensure:  a\\) The level of user identification that is provided is consistent with the assurance required, given the value of the information assets and the functions that will become available to the user;  b\\) Each potential user has a legitimate relationship with the organization; and  c\\) Each potential user has a legitimate need to access PHI via the EHRi \\[10\\].  CWE-306: Missing Authentication for Critical Function  The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources \\[35\\].  CWE-287: Improper Authentication  When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code \\[35\\].  Test ID 11: Data within EHR is accessible only to authorized users and services \\[36\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that only authorized users can access e-health data by verifying their identity through a formal registration and authentication process, thereby preventing unauthorized access and ensuring that critical functions are only executed with proper authentication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR)."
  },
  {
    "PUID": "SECM-CAT-IAA-024",
    "Requirement description": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR).",
    "Source": "§ 164.312 Technical safeguards.  \\(d\\) Standard: Person or entity authentication  Implement procedures to verify that a person or entity seeking access to electronic protected health information is the one claimed \\[9\\].  4.5. Human Resources Security:  Security Requirement 13 -- Verifying the Identity of Users All organizations connecting to the EHRi or hosting components of the EHRi must verify the identity and address of each permanent or temporary staff member or contractor who will become a registered user of a PoS system connected to the EHRi or who will have access to hosted components of the EHRi \\[10\\].  1.3. Are there procedures to verify that any person or entity claiming access to electronic protected health information complies with its claim? \\[33\\].  9.2.1 User registration and de-registration: Access to health information systems that process personal health information shall be subject to a formal user registration process. User registration procedures shall ensure that the level of authentication required of claimed user identity is consistent with the level(s) of access that will become available to the user \\[7\\].  1.1. Is there any registration/log-in available in the app? \\[33\\].  4.2.8.1. User Registration: Security Requirement 53 -- Registering Users: All organizations connecting to the EHRi must subject potential users of PoS systems that connect to the EHRi to a formal user-registration process. These user-registration procedures must ensure:  a\\) The level of user identification that is provided is consistent with the assurance required, given the value of the information assets and the functions that will become available to the user;  b\\) Each potential user has a legitimate relationship with the organization; and  c\\) Each potential user has a legitimate need to access PHI via the EHRi \\[10\\].  CWE-306: Missing Authentication for Critical Function  The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources \\[35\\].  CWE-287: Improper Authentication  When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code \\[35\\].  Test ID 11: Data within EHR is accessible only to authorized users and services \\[36\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that only authorized users can access e-health data by verifying their identity through a formal registration and authentication process, thereby preventing unauthorized access and ensuring that critical functions are only executed with proper authentication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR)."
  },
  {
    "PUID": "SECM-CAT-IAA-024",
    "Requirement description": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR).",
    "Source": "§ 164.312 Technical safeguards.  \\(d\\) Standard: Person or entity authentication  Implement procedures to verify that a person or entity seeking access to electronic protected health information is the one claimed \\[9\\].  4.5. Human Resources Security:  Security Requirement 13 -- Verifying the Identity of Users All organizations connecting to the EHRi or hosting components of the EHRi must verify the identity and address of each permanent or temporary staff member or contractor who will become a registered user of a PoS system connected to the EHRi or who will have access to hosted components of the EHRi \\[10\\].  1.3. Are there procedures to verify that any person or entity claiming access to electronic protected health information complies with its claim? \\[33\\].  9.2.1 User registration and de-registration: Access to health information systems that process personal health information shall be subject to a formal user registration process. User registration procedures shall ensure that the level of authentication required of claimed user identity is consistent with the level(s) of access that will become available to the user \\[7\\].  1.1. Is there any registration/log-in available in the app? \\[33\\].  4.2.8.1. User Registration: Security Requirement 53 -- Registering Users: All organizations connecting to the EHRi must subject potential users of PoS systems that connect to the EHRi to a formal user-registration process. These user-registration procedures must ensure:  a\\) The level of user identification that is provided is consistent with the assurance required, given the value of the information assets and the functions that will become available to the user;  b\\) Each potential user has a legitimate relationship with the organization; and  c\\) Each potential user has a legitimate need to access PHI via the EHRi \\[10\\].  CWE-306: Missing Authentication for Critical Function  The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources \\[35\\].  CWE-287: Improper Authentication  When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct. This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code \\[35\\].  Test ID 11: Data within EHR is accessible only to authorized users and services \\[36\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that only authorized users can access e-health data by verifying their identity through a formal registration and authentication process, thereby preventing unauthorized access and ensuring that critical functions are only executed with proper authentication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a formal user registration and authentication process, ensuring that only authorized users can access electronic health information (EHR)."
  },
  {
    "PUID": "SECM-CAT-IAA-025",
    "Requirement description": "The application must enforce approved authorizations for controlling the flow of information within the system and between interconnected systems, adhering to organization-defined data flow control policies.",
    "Source": "V-222427: The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies. Configure the application to enforce data flow control in accordance with data flow control policies \\[15\\].  V-222428: The application must enforce approved authorizations for controlling the flow of information between interconnected systems based on organization-defined information flow control policies. Configure the application to enforce data flow control in accordance with data flow control policies \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that information flow within the application and between interconnected systems is controlled and authorized based on predefined organizational policies. Proper enforcement of information flow control prevents unauthorized data access, reduces the risk of data leaks, and supports compliance with regulatory requirements in healthcare environments.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce approved authorizations for controlling the flow of information within the system and between interconnected systems, adhering to organization-defined data flow control policies."
  },
  {
    "PUID": "SECM-CAT-IAA-026",
    "Requirement description": "The application must implement time-limited user registration for Point of Service (PoS) systems connected to the EHRi, requiring periodic renewal of user registrations to maintain access.",
    "Source": "4.2.8.1. User Registration  Security Requirement 55 -- Time-Limited User Registration: All organizations connecting to the EHRi must ensure that the registration of users of PoS systems that connect to the EHRi is time-limited (after which, the user's registration must be renewed) \\[10\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that user registrations for PoS systems connected to the EHRi remain valid and secure by requiring periodic renewal. Time-limited registration reduces the risk of unauthorized access and enforces regular verification of user permissions, aligning with information flow control policies.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement time-limited user registration for Point of Service (PoS) systems connected to the EHRi, requiring periodic renewal of user registrations to maintain access."
  },
  {
    "PUID": "SECM-CAT-IAA-027",
    "Requirement description": "The application must restrict connection times to high-risk EHRi services to enhance security and minimize the risk of unauthorized access.",
    "Source": "9.4.2 Secure log-on procedures: l) restrict connection times to provide additional security for high-risk applications and reduce the window of opportunity for unauthorized access \\[7\\].  Security Requirement 69 -- Restricting Connection Times to EHRi Applications: Where appropriate, the EHRi should restrict connection duration to EHRi application services to provide additional security for access to those applications \\[10\\].  Test ID 12: Remote access to the EHR is monitored and controlled by access type, preventing unauthorized connections \\[36\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that connection times to EHRi applications are restricted, reducing the exposure window for unauthorized access and limiting potential attack opportunities. By managing session duration for high-risk applications, the application enhances access control and protects sensitive healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must restrict connection times to high-risk EHRi services to enhance security and minimize the risk of unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IAA-028",
    "Requirement description": "The application must implement authentication mechanisms that directly verify the end user's identity rather than relying solely on device identity.",
    "Source": "Use authentication that ties back to the end user identity (rather than only to the device identity) \\[16\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that authentication mechanisms are designed to identify the actual user, not just the device they are using. Tying authentication to user identity reduces the risk of unauthorized access if the device is compromised or shared, improving the overall security of healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement authentication mechanisms that directly verify the end user's identity rather than relying solely on device identity."
  },
  {
    "PUID": "SECM-CAT-IAA-029",
    "Requirement description": "The application must validate certificates by constructing a certification path, including status information, to an accepted trust anchor when utilizing PKI-based authentication.",
    "Source": "V-222550: The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path (which includes status information) to an accepted trust anchor. Design the application to construct a certification path to an accepted trust anchor when using PKI-based authentication \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the integrity and trustworthiness of PKI-based authentication by validating certificates against an accepted trust anchor. Constructing a certification path provides assurance that the certificate is authentic, unrevoked, and valid, reducing the risk of unauthorized access or malicious actors compromising the application.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-030",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate certificates by constructing a certification path, including status information, to an accepted trust anchor when utilizing PKI-based authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-030",
    "Requirement description": "The application must implement a local cache of revocation data to support certification path discovery and validation when network access to revocation information is unavailable during PKI-based authentication.",
    "Source": "V-222553: The application, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network. Implement a Certificate Revocation List (CRL) import process and configure the application to check the CRL if OCSP is not available \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the reliability of PKI-based authentication even in scenarios where network access to revocation information is interrupted. By maintaining a local cache of revocation data, the application can validate certificates against a Certificate Revocation List (CRL), providing an additional layer of security and reducing dependency on external networks.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a local cache of revocation data to support certification path discovery and validation when network access to revocation information is unavailable during PKI-based authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-031",
    "Requirement description": "The application must map authenticated identities to individual user or group accounts during PKI-based authentication to ensure accurate association of certificate information.",
    "Source": "V-222552: The application must map the authenticated identity to the individual user or group account for PKI-based authentication. Configure the application to map certificate information to individual users or group accounts or create a process for automatically determining the individual user or group based on certificate information provided in the logs \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that the application accurately associates authenticated identities with specific user or group accounts during PKI-based authentication. Proper mapping of certificate information enhances accountability, supports access control policies, and ensures compliance with organizational security standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must map authenticated identities to individual user or group accounts during PKI-based authentication to ensure accurate association of certificate information."
  },
  {
    "PUID": "SECM-CAT-IAA-032",
    "Requirement description": "The application must validate certificates by constructing a certification path, including status information, to an accepted trust anchor during PKI-based authentication.",
    "Source": "V-222551: The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path (which includes status information) to an accepted trust anchor. Design the application to construct a certification path to an accepted trust anchor when using PKI-based authentication \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Validating certificates through a constructed certification path ensures that PKI-based authentication is trustworthy and secure. This process guarantees that certificates are verified against a trusted source, preventing the use of invalid or compromised certificates and protecting sensitive healthcare data from unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate certificates by constructing a certification path, including status information, to an accepted trust anchor during PKI-based authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-033",
    "Requirement description": "The application must implement robust mechanisms to secure local user authentication and mitigate the risk of client-side bypass vulnerabilities, especially on jailbroken or compromised devices.",
    "Source": "2\\. Local user authentication can lead to client-side bypass vulnerabilities. If the application stores data locally, the authentication routine can be bypassed on jailbroken devices through runtime manipulation or binary modification. If offline authentication is a compelling business requirement, consult additional guidance on preventing binary attacks against the mobile app \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement addresses the risks of local user authentication, which can be exploited through client-side attacks such as runtime manipulation or binary modification on compromised devices. Implementing secure mechanisms for local authentication ensures that the application\\'s authentication routines cannot be easily bypassed, safeguarding sensitive healthcare data stored locally.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-034",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust mechanisms to secure local user authentication and mitigate the risk of client-side bypass vulnerabilities, especially on jailbroken or compromised devices."
  },
  {
    "PUID": "SECM-CAT-IAA-034",
    "Requirement description": "The application must implement robust authentication and authorization mechanisms that protect user credentials, ensure access is limited to necessary data, and enforce server-side verification for all client-side controls.",
    "Source": "164.308 Administrative safeguards.  (a) A covered entity or business associate must, in accordance with § 164.306:",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that user authentication and authorization processes are secure and reliable by combining client-side and server-side controls. Protecting user credentials and ensuring access is limited to necessary data mitigates risks of unauthorized access and enhances the security of sensitive healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust authentication and authorization mechanisms that protect user credentials, ensure access is limited to necessary data, and enforce server-side verification for all client-side controls."
  },
  {
    "PUID": "SECM-CAT-IAA-035",
    "Requirement description": "The application must implement network access control and role-based mechanisms to ensure users and administrators access only the resources required for their roles across all system components and architecture segments.",
    "Source": "4.3.1. access control  Network access control: firewalling, application, or user roles are used to limit access to the needed resources for a notional administrator or patient to use the system at all segments and service components within the build architecture \\[9\\].  Test ID 1: Architecture accounts for multiple user roles and the access privileges assigned to each role \\[36\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that access to application resources is restricted based on user roles and responsibilities, minimizing the risk of unauthorized access. By limiting access through firewalls, role-based controls, and application configurations, the system protects sensitive data and maintains compliance with healthcare security standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement network access control and role-based mechanisms to ensure users and administrators access only the resources required for their roles across all system components and architecture segments."
  },
  {
    "PUID": "SECM-CAT-IAA-036",
    "Requirement description": "The application must avoid using spoof-able values, such as device identifiers or geolocation data, for user authentication.",
    "Source": "Avoid Weak Patterns: 7. Avoid using spoof-able values for user authentication, including device identifiers or geo-location \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that authentication mechanisms are secure by eliminating reliance on easily spoofed values like device identifiers and geo-location data. Using strong and reliable authentication factors reduces the risk of unauthorized access and enhances the overall security of sensitive healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must avoid using spoof-able values, such as device identifiers or geolocation data, for user authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-037",
    "Requirement description": "The application must use WS-Security to protect messages with time stamps, including creation and expiration times, and sequence numbers to prevent replay attacks and ensure message integrity.",
    "Source": "V-222399: Messages protected with WS_Security must use time stamps with creation and expiration times. Design and configure applications using WS-Security messages to use time stamps with creation and expiration times and sequence numbers \\[15\\].  SR5: User Anonymity Each device must have a unique virtual identity which is known only to the user. It may be generated using a password known to the user and credentials on the SE. The adversary must not be able to use it for replay attacks or to find the actual identity \\[30\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that WS-Security messages include time stamps and sequence numbers to prevent replay attacks and validate message integrity. Proper implementation enhances the security of communication and prevents unauthorized access or message tampering in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use WS-Security to protect messages with time stamps, including creation and expiration times, and sequence numbers to prevent replay attacks and ensure message integrity."
  },
  {
    "PUID": "SECM-CAT-IAA-038",
    "Requirement description": "The application must ensure that each asserting party provides unique assertion ID references for every SAML assertion to maintain assertion integrity and prevent replay attacks.",
    "Source": "V-222401: The application must ensure each unique asserting party provides unique assertion ID references for each SAML assertion. Design and configure each SAML assertion authority to use unique assertion identifiers \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that SAML assertions include unique assertion IDs for each asserting party to prevent replay attacks, ensure assertion integrity, and enhance trust in federated authentication systems. Proper implementation guarantees secure identification and tracking of SAML assertions across applications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-039",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that each asserting party provides unique assertion ID references for every SAML assertion to maintain assertion integrity and prevent replay attacks."
  },
  {
    "PUID": "SECM-CAT-IAA-039",
    "Requirement description": "The application must validate the validity periods of all WS-Security tokens and SAML assertions to ensure secure communication and prevent the use of expired or invalid credentials.",
    "Source": "V-222400: Validity periods must be verified on all application messages using WS-Security or SAML assertions. Design and configure the application to use validity periods, ensure validity periods are verified on all WS-Security token profiles and SAML Assertions \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that validity periods on WS-Security tokens and SAML assertions are enforced to prevent replay attacks and ensure the use of current and valid credentials during authentication and communication. Implementing this control protects the application from unauthorized access and malicious attacks leveraging expired tokens or assertions.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-038",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate the validity periods of all WS-Security tokens and SAML assertions to ensure secure communication and prevent the use of expired or invalid credentials."
  },
  {
    "PUID": "SECM-CAT-IAA-040",
    "Requirement description": "The application must use FIPS-approved random number generators to generate SessionIndex in SAML AuthnStatements and ensure encrypted assertions or equivalent confidentiality protections when assertion data passes through intermediaries.",
    "Source": "V-222573: Applications making SAML assertions must use FIPS-approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement. Configure the application to use a FIPS-validated cryptographic module \\[15\\].  V-222402: The application must ensure encrypted assertions, or equivalent confidentiality protections are used when assertion data is passed through an intermediary, and confidentiality of the assertion data is required when passing through the intermediary. Encrypt assertions or use equivalent confidentiality when sensitive assertion data is passed through an intermediary \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the secure generation of SAML SessionIndex using FIPS-approved random numbers to prevent predictability and enhance authentication security. Additionally, encrypting SAML assertions or providing equivalent confidentiality ensures the protection of sensitive assertion data from exposure when transmitted through intermediaries.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use FIPS-approved random number generators to generate SessionIndex in SAML AuthnStatements and ensure encrypted assertions or equivalent confidentiality protections when assertion data passes through intermediaries."
  },
  {
    "PUID": "SECM-CAT-IAA-041",
    "Requirement description": "The application must implement the \\<NotOnOrAfter\\> condition in the \\<SubjectConfirmation\\> element of SAML assertions to enforce time-bound validity and prevent the reuse of expired assertions.",
    "Source": "V-222403: The application must use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion. Design and configure the application to use the \\<NotOnOrAfter\\> condition when using the \\<SubjectConfirmation\\> element in a SAML assertion \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that SAML assertions are time-bound, enhancing security by limiting their validity to a specific duration. Implementing the \\<NotOnOrAfter\\> condition prevents unauthorized reuse of assertions after their expiration, mitigating replay attacks and maintaining secure authentication flows.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-042",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement the \\<NotOnOrAfter\\> condition in the \\<SubjectConfirmation\\> element of SAML assertions to enforce time-bound validity and prevent the reuse of expired assertions."
  },
  {
    "PUID": "SECM-CAT-IAA-042",
    "Requirement description": "The application must implement the \\<NotBefore\\> and \\<NotOnOrAfter\\> conditions or the \\<OneTimeUse\\> element within the \\<Conditions\\> element in SAML assertions to enforce time-bound validity and restrict reuse.",
    "Source": "V-222404: The application must use both the NotBefore and NotOnOrAfter elements or OneTimeUse element when using the Conditions element in a SAML assertion. Design and configure the application to implement the use of the \\<NotBefore\\> and \\<NotOnOrAfter\\> or \\<OneTimeUse\\> when using the \\<Conditions\\> element in a SAML assertion \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement enhances the security of SAML assertions by ensuring time-based validity and preventing unauthorized reuse. Using \\<NotBefore\\> and \\<NotOnOrAfter\\> elements enforces strict temporal boundaries, while the \\<OneTimeUse\\> element ensures that assertions cannot be reused, mitigating risks such as replay attacks.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-041",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement the \\<NotBefore\\> and \\<NotOnOrAfter\\> conditions or the \\<OneTimeUse\\> element within the \\<Conditions\\> element in SAML assertions to enforce time-bound validity and restrict reuse."
  },
  {
    "PUID": "SECM-CAT-IAA-043",
    "Requirement description": "The application must ensure that only one \\<OneTimeUse\\> element is included in the \\<Conditions\\> element of a SAML assertion to maintain the integrity of single-use conditions.",
    "Source": "V-222405: The application must ensure if a OneTimeUse element is used in an assertion, there is only one of the same used in the Conditions element portion of an assertion. When using OneTimeUse elements in a SAML assertion only allow one, OneTimeUse element to be used in the conditions element of a SAML assertion \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures the integrity of SAML assertions by enforcing the use of a single \\<OneTimeUse\\> element in the \\<Conditions\\> section. By restricting multiple \\<OneTimeUse\\> elements, the application prevents ambiguity or misuse, maintaining the assertion\\'s security and functionality.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that only one \\<OneTimeUse\\> element is included in the \\<Conditions\\> element of a SAML assertion to maintain the integrity of single-use conditions."
  },
  {
    "PUID": "SECM-CAT-IAA-044",
    "Requirement description": "The application must implement persistent authentication as an opt-in feature, ensuring it is not enabled by default to enhance user control and security.",
    "Source": "8\\. Persistent authentication within mobile applications should be implemented as an opt-in and not enabled by default \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that persistent authentication, which allows users to remain logged in for extended periods, is enabled only with explicit user consent. By defaulting to non-persistent sessions, the application minimizes the risk of unauthorized access due to unattended devices or compromised sessions, improving security for sensitive healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement persistent authentication as an opt-in feature, ensuring it is not enabled by default to enhance user control and security."
  },
  {
    "PUID": "SECM-CAT-IAA-045",
    "Requirement description": "The application must perform all authentication requests server-side and ensure that application data is only available on the mobile device after successful authentication.",
    "Source": "Avoid Weak Patterns: 3. Perform all authentication requests server-side, where possible. Upon successful authentication, application data will be loaded onto the mobile device, ensuring application data availability only after successful authentication \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that authentication is securely processed on the server to minimize client-side vulnerabilities. By loading application data only after successful authentication, the application mitigates risks such as unauthorized data access and enhances overall security, especially for sensitive healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must perform all authentication requests server-side and ensure that application data is only available on the mobile device after successful authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-046",
    "Requirement description": "The application must implement secure password management procedures, prohibit the use of weak authentication methods such as 4-digit PINs, and ensure local authentication mechanisms follow platform best practices.",
    "Source": "164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  \\(C\\) Password management (Addressable)  Procedures for creating, changing, and safeguarding passwords \\[9\\].  MASVS- AUTH -2: The app performs local authentication securely according to the platform best practices: Many apps allow users to authenticate via biometrics or a local PIN code. These authentication mechanisms need to be correctly implemented. Additionally, some apps might not have a remote endpoint, and rely fully on local app authentication \\[20\\].  Avoid Weak Patterns: 9. Where possible, refrain from allowing users to provide 4-digit PIN numbers for authentication passwords \\[3\\].",
    "Priority": "Not described",
    "Rationale": "This requirement enhances application security by enforcing robust password management policies, avoiding weak authentication methods, and ensuring local authentication mechanisms are implemented securely. Following platform best practices minimizes risks such as brute force attacks, unauthorized access, and compromised user credentials, particularly in healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-047",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement secure password management procedures, prohibit the use of weak authentication methods such as 4-digit PINs, and ensure local authentication mechanisms follow platform best practices."
  },
  {
    "PUID": "SECM-CAT-IAA-047",
    "Requirement description": "The application must enforce a minimum password lifetime of 24 hours to prevent users from bypassing password history requirements by making frequent password changes.",
    "Source": "V-222544: The application must enforce 24 hours/1 day as the minimum password lifetime. Configure the application to have a minimum password lifetime of 24 hours \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing a minimum password lifetime prevents users from bypassing password history requirements by rapidly cycling through passwords. This measure ensures that password policies are effective in maintaining security, particularly in applications managing sensitive data such as healthcare records.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-046",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a minimum password lifetime of 24 hours to prevent users from bypassing password history requirements by making frequent password changes."
  },
  {
    "PUID": "SECM-CAT-IAA-048",
    "Requirement description": "The application must enforce a maximum password lifetime of 60 days to ensure users regularly update their passwords and maintain strong account security.",
    "Source": "V-222545: The application must enforce a 60-day maximum password lifetime restriction. Configure the application to have a maximum password lifetime of 60 days \\[15\\].  Regular password update \\[26\\].",
    "Priority": "Not described",
    "Rationale": "Implementing a maximum password lifetime of 60 days ensures that passwords are periodically updated, reducing the likelihood of unauthorized access due to compromised credentials. This practice is especially critical in securing applications that handle sensitive data, such as healthcare information.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a maximum password lifetime of 60 days to ensure users regularly update their passwords and maintain strong account security."
  },
  {
    "PUID": "SECM-CAT-IAA-049",
    "Requirement description": "The application must enforce password complexity by requiring at least 15 characters, including one upper-case letter, one lower-case letter, one numeric character, and one special character, to ensure robust user authentication for accessing personal mobile health data.",
    "Source": "Use a password or other user authentication: Users use a combination of private and public keys that they must access for personal mobile health data \\[32\\].  V-222540: The application must enforce password complexity by requiring that at least one special character be used. Configure the application to require at least one special character in the password \\[15\\].  V-222539: The application must enforce password complexity by requiring that at least one numeric character be used. Configure the application to require at least one numeric character in the password \\[15\\].  V-222538: The application must enforce password complexity by requiring that at least one lower-case character be used. Configure the application to require at least one lower-case character in the password \\[15\\].  V-222537: The application must enforce password complexity by requiring that at least one upper-case character be used. Configure the application to require at least one upper-case character in the password \\[15\\].  V-222536: The application must enforce a minimum 15-character password length. Configure the application to require 15 characters in the password \\[15\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures robust user authentication by enforcing strong password complexity rules. These measures protect personal mobile health data from unauthorized access and enhance the overall security posture of the application.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce password complexity by requiring at least 15 characters, including one upper-case letter, one lower-case letter, one numeric character, and one special character, to ensure robust user authentication for accessing personal mobile health data."
  },
  {
    "PUID": "SECM-CAT-IAA-050",
    "Requirement description": "The application must enforce a policy requiring at least eight characters to be changed when passwords are updated, ensuring password uniqueness and reducing the risk of reuse.",
    "Source": "V-222541: The application must require the change of at least 8 of the total number of characters when passwords are changed. Configure the application to require the change of at least 8 characters in the password when passwords are changed \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing a requirement to change at least eight characters in a password during updates ensures that new passwords are significantly different from previous ones. This policy enhances security by reducing the likelihood of password reuse or easy guessing, particularly in applications managing sensitive data such as healthcare records.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a policy requiring at least eight characters to be changed when passwords are updated, ensuring password uniqueness and reducing the risk of reuse."
  },
  {
    "PUID": "SECM-CAT-IAA-051",
    "Requirement description": "The application must prohibit password reuse for at least the last five passwords to ensure strong password security and mitigate risks associated with recycled credentials.",
    "Source": "V-222546: The application must prohibit password reuse for a minimum of five generations. Configure the application to prohibit password reuse for up to 5 passwords \\[6\\].",
    "Priority": "Not described",
    "Rationale": "This requirement ensures that users cannot reuse their previous five passwords, reducing the risk of compromised credentials being reused and enhancing overall password security. Enforcing a password history policy strengthens the application's defense against unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prohibit password reuse for at least the last five passwords to ensure strong password security and mitigate risks associated with recycled credentials."
  },
  {
    "PUID": "SECM-CAT-IAA-052",
    "Requirement description": "The application must support the use of temporary passwords for system logons, requiring an immediate change to a permanent password upon first use.",
    "Source": "V-222547: The application must allow the use of a temporary password for system logons with an immediate change to a permanent password. Configure the application to specify when a password is temporary and change the temporary password on the first use \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Temporary passwords provide a secure mechanism for initial or recovery access to the application. Requiring immediate replacement with a permanent password ensures that temporary credentials cannot be exploited for prolonged unauthorized access, strengthening overall security.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must support the use of temporary passwords for system logons, requiring an immediate change to a permanent password upon first use."
  },
  {
    "PUID": "SECM-CAT-IAA-053",
    "Requirement description": "The application must ensure that passwords can only be changed by the associated user or an administrator to prevent unauthorized modifications.",
    "Source": "V-222548: The application password must not be changeable by users other than the administrator or the user with which the password is associated \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Restricting password changes to the associated user or an administrator ensures that unauthorized individuals cannot modify passwords, protecting user accounts from potential compromise and maintaining the integrity of access control mechanisms.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that passwords can only be changed by the associated user or an administrator to prevent unauthorized modifications."
  },
  {
    "PUID": "SECM-CAT-IAA-054",
    "Requirement description": "The application must enforce strong authentication mechanisms, such as CAC, to establish non-local maintenance and diagnostic sessions to ensure secure access.",
    "Source": "V-222565: The application must employ strong authenticators in the establishment of non-local maintenance and diagnostic sessions. Configure the application to use strong authentication (CAC) when accessing the application for maintenance purposes \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Strong authentication mechanisms are essential for securing non-local maintenance and diagnostic sessions. Requiring methods such as CAC ensures that only authorized personnel can access the application remotely, reducing the risk of unauthorized access and potential security breaches.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-055",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce strong authentication mechanisms, such as CAC, to establish non-local maintenance and diagnostic sessions to ensure secure access."
  },
  {
    "PUID": "SECM-CAT-IAA-055",
    "Requirement description": "The application must implement authorization security controls independent of authentication mechanisms to ensure user permissions are properly verified and not solely reliant on authentication.",
    "Source": "2.13. Authentication should not be used as a replacement of authorization security controls. Authorization verifies the permissions of a user and presupposes strong authentication \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Authentication confirms a user's identity, while authorization determines their permissions. Relying solely on authentication without robust authorization controls can lead to unauthorized access to sensitive functions or data. Separating these controls ensures a more secure application, particularly in environments handling sensitive information such as healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-054",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement authorization security controls independent of authentication mechanisms to ensure user permissions are properly verified and not solely reliant on authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-056",
    "Requirement description": "The application must clear sensitive data, reset the application state, and terminate server-side sessions upon session termination, backgrounding, or user logout, ensuring no residual data remains accessible.",
    "Source": "2.15. Clear any maintained sensitive data on session termination. Reset the application state and request for user re-authentication \\[16\\].  2.16. Clear any maintained sensitive data and attempt to also terminate any server-side session after application state change (e.g., termination, backgrounding). Consider a user request for application termination as a request to logout \\[16\\].  2.18. For platforms that support application component history stack (e.g., Android), always clear the stack on session or app termination and user's request to logout \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Clearing sensitive data and terminating sessions upon logout or application termination reduces the risk of unauthorized access to residual data. Proper management of server-side and client-side session states enhances security, especially for applications that handle sensitive information such as healthcare records.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must clear sensitive data, reset the application state, and terminate server-side sessions upon session termination, backgrounding, or user logout, ensuring no residual data remains accessible."
  },
  {
    "PUID": "SECM-CAT-IAA-057",
    "Requirement description": "The application must provide a logout function that terminates the authenticated session, invalidates the session on the server side, and destroys session ID cookies upon logoff or application closure.",
    "Source": "2.14. Apps that support user authentication must have a logout function which terminates the authenticated session. Upon logout, session should also be invalidated on the server side \\[16\\].  V-222578: The application must destroy the session ID value and/or cookie on logoff or browser close. Configure the application to destroy session ID cookies once the application session has terminated \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Providing a robust logout function ensures that authenticated sessions are properly terminated, minimizing the risk of unauthorized access from residual sessions. Destroying session IDs and invalidating server-side sessions enhances application security, especially for applications handling sensitive information like healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must provide a logout function that terminates the authenticated session, invalidates the session on the server side, and destroys session ID cookies upon logoff or application closure."
  },
  {
    "PUID": "SECM-CAT-IAA-058",
    "Requirement description": "The application must implement robust authentication and authorization mechanisms to protect electronic protected health information (ePHI), ensuring that only authorized users and devices can access the system and unknown devices are appropriately challenged.",
    "Source": "Not described",
    "Priority": "Not described",
    "Rationale": "Strong authentication and authorization mechanisms are essential for safeguarding sensitive healthcare data, including ePHI. By challenging unknown devices and enforcing secure protocols, the system minimizes the risk of unauthorized access and ensures compliance with healthcare security policies and standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust authentication and authorization mechanisms to protect electronic protected health information (ePHI), ensuring that only authorized users and devices can access the system and unknown devices are appropriately challenged."
  },
  {
    "PUID": "SECM-CAT-IAA-059",
    "Requirement description": "The application must implement and manage access rights to ensure that electronically protected health information (ePHI) is accessible only to authorized users or software programs and that access rights are reviewed, modified, and removed in compliance with organizational policies.",
    "Source": "5.18 Access rights: Access rights to information and other associated assets should be provisioned, reviewed, modified and removed in accordance with the organization's topic-specific policy on and rules for access control. It could be amplified in detail, review guidance section \\[6\\].  § 164.312 Technical safeguards.  \\(a\\)  \\(1\\) Standard: Access control. Implement technical policies and procedures for electronic information systems that maintain electronic protected health information to allow access only to those persons or software programs that have been granted access rights as specified in § 164.308(a)(4) \\[9\\].",
    "Priority": "Not described",
    "Rationale": "Managing and enforcing access rights is crucial for safeguarding ePHI and other sensitive assets. Ensuring that access is granted only to authorized individuals and regularly reviewing and updating access rights minimizes the risk of unauthorized access and helps maintain compliance with regulatory requirements.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-060",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement and manage access rights to ensure that electronically protected health information (ePHI) is accessible only to authorized users or software programs and that access rights are reviewed, modified, and removed in compliance with organizational policies."
  },
  {
    "PUID": "SECM-CAT-IAA-060",
    "Requirement description": "The application must implement federated identity management and modern authentication methods, such as passkeys and Credential Manager, to securely authenticate users and protect access to private data and sensitive operations.",
    "Source": "Authentication Use federated identity providers: Credential Manager supports federated authentication providers such as Sign in with Google. \\[18\\].  Data Handling Practices: Access to private data must require user authentication, utilizing modern authentication methods such as passkeys and Credential Manager \\[18\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Federated identity management streamlines authentication while maintaining security by leveraging trusted identity providers. Requiring modern authentication methods ensures strong protection of private data and supports secure access for sensitive operations, reducing the risk of unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-060",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement federated identity management and modern authentication methods, such as passkeys and Credential Manager, to securely authenticate users and protect access to private data and sensitive operations."
  },
  {
    "PUID": "SECM-CAT-IAA-061",
    "Requirement description": "The application must implement asymmetric cryptography for authentication and authorization, ensuring private keys are securely generated and stored using platform-supported secure hardware, such as a Trusted Execution Environment (TEE) or Secure Element (SE).",
    "Source": "Consider using asymmetric cryptography for authentication and authorization purposes. Generate and use the private key directly within a platform-supported secure hardware (e.g., Trusted Execution Environment (TEE), Secure Element (SE)) \\[16\\].  6.4. Avoid using third-party libraries that contain main processor-only cryptographic implementations. Prefer using cryptographic framework provided by a platform supported secure hardware (e.g. TEE, SE) \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Leveraging asymmetric cryptography within secure hardware ensures robust protection of sensitive keys against tampering or unauthorized access. This approach enhances the security of authentication and authorization processes by isolating cryptographic operations from the main processor.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement asymmetric cryptography for authentication and authorization, ensuring private keys are securely generated and stored using platform-supported secure hardware, such as a Trusted Execution Environment (TEE) or Secure Element (SE)."
  },
  {
    "PUID": "SECM-CAT-IAA-062",
    "Requirement description": "The application must minimize repeated credential requests by implementing time-bounded, revocable authorization tokens secured in transit using TLS and adhering to the latest authorization standards, such as OAuth 2.0.",
    "Source": "Minimize Credential Requests: Avoid frequent credential requests. Implement the use of authorization tokens to reduce the need for repeated entry of user credentials. Ensure that only the minimum necessary credential information is requested for authentication and authorization \\[18\\].  2.20. Instead of passwords consider using longer term authorization tokens that can be securely stored on the device (as per the OAuth model8). Secure the tokens in transit (using TLS). Tokens can be issued by the backend service after verifying the user credentials initially. The tokens should be time bounded to the specific service as well as revocable (if possible server side), thereby minimizing the damage in loss scenarios. Use the latest versions of the authorization standards (such as OAuth 2.0). Make sure that these tokens expire as frequently as practicable \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Replacing frequent credential requests with securely stored and time-bounded authorization tokens reduces the attack surface for credential compromise while enhancing user experience. Utilizing OAuth 2.0 and TLS ensures modern, secure practices for authentication and authorization.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must minimize repeated credential requests by implementing time-bounded, revocable authorization tokens secured in transit using TLS and adhering to the latest authorization standards, such as OAuth 2.0."
  },
  {
    "PUID": "SECM-CAT-IAA-063",
    "Requirement description": "The application must accept FICAM-approved third-party credentials and conform to FICAM-issued technical profiles for services that rely on external identity providers.",
    "Source": "V-222559: The application must accept FICAM-approved third-party credentials. Configure applications intended to be accessible to non-federal government agencies to use FICAM-approved third-party credentials \\[15\\].  The application must conform to FICAM-issued profiles. Configure the application to conform to FICAM-issued technical profiles when providing services that rely on external (Federal Government) identity providers \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Replacing frequent credential requests with securely stored and time-bounded authorization tokens reduces the attack surface for credential compromise while enhancing user experience. Utilizing OAuth 2.0 and TLS ensures modern, secure practices for authentication and authorization.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must accept FICAM-approved third-party credentials and conform to FICAM-issued technical profiles for services that rely on external identity providers."
  },
  {
    "PUID": "SECM-CAT-IAA-064",
    "Requirement description": "The application must implement robust account and credential management processes, including secure storage, transmission, and handling of user credentials, password management mechanisms, and automated account management functions.",
    "Source": "164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  \\(C\\) Password management (Addressable)  Procedures for creating, changing, and safeguarding passwords \\[9\\].  Security: 24. It has password management mechanisms \\[29\\].  Minimize Use AccountManager for Service Integration: Implement AccountManager to securely connect to cloud-based services that can be accessed by multiple applications. Ensure that passwords are not stored on the device, relying on AccountManager for handling credentials securely \\[18\\].  Only legitimate users can access the health data stored at the medical server \\[27\\].  V-222619: The ISSO must ensure an account management process is implemented, verifying only authorized users can gain access to the application, and individual accounts designated as inactive, suspended, or terminated are promptly removed. Establish an account management process \\[15\\].  CIS Critical Security Control 5: Account Management: Use processes and tools to assign and manage authorization to credentials for user accounts, including administrator accounts, as well as service accounts, to enterprise assets and software \\[14\\].  Credential Handling and Security: After retrieving an account using AccountManager, apply CREATOR before passing any credentials to avoid unintentionally exposing them to unauthorized applications \\[18\\].  V-222407: The application must provide automated mechanisms for supporting account management functions. Use automated processes and mechanisms for account management functions \\[15\\].  Properly Handle User Credentials: User credentials should always be stored, transmitted, and authenticated securely:  ```{=html} <!-- --> ``` Encrypt credentials during transmission.  Do not store user credentials on the device. Instead, consider using secure, revocable access tokens.  Implement strong user authentication protocols.  Regularly update and rotate any used API keys or tokens \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Implementing secure account and credential management ensures authorized access, minimizes the risk of credential compromise, and facilitates compliance with regulatory requirements for handling sensitive data like health information.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-065",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust account and credential management processes, including secure storage, transmission, and handling of user credentials, password management mechanisms, and automated account management functions."
  },
  {
    "PUID": "SECM-CAT-IAA-065",
    "Requirement description": "The application must implement a device-specific authentication token that the user can revocate to mitigate unauthorized access risks arising from lost or stolen devices.",
    "Source": "6\\. Mobile applications should ideally use a device-specific authentication token that can be revoked within the mobile application by the user, mitigating unauthorized access risks from a stolen/lost device \\[16\\].  SR12: Theft of device In the case of theft or loss of the device, there must be a provision to revoke old credentials and refurbish the health records on a new patient mobile device \\[30\\].",
    "Priority": "Not described",
    "Rationale": "Using a device-specific authentication token provides an additional layer of security by ensuring that access credentials are tied to the device. Revocability by the user reduces the risk of unauthorized access in case the device is lost or stolen.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-064",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a device-specific authentication token that the user can revocate to mitigate unauthorized access risks arising from lost or stolen devices."
  },
  {
    "PUID": "SECM-CAT-IAA-066",
    "Requirement description": "The application must purge credentials or keys from memory immediately after use to minimize exposure, using explicit memory management rather than relying on automatic garbage collection.",
    "Source": "3.4. Consider purging credentials or keys from memory after use. Avoid automatic memory managed structures (e.g., controlled by garbage collector) and immutable objects for maintaining the keys. Prefer to immediately zero out the memory containing the data after use rather than waiting for the garbage collection mechanism \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Purging credentials or keys from memory after use mitigates the risk of unauthorized access to sensitive data. Avoiding reliance on automatic memory management ensures proactive and secure handling of sensitive information.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must purge credentials or keys from memory immediately after use to minimize exposure, using explicit memory management rather than relying on automatic garbage collection."
  },
  {
    "PUID": "SECM-CAT-IAA-067",
    "Requirement description": "The application must immediately release UI frames containing credentials or keys after their use to prevent unintended exposure.",
    "Source": "3.5. If the credentials or keys appear in the user interface (UI) components, try to release the UI frames immediately after use. \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Releasing UI frames containing sensitive data, such as credentials or keys, minimizes the risk of accidental exposure or unauthorized access through interface caching or memory retention.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must immediately release UI frames containing credentials or keys after their use to prevent unintended exposure."
  },
  {
    "PUID": "SECM-CAT-IAA-068",
    "Requirement description": "The application must implement fine-grained URI access control using the android:grantUriPermissions attribute, FLAG_GRANT_READ_URI_PERMISSION, and FLAG_GRANT_WRITE_URI_PERMISSION in combination with the \\<grant-uri-permission\\> element, ensuring sensitive operations are secured with additional authentication.",
    "Source": "Granular URI Access Control: To enable fine-grained control over which URIs are accessed, use the android:grantUriPermissions attribute, in combination with FLAG_GRANT_READ_URI_PERMISSION and FLAG_GRANT_WRITE_URI_PERMISSION flags in Intent objects. Limit the scope of these permissions through the \\<grant-uri-permission\\> element \\[18\\].  MASVS-AUTH-1: The app uses secure authentication and authorization protocols and follows the relevant best practices: Most apps connecting to a remote endpoint require user authentication and also enforce some kind of authorization. While the enforcement of these mechanisms must be on the remote endpoint, the apps also have to ensure that it follows all the relevant best practices to ensure a secure use of the involved protocols \\[20\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Implementing granular URI access control minimizes unauthorized access risks by restricting permissions to specific resources. Adding authentication for sensitive operations enhances security by ensuring only authorized actions are performed.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement fine-grained URI access control using the android:grantUriPermissions attribute, FLAG_GRANT_READ_URI_PERMISSION, and FLAG_GRANT_WRITE_URI_PERMISSION in combination with the \\<grant-uri-permission\\> element, ensuring sensitive operations are secured with additional authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-069",
    "Requirement description": "The application must enforce a strong password policy and prohibit the reuse or recycling of session IDs to maintain robust authentication security.",
    "Source": "If a password-based authentication mechanism is used, ensure that a strong a password policy is being followed. Consider enforcing restrictions about password length and formation, reuse of old user passwords, use of common passwords, password duration, etc. It may also be useful to provide feedback on the strength of the password when it is being entered for the first time. However, do not maintain any representation of the password strength in application storage or the back-end server as it may expose the password in preimage attacks \\[16\\].  V-222582: The application must not re-use or recycle session IDs. Design the application to not re-use session IDs \\[15\\].",
    "Priority": "Not described",
    "Rationale": "A strong password policy ensures that user credentials are resilient against brute force and dictionary attacks while prohibiting session ID reuse or recycling, which prevents session fixation and unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a strong password policy and prohibit the reuse or recycling of session IDs to maintain robust authentication security."
  },
  {
    "PUID": "SECM-CAT-IAA-070",
    "Requirement description": "The application must validate session identifiers and ensure their authenticity throughout the session lifecycle, invalidating them upon logout or session termination to prevent unauthorized reuse.",
    "Source": "V-222580: Applications must validate session identifiers. Configure the application to configure user session identifiers \\[15\\].  SC-23 SESSION AUTHENTICITY  Control: Protect the authenticity of communications sessions.  Discussion: Protecting session authenticity addresses communications protection at the session level, not at the packet level. Such protection establishes grounds for confidence at both ends of communications sessions in the ongoing identities of other parties and the validity of transmitted information. Authenticity protection includes protecting against \"man-in-the-middle\" attacks, session hijacking, and the insertion of false information into sessions.  Control Enhancements:  \\(1\\) SESSION AUTHENTICITY \\| INVALIDATE SESSION IDENTIFIERS AT LOGOUT  Invalidate session identifiers upon user logout or other session termination.  Discussion: Invalidating session identifiers at logout curtails the ability of adversaries to capture and continue to employ previously valid session IDs \\[11\\].",
    "Priority": "Not described",
    "Rationale": "Validating session identifiers and ensuring their authenticity minimizes the risks of session hijacking and unauthorized reuse. Invalidation upon session termination prevents adversaries from exploiting active or cached session IDs.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate session identifiers and ensure their authenticity throughout the session lifecycle, invalidating them upon logout or session termination to prevent unauthorized reuse."
  },
  {
    "PUID": "SECM-CAT-IAA-071",
    "Requirement description": "The application must implement permission-based intent filtering to restrict the handling of sensitive data in intent to authorized applications only.",
    "Source": "Permission-Based Intent Filtering: When sending sensitive data in an intent, apply a permission check to ensure only authorized applications can receive the intent. Use a non-null permission parameter when sending an intent, so that only applications with the required permission can handle the intent. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Applying permission-based intent filtering ensures sensitive data transmitted via intents is only accessible to authorized applications, reducing the risk of unauthorized data access or leakage.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-072",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement permission-based intent filtering to restrict the handling of sensitive data in intent to authorized applications only."
  },
  {
    "PUID": "SECM-CAT-IAA-072",
    "Requirement description": "The application must implement alternative access controls, such as signature-level protection for inter-process communication (IPC) and adaptive authentication techniques, to enhance security without over-reliance on user-confirmed permissions.",
    "Source": "Use of Alternative Access Controls: Where possible, access controls other than user-confirmed permissions must be used. For example, signature-level protection must be applied for IPC communication instead of prompting users for permission \\[18\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].  IA-10 ADAPTIVE AUTHENTICATION  Control: Require individuals accessing the system to employ \\[Assignment: organization-defined supplemental authentication techniques or mechanisms\\] under specific \\[Assignment: organization-defined circumstances or situations\\].  Discussion: Adversaries may compromise individual authentication mechanisms employed by organizations and subsequently attempt to impersonate legitimate users. To address this threat, organizations may employ specific techniques or mechanisms and establish protocols to assess suspicious behavior. Suspicious behavior may include accessing information that individuals do not typically access as part of their duties, roles, or responsibilities; accessing greater quantities of information than individuals would routinely access; or attempting to access information from suspicious network addresses. When pre-established conditions or triggers occur, organizations can require individuals to provide additional authentication information. Another potential use for adaptive authentication is to increase the strength of mechanism based on the number or types of records being accessed. Adaptive authentication does not replace and is not used to avoid the use of multi-factor authentication mechanisms but can augment implementations of multi-factor authentication \\[11\\].",
    "Priority": "Not described",
    "Rationale": "Enhancing access control with alternative mechanisms and adaptive authentication improves the security of sensitive operations, minimizes dependency on user interaction, and mitigates risks posed by compromised authentication methods or suspicious activities.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-071",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement alternative access controls, such as signature-level protection for inter-process communication (IPC) and adaptive authentication techniques, to enhance security without over-reliance on user-confirmed permissions."
  },
  {
    "PUID": "SECM-CAT-IAA-073",
    "Requirement description": "The application must implement permission-based access control for sensitive resources.",
    "Source": "Control access to information (contacts, camera, localization) through permission \\[25\\].",
    "Priority": "Not described",
    "Rationale": "Restricting access to sensitive resources through permission-based controls ensures that unauthorized applications cannot access critical data or hardware, protecting user privacy and maintaining application security.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement permission-based access control for sensitive resources."
  },
  {
    "PUID": "SECM-CAT-IAA-074",
    "Requirement description": "The application must validate and enforce approved authorizations for logical access to information and system resources based on access control policies, ensuring only authorized users and services can access protected data and resources.",
    "Source": "Control access to information (contacts, camera, localization) through permission \\[25\\].  ons for services to avoid unauthorized access. Use declarative permissions and android for better visibility and control over service access \\[18\\].  Test ID 5: System components are configured to allow only authorized access to information \\[36\\].  Authorize access to the system based on:  1\\. A valid access authorization;  2\\. Intended system usage; and  3\\. \\[Assignment: organization-defined attributes (as required)\\] \\[11\\];  Control: Enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies \\[11\\].  V-222425: The application must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies. Design or configure the application to enforce access to application resources \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Proper enforcement of access controls is essential to protect sensitive information and system resources from unauthorized access. This ensures compliance with security policies and reduces the risk of data breaches and misuse of system functionalities.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate and enforce approved authorizations for logical access to information and system resources based on access control policies, ensuring only authorized users and services can access protected data and resources."
  },
  {
    "PUID": "SECM-CAT-IAA-075",
    "Requirement description": "The application must control the export behavior and access permissions of BroadcastReceiver components to prevent unauthorized access and ensure secure communication, particularly for sensitive data and critical functionality.",
    "Source": "Default Export Behavior: By default, BroadcastReceiver components are exported, making them accessible to any external application. This default behavior can expose the receiver to untrusted sources.  Receiver Export Control: If a BroadcastReceiver is not intended for use by external applications, it must be explicitly marked as android:exported=\\\"false\\\" in the \\<receiver\\> manifest declaration to prevent unauthorized external access.  Permission Protection: When the BroadcastReceiver is intended for use by other applications, the application must enforce security permissions by specifying the android:permission attribute in the \\<receiver\\> manifest element. This ensures that only applications with the correct permissions can send intents to the receiver.  Restricted Access to Broadcast Intents: If sensitive data is being handled, additional security mechanisms must be applied, such as specifying the permission required to send an Intent to the BroadcastReceiver. This prevents untrusted or malicious applications from invoking the receiver.  Explicit Receivers for Critical Functionality: For critical actions or services, explicit BroadcastReceiver implementations must be used, where the Intent explicitly identifies the target receiver by name, avoiding reliance on implicit broadcasts. This ensures that the correct receiver processes the Intent.  Use of Ordered Broadcasts: If ordered broadcasts are used, the application must ensure that permissions are properly enforced to prevent lower-priority receivers from intercepting or modifying the broadcast data without proper authorization \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Proper management of BroadcastReceiver components and their permissions is essential to avoid unauthorized access, mitigate security vulnerabilities, and ensure that sensitive data is handled securely. Controlling receiver export behavior and enforcing permissions reduces exposure to untrusted or malicious applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must control the export behavior and access permissions of BroadcastReceiver components to prevent unauthorized access and ensure secure communication, particularly for sensitive data and critical functionality."
  },
  {
    "PUID": "SECM-CAT-IAA-076",
    "Requirement description": "The application must implement secure practices for intent broadcasting, using explicit intents or controlled mechanisms to ensure broadcasts are delivered securely and only to intended recipients.",
    "Source": "Secure Intent Broadcasting: When broadcasting intents, consider using sendBroadcast or sendOrderedBroadcast based on application requirements.  ```{=html} <!-- --> ``` If a specific recipient must receive the broadcast, use an explicit intent and specify the receiver by name.  Be cautious with ordered broadcasts, as they can be consumed by a recipient and might not be delivered to all intended applications \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Secure broadcasting practices prevent unauthorized applications from intercepting or altering intent data. By using explicit intents and managing ordered broadcasts carefully, the application ensures data integrity and secure communication between components.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement secure practices for intent broadcasting, using explicit intents or controlled mechanisms to ensure broadcasts are delivered securely and only to intended recipients."
  },
  {
    "PUID": "SECM-CAT-IAA-077",
    "Requirement description": "The application must secure Inter-Process Communication (IPC) calls by implementing checkCallingPermission() for individual IPC requests or using declarative permissions in the manifest to enhance security and maintainability.",
    "Source": "Individual IPC Call Protection: Protect individual IPC calls made to the service by using checkCallingPermission() before processing any request. However, declarative permissions in the manifest are recommended for better maintainability and security \\[18\\].  MASVS-PLATFORM-1: The app uses IPC mechanisms securely: Apps typically use platform provided IPC mechanisms to intentionally expose data or functionality. Both installed apps and the user are able to interact with the app in many different ways. This control ensures that all interactions involving IPC mechanisms happen securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Properly securing IPC calls prevents unauthorized applications from accessing sensitive data or functionality exposed through IPC mechanisms. By validating permissions through checkCallingPermission() or declarative manifest entries, the application enforces robust access control policies.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must secure Inter-Process Communication (IPC) calls by implementing checkCallingPermission() for individual IPC requests or using declarative permissions in the manifest to enhance security and maintainability."
  },
  {
    "PUID": "SECM-CAT-IAA-078",
    "Requirement description": "The application must enforce explicit access control checks within Binder or Messenger interfaces to ensure secure communication, as these objects do not support declarative permissions in the manifest.",
    "Source": "Interface Permissions: Binder and Messenger objects aren\\'t declared in the manifest, and therefore cannot directly use declarative permissions. They inherit permissions declared in the manifest for the Service or Activity they are part of. If access control or authentication is required for the interface, the developer must implement explicit checks within the Binder or Messenger interface \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Binder and Messenger objects operate outside the scope of declarative manifest permissions, potentially exposing sensitive interfaces to unauthorized access. Implementing explicit access control checks within these interfaces ensures that only authorized applications or processes can interact with them.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce explicit access control checks within Binder or Messenger interfaces to ensure secure communication, as these objects do not support declarative permissions in the manifest."
  },
  {
    "PUID": "SECM-CAT-IAA-079",
    "Requirement description": "The application must implement access control mechanisms for interfaces by using methods like checkCallingPermission() to verify permissions of calling entities, ensuring secure and restricted access to sensitive services and activities.",
    "Source": "Not described",
    "Priority": "Not described",
    "Rationale": "Access controls on interfaces are essential to prevent unauthorized access to sensitive functionalities and data. Using checkCallingPermission() or equivalent methods ensures the application validates the permissions of callers, maintains the security of protected assets, and ensures compliance with organizational and regulatory access control policies.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-080",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement access control mechanisms for interfaces by using methods like checkCallingPermission() to verify permissions of calling entities, ensuring secure and restricted access to sensitive services and activities."
  },
  {
    "PUID": "SECM-CAT-IAA-080",
    "Requirement description": "The application must implement strong access controls, including secure user authentication, role-based access control (RBAC), and validation of user permissions before granting access to sensitive information or functionality.",
    "Source": "Employ Proper Access Controls: 1. Implement strong access controls to restrict unauthorized access to sensitive data. Authenticate users securely, enforce role-based access controls, and validate user permissions before granting access to sensitive information \\[3\\].  SR8: Selective Access Since the health folder may have a collection of different types of health information, they must be accessed using selective RBAC by medical professionals based on their role \\[30\\].  IA-9 SERVICE IDENTIFICATION AND AUTHENTICATION  Control: Uniquely identify and authenticate \\[Assignment: organization-defined system services and applications\\] before establishing communications with devices, users, or other services or applications.  Discussion: Services that may require identification and authentication include web applications using digital certificates or services or applications that query a database. Identification and authentication methods for system services and applications include information or code signing, provenance graphs, and electronic signatures that indicate the sources of services. Decisions regarding the validity of identification and authentication claims can be made by services separate from the services acting on those decisions. This can occur in distributed system architectures. In such situations, the identification and authentication decisions (instead of actual identifiers and authentication data) are provided to the services that need to act on those decisions \\[11\\].  9.2.3 Management of privileged access rights  1\\. Health information systems should associate users (including health professionals, supporting staff and others) with the records of subjects of care and allow future access based on this association.  2\\. Systems containing personal health information should support role-based access control capable of mapping each user to one or more roles and each role to one or more system functions.  3\\. A user of a health information system containing personal health information shall access its services in a single role \\[7\\].  4.8.2.2. Privilege Management  \\(a\\) Role-Based Access Control  Security Requirement 57 -- Granting Access to Users by Role: The EHRi and all PoS systems connected to the EHRi must support role-based access control (RBAC) capable of mapping each user to one or more roles and each role to one or more system functions  Consideration CH26 -- Select identity-proofing level of assurance by role: Consider what robust mechanism(s) should be used to initially prove the identity of the registrant and whether that level of assurance is required and/or adequate for all roles accessing the solution.  Consideration CH27 -- Use a single identity credential where possible: Consider the use of a single identity (i.e. single sign-on) for users (i.e. patients or providers) where the portal provides access to other applications/services that have separate authentication mechanisms.  Consideration ID-14 -- Consider Establishing Authentication Protocols for Use Among Member Organizations \\[10\\].",
    "Priority": "Not described",
    "Rationale": "Implementing strong access controls ensures that only authorized users can access sensitive information and system functionalities. By utilizing role-based access control and robust authentication mechanisms, the system minimizes risks of unauthorized access and ensures compliance with healthcare data protection standards.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-079",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement strong access controls, including secure user authentication, role-based access control (RBAC), and validation of user permissions before granting access to sensitive information or functionality."
  },
  {
    "PUID": "SECM-CAT-IAA-081",
    "Requirement description": "The application must support workgroup-based access control by assigning users to working groups and granting access to records based on group membership while ensuring timely revocation of access privileges when required.",
    "Source": "b\\) Workgroup-Based Access Control  Security Requirement 59 -- Granting Access to Users in Workgroups: The EHRi and all PoS systems connected to the EHRi must be capable of assigning users to working groups and granting access to records based on working groups.  Security Requirement 60 -- Timely Revocation of Access Privileges: The EHRi and all PoS systems connected to the EHRi must support the revocation of user access privileges in a timely manner (i.e. immediately prevent the user from logging on after access privileges have been revoked) \\[10\\].",
    "Priority": "Not described",
    "Rationale": "Implementing workgroup-based access control facilitates efficient management of user access by organizing users into working groups simplifying permissions for shared records. Ensuring timely revocation of access privileges is critical to mitigate risks of unauthorized access after a user\\'s permissions are rescinded.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must support workgroup-based access control by assigning users to working groups and granting access to records based on group membership while ensuring timely revocation of access privileges when required."
  },
  {
    "PUID": "SECM-CAT-IAA-082",
    "Requirement description": "The application must enforce discretionary access control policies, associating users with patient records to allow or restrict access based on pre-existing relationships while ensuring access privileges are reported for transparency.",
    "Source": "V-222426: The application must enforce organization-defined discretionary access control policies over defined subjects and objects. Design and configure the application to enforce discretionary access control policies \\[15\\].  \\(c\\) Discretionary Access Control  Security Requirement 61 -- Granting Access By Association: The EHRi and all PoS systems connected to the EHRi:  a\\) Must be capable of associating users (i.e. healthcare providers) with the records of patients/persons and allowing future access based on this association (i.e., they must be capable of granting discretionary access to records based on a registered user with legitimate and pre-existing access to a patient's record(s) granting access rights for that (those) record(s) to another registered user); and  b\\) Must not allow users to grant other users access to a record if the granting users themselves do not possess such access with respect to the record.  Note that granting other users access to a record does not override the role-based access control restrictions of those other users.  Security Requirement 62 -- Reporting the Access Privileges of a User: The EHRi must, and PoS systems connected to the EHRi should, provide functionality that can report, for a given user:  a\\) Which records the user can access;  b\\) Which portions of the record(s) the user can access; and  c\\) Which privileges (e.g. viewing, modification) the user has with respect to each of these records \\[10\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing discretionary access control policies ensures that access to sensitive patient records is granted based on legitimate relationships, reducing unauthorized access risks. Reporting access privileges promotes transparency and facilitates compliance with access control policies.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce discretionary access control policies, associating users with patient records to allow or restrict access based on pre-existing relationships while ensuring access privileges are reported for transparency."
  },
  {
    "PUID": "SECM-CAT-IAA-083",
    "Requirement description": "The application must handle failures of unauthorized calls to service interfaces, ensuring appropriate responses are provided when the calling process lacks necessary permissions.",
    "Source": "Handling Unauthorized Calls: If the calling process lacks permission to invoke an interface provided by a service, the bindService() invocation will fail. The application must handle these failures and provide appropriate responses \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Properly handling unauthorized interface calls enhances application security by preventing misuse of service interfaces, providing clear feedback to legitimate users, and logging unauthorized attempts for audit purposes.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must handle failures of unauthorized calls to service interfaces, ensuring appropriate responses are provided when the calling process lacks necessary permissions."
  },
  {
    "PUID": "SECM-CAT-IAA-084",
    "Requirement description": "The application must securely implement identity overriding mechanisms using clearCallingIdentity() and restoreCallingIdentity() to ensure temporary privilege escalation is safely managed during external process interactions.",
    "Source": "Overriding Caller Identity: If an external process needs to interact with the app but lacks the necessary permissions, use clearCallingIdentity() to temporarily override the caller\\'s identity, allowing the app to perform the call as if the app itself initiated it. After completing the call, use restoreCallingIdentity() to restore the original caller\\'s identity and permissions. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Proper use of identity-overriding mechanisms is critical to maintaining security during interactions with external processes. It ensures that temporary privilege escalation is controlled, reducing the risk of unauthorized access or privilege abuse.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must securely implement identity overriding mechanisms using clearCallingIdentity() and restoreCallingIdentity() to ensure temporary privilege escalation is safely managed during external process interactions."
  },
  {
    "PUID": "SECM-CAT-IAA-085",
    "Requirement description": "The application must comply with Android\\'s guidelines for bound services when using Binder or Messenger to perform inter-process communication (IPC).",
    "Source": "Compliance with Bound Services: Follow Android\\'s guidelines for bound services when using Binder or Messenger to perform IPC with a service. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Adhering to Android\\'s guidelines for bound services ensures secure and efficient inter-process communication (IPC). This minimizes the risks of unauthorized access, data leakage, and potential application instability due to misconfiguration.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must comply with Android\\'s guidelines for bound services when using Binder or Messenger to perform inter-process communication (IPC)."
  },
  {
    "PUID": "SECM-CAT-IAA-087",
    "Requirement description": "The application must ensure secure intent broadcasting by using explicit intents for specific recipients and applying appropriate controls when using ordered broadcasts to prevent unauthorized interception",
    "Source": "Secure Intent Broadcasting: When broadcasting intents, consider using sendBroadcast or sendOrderedBroadcast based on application requirements.  ```{=html} <!-- --> ``` If a specific recipient must receive the broadcast, use an explicit intent and specify the receiver by name.  Be cautious with ordered broadcasts, as they can be consumed by a recipient and might not be delivered to all intended applications \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Securing intent broadcasting prevents unauthorized interception and misuse of sensitive information shared between application components. This ensures that broadcasts reach the intended recipient and maintains the integrity and confidentiality of the transmitted data.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure secure intent broadcasting by using explicit intents for specific recipients and applying appropriate controls when using ordered broadcasts to prevent unauthorized interception"
  },
  {
    "PUID": "SECM-CAT-IAA-088",
    "Requirement description": "The application must integrate with Android\\'s Credential Manager to provide unified access to authentication methods, including passkeys, passwords, and federated sign-in solutions, ensuring seamless and secure user authentication.",
    "Source": "The system should integrate with Android\\'s Credential Manager to support unified API access for major authentication methods, including passkeys, passwords, and federated sign-in solutions like Google Sign-in \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Integrating with Android\\'s Credential Manager ensures consistent and secure handling of various authentication methods while streamlining user experience. This approach centralizes authentication processes, reduces security risks, and enhances compatibility with modern authentication standards.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must integrate with Android\\'s Credential Manager to provide unified access to authentication methods, including passkeys, passwords, and federated sign-in solutions, ensuring seamless and secure user authentication."
  },
  {
    "PUID": "SECM-CAT-IAA-089",
    "Requirement description": "The application must implement passkeys as a secure and user-friendly alternative to traditional passwords to enhance authentication processes and user experience.",
    "Source": "The Implement passkeys: Enable passkeys as a more secure and user-friendly upgrade to passwords \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Passkeys offer enhanced security compared to traditional passwords by leveraging cryptographic mechanisms that reduce the risk of credential theft, phishing attacks, and other common vulnerabilities. They also improve user convenience by simplifying authentication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement passkeys as a secure and user-friendly alternative to traditional passwords to enhance authentication processes and user experience."
  },
  {
    "PUID": "SECM-CAT-IAA-090",
    "Requirement description": "The application must integrate with Android\\'s autofill framework to streamline authentication processes, securely enabling users to store and retrieve complex passwords via password managers while reducing user errors and friction.",
    "Source": "Autofill Framework Integration: The system must integrate with Android\\'s autofill framework to streamline the sign-up and sign-in process, allowing users to securely store and retrieve complex passwords via password managers \\[18\\].  Error Reduction via Autofill: The system must reduce user friction and error rates during authentication by leveraging autofill to automatically fill in credentials, supporting the use of randomized, complex passwords \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Integrating with Android\\'s autofill framework enhances both security and user experience by enabling the use of randomized, complex passwords while minimizing manual input errors. This approach supports modern password management practices, promoting better overall application security and usability.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must integrate with Android\\'s autofill framework to streamline authentication processes, securely enabling users to store and retrieve complex passwords via password managers while reducing user errors and friction."
  },
  {
    "PUID": "SECM-CAT-IAA-091",
    "Requirement description": "The application must support biometric authentication methods, such as fingerprint scans or facial recognition, to enhance security for sensitive data in finance, healthcare, or identity management applications.",
    "Source": "The application must support biometric authentication methods, such as fingerprint scans or facial recognition, for enhanced security, particularly in apps dealing with sensitive data like finance, healthcare, or identity management \\[18\\].  Use of access passwords, PIN scramble, or fingerprint to verify user identity \\[25\\].",
    "Priority": "Not described",
    "Rationale": "Biometric authentication provides a secure and user-friendly way to verify identity, reducing reliance on traditional passwords and PINs. This is especially important in applications handling sensitive information, where additional layers of protection are required.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-092",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must support biometric authentication methods, such as fingerprint scans or facial recognition, to enhance security for sensitive data in finance, healthcare, or identity management applications."
  },
  {
    "PUID": "SECM-CAT-IAA-092",
    "Requirement description": "The application must implement FaceID and TouchID to unlock biometrically locked secrets and securely protect sensitive authentication materials, such as session tokens.",
    "Source": "Reinforce Authentication: 3. Use FaceID and TouchID to unlock biometrically locked secrets and securely protect sensitive authentication materials, like session tokens \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Using biometric methods like FaceID and TouchID enhances the security of sensitive authentication materials, ensuring that session tokens and other critical secrets are protected against unauthorized access. This approach minimizes risks associated with stolen or leaked credentials.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-091",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement FaceID and TouchID to unlock biometrically locked secrets and securely protect sensitive authentication materials, such as session tokens."
  },
  {
    "PUID": "SECM-CAT-IAA-093",
    "Requirement description": "The application must validate the presence of enrolled biometric data, such as registered fingerprints or iris scans, before enabling API access for biometric authentication purposes.",
    "Source": "13.3. Ensure that there are enrolled data using the biometric sensor (e.g., user's fingerprints and/or user's iris are registered) before using the API for authentication purposes \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Requiring enrolled biometric data before enabling API-based authentication ensures that biometric features are effectively configured and reduces the risk of authentication failures or unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate the presence of enrolled biometric data, such as registered fingerprints or iris scans, before enabling API access for biometric authentication purposes."
  },
  {
    "PUID": "SECM-CAT-IAA-094",
    "Requirement description": "The application must implement secure biometric authentication methods, such as fingerprint or facial recognition, ensuring compatibility with biometric sensors and providing alternative authentication controls when biometric hardware is unavailable.",
    "Source": "The application must support biometric authentication methods, such as fingerprint scans or facial recognition, for enhanced security, particularly in apps dealing with sensitive data like finance, healthcare, or identity management \\[18\\].  Add biometrics: Offer the ability to use biometric authentication such as fingerprint or facial recognition for added security \\[18\\].  4.6: Verify that biometric authentication, if any, is not event-bound (i.e. using an API that simply returns \\\"true\\\" or \\\"false\\\"). Instead, it is based on unlocking the keychain/keystore \\[19\\].  13.1. Always verify that there is a biometric sensor (e.g., Fingerprint reader) present and available on the device before using the API for authentication purposes. In the case that the sensor is not available, an alternative authentication control should be provided \\[16\\]  MASVS- AUTH -2: The app performs local authentication securely according to the platform best practices: Many apps allow users to authenticate via biometrics or a local PIN code. These authentication mechanisms need to be correctly implemented. Additionally, some apps might not have a remote endpoint, and rely fully on local app authentication \\[20\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Implementing robust biometric authentication methods strengthens application security for sensitive operations, ensuring that user credentials are protected and fallback authentication mechanisms are available in the absence of biometric hardware.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement secure biometric authentication methods, such as fingerprint or facial recognition, ensuring compatibility with biometric sensors and providing alternative authentication controls when biometric hardware is unavailable."
  },
  {
    "PUID": "SECM-CAT-IAA-095",
    "Requirement description": "The application must enforce step-up authentication for actions involving sensitive data or transactions, requiring additional authentication before granting access or execution.",
    "Source": "4.9: Verify that step-up authentication is required to enable actions that deal with sensitive data or transactions \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Step-up authentication provides an additional layer of security for critical operations involving sensitive data or high-value transactions, mitigating the risk of unauthorized access and enhancing overall application security.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce step-up authentication for actions involving sensitive data or transactions, requiring additional authentication before granting access or execution."
  },
  {
    "PUID": "SECM-CAT-IAA-096",
    "Requirement description": "The application must ensure authentication requirements for mobile applications are consistent with their web application counterparts, maintaining equivalent or greater authentication factors.",
    "Source": "4.9: Avoid Weak Patterns: 1. If you are porting a web application to a mobile equivalent, ensure the authentication requirements of mobile applications match that of the web application component. It should not be possible to authenticate with fewer factors than the web browser \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring equivalent authentication requirements across web and mobile platforms prevents potential security gaps, such as using fewer authentication factors on mobile applications, which could lead to unauthorized access or compromised security.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure authentication requirements for mobile applications are consistent with their web application counterparts, maintaining equivalent or greater authentication factors."
  },
  {
    "PUID": "SECM-CAT-IAA-097",
    "Requirement description": "The mobile application must implement organization-defined out-of-band authentication to enhance security under specified conditions.",
    "Source": "SRG-APP-000393-MAPP-000100: The mobile app must implement organization-defined out-of-band authentication under organization-defined conditions \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Out-of-band authentication provides an additional layer of security by leveraging an independent communication channel, reducing the risk of compromise in cases of session hijacking, phishing, or other credential-related attacks. It ensures that critical operations or sensitive access requests are verified through an external, secure mechanism.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must implement organization-defined out-of-band authentication to enhance security under specified conditions."
  },
  {
    "PUID": "SECM-CAT-IAA-098",
    "Requirement description": "The application must enforce multifactor authentication (MFA) for network access to privileged accounts and sensitive data, incorporating at least two distinct authentication factors for enhanced security.",
    "Source": "V-222523: The application must use multifactor (Alt. Token) authentication for network access to privileged accounts. Configure the application to use an Alt. Token when providing network access to privileged application accounts \\[15\\].  4.3.1. access control:  multifactor authentication: each system where a typical patient, doctor, or health IT administrator must interact with patient records, systems, or networks requires at least a certificate, username, and password to access \\[36\\].  9.4.1 Information access restriction: Health information systems processing personal health information shall authenticate users and should do so by means of authentication involving at least two factors \\[7\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].  1.6. Consider re-evaluating access authorization to sensitive data based on contextual information such as location (e.g., require further authentication if location data shows device is outside of the expected region) \\[16\\].  2.9. Use context to add security to authentication (e.g., geo location, IP location, etc). Ensure that any collected data is in compliance with the local laws and regulatory requirements \\[16\\].  2.10. Consider using additional authentication factors for applications giving access to sensitive data or interfaces where possible:  ```{=html} <!-- --> ``` Knowledge factors - Something you know (i.e. user's secret question)  Possession factors - Something you have (i.e. hardware token, grid, sim card)  Inherence factors - Something you are (i.e. fingerprint, voice, facial, retina recognition) \\[16\\]",
    "Priority": "Not described",
    "Rationale": "Multifactor authentication (MFA) ensures secure access to privileged accounts and sensitive data by requiring at least two different authentication factors. This mitigates risks associated with compromised credentials, enhances user identity validation, and complies with regulations such as HIPAA for health information systems.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce multifactor authentication (MFA) for network access to privileged accounts and sensitive data, incorporating at least two distinct authentication factors for enhanced security."
  },
  {
    "PUID": "SECM-CAT-IAA-99",
    "Requirement description": "The application must accept and electronically verify Personal Identity Verification (PIV) credentials, enforce multifactor authentication (MFA) using CAC or Alt. Token for local and network access, and support PIV credentials from other federal agencies.",
    "Source": "V-222524: The application must accept Personal Identity Verification (PIV) credentials. Configure the application to require CAC authentication \\[15\\].  V-222525: The application must electronically verify Personal Identity Verification (PIV) credentials. Configure the application to require CAC authentication \\[15\\].  V-222526: The application must use multifactor (e.g., CAC, Alt. Token) authentication for network access to non-privileged accounts. Configure the application to require CAC or Alt. Token authentication for non-privileged network access to non-privileged accounts \\[15\\].  SRG-APP-000392-MAPP-000100: The mobile app must electronically verify Personal Identity Verification (PIV) credentials \\[17\\].  V-222527: The application must use multifactor (Alt. Token) authentication for local access to privileged accounts. Configure the application to only use Alt. Tokens when locally accessing privileged application accounts \\[15\\].  V-222528: The application must use multifactor (e.g., CAC, Alt. Token) authentication for local access to non-privileged accounts. Configure the application to require CAC or Alt. Token authentication for non-privileged network access \\[15\\].  V-222557: The application must accept Personal Identity Verification (PIV) credentials from other federal agencies. Configure the application to accept PIV credentials when utilizing authentication provided by Federal (Non-DoD) agencies \\[15\\].  V-222558: The application must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies. Configure the application to verify the PIV credentials presented when utilizing authentication provided by Federal (Non-DoD) agencies \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Implementing multifactor authentication with PIV or CAC credentials ensures secure access to application resources, supports interoperability with federal agencies, and complies with DoD authentication requirements. This approach mitigates unauthorized access risks and strengthens the application\\'s security posture.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must accept and electronically verify Personal Identity Verification (PIV) credentials, enforce multifactor authentication (MFA) using CAC or Alt. Token for local and network access, and support PIV credentials from other federal agencies."
  },
  {
    "PUID": "SECM-CAT-IAA-100",
    "Requirement description": "The application must enforce server-side authorization controls to prevent bypass of client-side authorization mechanisms, ensuring secure access to protected resources.",
    "Source": "Insecure Authorization Prevention: 2. Assume that all client-side authorization can be bypassed, hence reinforcing server-side authorization controls whenever possible \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Client-side authorization mechanisms are inherently vulnerable to bypass attacks, as malicious actors can manipulate client-side code or data to gain unauthorized access. Enforcing robust server-side authorization ensures that all access requests are validated, mitigating the risks of unauthorized access to sensitive resources or operations.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce server-side authorization controls to prevent bypass of client-side authorization mechanisms, ensuring secure access to protected resources."
  },
  {
    "PUID": "SECM-CAT-IAA-101",
    "Requirement description": "The application must implement a clear separation of permissions for client-side and server-side components, ensuring accurate definition and enforcement of permissions for both invoking and granting applications.",
    "Source": "Client and Server Permission Separation: Ensure that permissions are properly defined for both the client and server sides. Verify that the app invoking the service has the required permissions, and confirm that your app grants the correct permissions to the calling app \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Proper permission separation between client and server components is essential to prevent unauthorized access and ensure that only trusted applications can invoke sensitive services. This minimizes security risks, such as privilege escalation and data exposure, by verifying permissions at both ends of the communication.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement a clear separation of permissions for client-side and server-side components, ensuring accurate definition and enforcement of permissions for both invoking and granting applications."
  },
  {
    "PUID": "SECM-CAT-IAA-102",
    "Requirement description": "The application must enforce all authentication and authorization controls on the server side to ensure security, independent of any client-side enforcement.",
    "Source": "1.3: Verify that security controls are never enforced only on the client side, but on the respective remote endpoints \\[19\\].  2.1. Do not rely on client-side security controls. Application controls can be easily tampered by an adversary. Both authentication and authorization controls should be implemented on the server side \\[16\\].  Insecure Authorization Prevention: 1. Backend systems should independently verify the roles and permissions of the authenticated user. Do not rely on any roles or permission information that comes from the mobile device \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Client-side security controls can be tampered with by attackers, leading to unauthorized access and exploitation of application resources. Enforcing authentication and authorization on the server side ensures a robust and independent layer of protection that cannot be easily bypassed.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce all authentication and authorization controls on the server side to ensure security, independent of any client-side enforcement."
  },
  {
    "PUID": "SECM-CAT-IAA-103",
    "Requirement description": "The backend platform must operate with a hardened configuration and apply the latest security patches to the operating system, web server, and other application components to ensure flaw remediation and maintain a secure environment.",
    "Source": "5.4. Ensure that the back-end platform (server) is running with a hardened configuration with the latest security patches applied to the OS, web server and other application components \\[16\\].  SI-2 FLAW REMEDIATION  Control:  a\\. Identify, report, and correct system flaws;  b\\. Test software and firmware updates related to flaw remediation for effectiveness and potential side effects before installation;  c\\. Install security-relevant software and firmware updates within \\[Assignment: organization-defined time period\\] of the release of the updates; and  d\\. Incorporate flaw remediation into the organizational configuration management process.  Discussion: The need to remediate system flaws applies to all types of software and firmware. Organizations identify systems affected by software flaws, including potential vulnerabilities resulting from those flaws, and report this information to designated organizational personnel with information security and privacy responsibilities. Security-relevant updates include patches, service packs, and malicious code signatures. Organizations also address flaws discovered during assessments, continuous monitoring, incident response activities, and system error handling. By incorporating flaw remediation into configuration management processes, required remediation actions can be tracked and verified \\[11\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring the backend platform is secure and up to date minimizes vulnerabilities that can be exploited by attackers. Applying the latest patches and maintaining a hardened configuration mitigates risks arising from unpatched flaws and improves the overall security posture of the application.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The backend platform must operate with a hardened configuration and apply the latest security patches to the operating system, web server, and other application components to ensure flaw remediation and maintain a secure environment."
  },
  {
    "PUID": "SECM-CAT-IAA-104",
    "Requirement description": "The application must securely manage user sessions after initial authentication by implementing randomly generated session tokens, enforcing proper session timeouts, and securely storing session data on both client and server sides.",
    "Source": "2.6. Ensure that the session management is handled securely after the initial authentication, using appropriate secure protocols \\[16\\].  Apply Secure Session Management: 1. Implement secure session management techniques, such as using randomly generated session tokens, setting proper session timeouts, and securely storing session data on the client and server sides \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Secure session management is critical to maintaining the integrity and confidentiality of user interactions with the application. Proper handling of session tokens and timeouts prevents unauthorized access, session hijacking, and other potential threats.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must securely manage user sessions after initial authentication by implementing randomly generated session tokens, enforcing proper session timeouts, and securely storing session data on both client and server sides."
  },
  {
    "PUID": "SECM-CAT-IAA-105",
    "Requirement description": "The application must notify users of all login activities associated with their accounts and provide a view of devices accessing the account, with the capability to block specific devices.",
    "Source": "4.10: Verify that the app informs the user of all login activities with his or her account. Users are able view a list of devices used to access the account, and to block specific devices \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Enabling users to monitor account activity and control access improves security by helping users detect unauthorized logins and revoke access to suspicious devices.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must notify users of all login activities associated with their accounts and provide a view of devices accessing the account, with the capability to block specific devices."
  },
  {
    "PUID": "SECM-CAT-IAA-106",
    "Requirement description": "The application must display the time and date of the last successful logon and details of any unsuccessful logon attempts since the last successful logon to improve user awareness and account security.",
    "Source": "V-222437: The application must display the time and date of the users last successful logon. Design and configure the application to display the date and time when the user was last successfully granted access to the application \\[15\\].  AC-9 PREVIOUS LOGON NOTIFICATION  Control: Notify the user, upon successful logon to the system, of the date and time of the last logon \\[11\\].  9.4.2 Secure log-on procedures: h) display the following information on completion of a successful log-on:  1\\) date and time of the previous successful log-on;  2\\) details of any unsuccessful log-on attempts since the last successful log-on; \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Displaying the last successful logon date and time along with unsuccessful attempts informs users of potential unauthorized access attempts, enabling immediate reporting or corrective action.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must display the time and date of the last successful logon and details of any unsuccessful logon attempts since the last successful logon to improve user awareness and account security."
  },
  {
    "PUID": "SECM-CAT-IAA-107",
    "Requirement description": "Remote endpoints must verify that connecting clients are using the current version of the mobile application to ensure compatibility and security.",
    "Source": "1.12: Verify that remote endoints ensure that connecting clients use the current version of the mobile app \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing the use of the latest mobile app version at remote endpoints mitigates risks associated with outdated app versions, such as known vulnerabilities, compatibility issues, and lack of updated security features.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Remote endpoints must verify that connecting clients are using the current version of the mobile application to ensure compatibility and security."
  },
  {
    "PUID": "SECM-CAT-IAA-108",
    "Requirement description": "The application must utilize mutual authentication when endpoint device non-repudiation protections are required by DoD policy or by the data owner.",
    "Source": "1.12: Verify that remote endoints ensure that connecting clients use the current version of the mobile app \\[19\\].  5\\) Mutual Authentication: In the design of epidemic situation applications, mutual authentication is the primary and principal safety feature, which ensures that both units (Fog device, IoT device, Cloud center, etc.) in a session of communication can mutually authenticate each other. Thus, the identity theft attacks to specific equipment can be prevented \\[31\\].",
    "Priority": "Not described",
    "Rationale": "Mutual authentication ensures that both the client and server verify each other\\'s identities, which is critical for protecting sensitive data and ensuring that endpoint devices cannot deny their involvement in secure transactions. This is essential when non-repudiation protections are mandated by policy or the data owner.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-109",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must utilize mutual authentication when endpoint device non-repudiation protections are required by DoD policy or by the data owner."
  },
  {
    "PUID": "SECM-CAT-IAA-109",
    "Requirement description": "The application must authenticate all network-connected endpoint devices and perform acceptable user authentication, such as username/password, before establishing connections with a remote service.",
    "Source": "4.1: Verify that if the app provides users with access to a remote service, an acceptable form of authentication such as username/password authentication is performed at the remote endpoint \\[19\\].  V-222533: The application must authenticate all network connected endpoint devices before establishing any connection. Configure the application to authenticate all network connected endpoint devices/service consumers before establishing connections \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Authenticating all endpoint devices and users ensures the integrity and security of network connections by preventing unauthorized access to remote services. This is critical for safeguarding sensitive information and maintaining secure communication channels.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-108",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must authenticate all network-connected endpoint devices and perform acceptable user authentication, such as username/password, before establishing connections with a remote service."
  },
  {
    "PUID": "SECM-CAT-IAA-110",
    "Requirement description": "The application must ensure that the remote endpoint uses randomly generated access tokens to authenticate client requests, avoiding the transmission of user credentials.",
    "Source": "4.2: Verify that the remote endpoint uses randomly generated access tokens to authenticate client requests without sending the user\\'s credentials \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Using randomly generated access tokens for client request authentication reduces the risk of exposing user credentials during communication, ensuring enhanced security and mitigating potential threats like credential interception or reuse attacks.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that the remote endpoint uses randomly generated access tokens to authenticate client requests, avoiding the transmission of user credentials."
  },
  {
    "PUID": "SECM-CAT-IAA-111",
    "Requirement description": "The application must ensure that the remote endpoint terminates any existing session when the user logs out.",
    "Source": "4.3: Verify that the remote endpoint terminates the existing session when the user logs out \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Terminating existing sessions upon user logout is essential to prevent unauthorized access and ensure that previously established sessions cannot be exploited by attackers. This practice strengthens the overall security of user accounts.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that the remote endpoint terminates any existing session when the user logs out."
  },
  {
    "PUID": "SECM-CAT-IAA-112",
    "Requirement description": "The application must clear temporary storage and cookies upon session termination to prevent unauthorized access to sensitive data after the user logs out.",
    "Source": "V-222388: The application must clear temporary storage and cookies when the session is terminated. Design and configure the application to clear sensitive data from cookies and local storage when the user logs out of the application \\[15\\].  The app should not store Cookies \\[25\\].",
    "Priority": "Not described",
    "Rationale": "Clearing temporary storage and cookies upon session termination ensures that sensitive user data is not retained in the application, mitigating the risk of unauthorized access due to data residue or session hijacking.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must clear temporary storage and cookies upon session termination to prevent unauthorized access to sensitive data after the user logs out."
  },
  {
    "PUID": "SECM-CAT-IAA-113",
    "Requirement description": "The application must automatically terminate inactive sessions after a predetermined period of inactivity to prevent unauthorized access, particularly in high-risk locations or when handling sensitive data.",
    "Source": "§ 164.312 Technical safeguards.  \\(a\\)  \\(2\\) Implementation specifications:  \\(ii\\) Automatic logoff (Addressable):  Implement electronic procedures that terminate an electronic session after a predetermined time of inactivity \\[9\\].  Control Enhancements:  \\(5\\) ACCOUNT MANAGEMENT \\| INACTIVITY LOGOUT  Require that users log out when \\[Assignment: organization-defined time period of expected inactivity or description of when to log out\\].  Discussion: Inactivity logout is behavior- or policy-based and requires users to take physical action to log out when they are expecting inactivity longer than the defined period. Automatic enforcement of inactivity logout is addressed by AC-11 \\[11\\].  4.7: Verify that sessions are terminated at the remote endpoint after a predefined period of inactivity \\[19\\].  SC-10 NETWORK DISCONNECT  Control: Terminate the network connection associated with a communications session at the end of the session or after \\[Assignment: organization-defined time period\\] of inactivity.  Discussion: Network disconnect applies to internal and external networks. Terminating network connections associated with specific communications sessions includes de-allocating TCP/IP address or port pairs at the operating system level and de-allocating the networking assignments at the application level if multiple application sessions are using a single operating system-level network connection. Periods of inactivity may be established by organizations and include time periods by type of network access or for specific network accesses \\[11\\].  9.4.2 Secure log-on procedures: k) terminate inactive sessions after a defined period of inactivity, especially in high-risk locations such as public or external areas outside the organization\\'s security management or on mobile devices; \\[7\\]  Session timeout after 30 min maximum in the case of connection to a server \\[25\\].  Security Requirement 71 -- Restricting Access to Unattended Workstations: All PoS systems connected to the EHRi must protect unattended workstations against an unauthorized person using the workstation while the PoS is active, such as with an automatic timeout after a period of inactivity. First, the best approach is to place workstations in a physically secure area in the first place. (está relacionado con cerrar sesión cuando hay inactividad en la app)  Consideration MC21 -- Establish and Enforce Session Timeouts: When designing or acquiring mobile applications intended to access or store PHI, organizations should ensure that the application has the ability to enforce a mandatory session timeout when left unattended \\[10\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing session timeouts ensures that unattended sessions are automatically terminated, reducing the risk of unauthorized access and maintaining compliance with security standards for sensitive systems and environments.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must automatically terminate inactive sessions after a predetermined period of inactivity to prevent unauthorized access, particularly in high-risk locations or when handling sensitive data."
  },
  {
    "PUID": "SECM-CAT-IAA-114",
    "Requirement description": "The application must provide all users with the capability to manually terminate their communication session to ensure user-initiated logoff functionality.",
    "Source": "V-222391: Applications requiring user access authentication must provide a logoff capability for user-initiated communication session. Design and configure the application to provide all users with the capability to manually terminate their application session \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Providing users with a manual session termination capability ensures greater control over session security, reduces the risk of unauthorized access, and complies with security best practices for sensitive applications.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must provide all users with the capability to manually terminate their communication session to ensure user-initiated logoff functionality."
  },
  {
    "PUID": "SECM-CAT-IAA-115",
    "Requirement description": "The mobile application has a feature so that at the end of the session the respective confirmation is presented through an informative message.",
    "Source": "V-222392: The application must display an explicit logoff message to users indicating the reliable termination of authenticated communications sessions. Design and configure the application to provide an explicit logoff message to users indicating a successful logoff has occurred upon user session termination \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Displaying an explicit logoff message ensures users are clearly informed of session termination, enhancing transparency and providing reassurance that the session has ended securely.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application has a feature so that at the end of the session the respective confirmation is presented through an informative message."
  },
  {
    "PUID": "SECM-CAT-IAA-116",
    "Requirement description": "The application must enforce two-factor authentication (2FA) for access to personal health information and ensure it is consistently implemented for sensitive operations.",
    "Source": "9.4.1 Information access restriction: Health information systems processing personal health information shall authenticate users and should do so by means of authentication involving at least two factors \\[7\\].  Access to information and application system functions related to the processing personal health information should be isolated from (and separate to) access to information processing infrastructure that is unrelated to the processing of personal health information.  4.8: Verify that a second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced \\[19\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Two-factor authentication (2FA) adds an extra layer of security, reducing the risk of unauthorized access to personal health information and ensuring sensitive operations are protected.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IAA-117",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce two-factor authentication (2FA) for access to personal health information and ensure it is consistently implemented for sensitive operations."
  },
  {
    "PUID": "SECM-CAT-IAA-117",
    "Requirement description": "The application must ensure that the remote endpoint implements an exponential back-off mechanism or temporarily locks the user account after a predefined number of incorrect authentication attempts to mitigate brute-force attacks.",
    "Source": "4.5: Verify that the remote endpoint implements an exponential back-off, or temporarily locks the user account, when incorrect authentication credentials are submitted an excessive number of times \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Implementing account lockout mechanisms or exponential back-off reduces the likelihood of successful brute-force attacks by introducing delays or temporarily disabling access for repeated failed attempts.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IAA-116",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that the remote endpoint implements an exponential back-off mechanism or temporarily locks the user account after a predefined number of incorrect authentication attempts to mitigate brute-force attacks."
  },
  {
    "PUID": "SECM-CAT-IAA-118",
    "Requirement description": "The application must enforce a minimum device-access-security policy, ensuring the device is secured with a passcode or equivalent protection method.",
    "Source": "2.11: Verify that the app enforces a minimum device-access-security policy, such as requiring the user to set a device passcode \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Requiring a device passcode enhances security by ensuring only authorized users can access the device and its sensitive applications, reducing risks associated with unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce a minimum device-access-security policy, ensuring the device is secured with a passcode or equivalent protection method."
  },
  {
    "PUID": "SECM-CAT-IAA-119",
    "Requirement description": "The application must verify the X.509 certificate of the remote endpoint during secure channel establishment, ensuring only certificates signed by a valid Certificate Authority (CA) are accepted, and fail securely if validation fails.",
    "Source": "5.3: Verify that the app verifies the X.509 certificate of the remote endpoint when the secure channel is established. Only certificates signed by a valid CA are accepted \\[19\\].  iOS Specific Best Practices: Ensure that certificates are valid and fail closed \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Verifying the validity of X.509 certificates signed by a trusted CA prevents man-in-the-middle attacks and ensures secure communication with remote endpoints. Failing securely upon validation failure ensures that no insecure connections are established.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must verify the X.509 certificate of the remote endpoint during secure channel establishment, ensuring only certificates signed by a valid Certificate Authority (CA) are accepted, and fail securely if validation fails."
  },
  {
    "PUID": "SECM-CAT-IAA-120",
    "Requirement description": "The application must enhance the security of API communications by replacing static API keys with OAuth 2.0 or other token-based mechanisms, and secure sensitive operations with additional authentication layers.",
    "Source": "Protect API Key Communication: Use OAuth 2.0 or other token-based mechanisms instead of static API keys when possible to enhance security \\[18\\].  MASVS-AUTH-1: The app uses secure authentication and authorization protocols and follows the relevant best practices: Most apps connecting to a remote endpoint require user authentication and also enforce some kind of authorization. While the enforcement of these mechanisms must be on the remote endpoint, the apps also have to ensure that it follows all the relevant best practices to ensure a secure use of the involved protocols \\[20\\].  MASVS-AUTH-3: The app secures sensitive operations with additional authentication: Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely \\[20\\].",
    "Priority": "Not described",
    "Rationale": "Static API keys are susceptible to theft and misuse, leading to potential unauthorized access. Token-based mechanisms such as OAuth 2.0 ensure better control and security. Additional authentication for sensitive operations mitigates the risk of unauthorized access.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enhance the security of API communications by replacing static API keys with OAuth 2.0 or other token-based mechanisms, and secure sensitive operations with additional authentication layers."
  },
  {
    "PUID": "SECM-CAT-IAA-121",
    "Requirement description": "The application must implement the OAuth 2.0 authorization framework for API access, restricting API key usage to specific clients, defining minimum access scopes, and enforcing secure authentication protocols.",
    "Source": "OAuth 2.0 Authorization Framework: Where applicable, use OAuth 2.0 to authorize API access, restricting API key usage to specific clients and defining the minimum access scope for each API key. Ensure that each key only provides access necessary for its specific use case \\[18\\].  MASVS-AUTH-1: The app uses secure authentication and authorization protocols and follows the relevant best practices: Most apps connecting to a remote endpoint require user authentication and also enforce some kind of authorization. While the enforcement of these mechanisms must be on the remote endpoint, the apps also have to ensure that it follows all the relevant best practices to ensure a secure use of the involved protocols \\[20\\]  8.5 Secure Authentication  Control: Secure authentication technologies and procedures should be implemented based on information access restrictions and the topic-specific policy on access control.  Purpose: To ensure a user or an entity is securely authenticated, when access to systems, applications and services is granted.  Guidance: A suitable authentication technique should be chosen to substantiate the claimed identity of a user, software, messages and other entities \\[6\\].",
    "Priority": "Not described",
    "Rationale": "Using OAuth 2.0 for API access ensures secure and fine-grained control over API usage while minimizing exposure to unauthorized access. Limiting API key scope reduces the risk of data breaches.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement the OAuth 2.0 authorization framework for API access, restricting API key usage to specific clients, defining minimum access scopes, and enforcing secure authentication protocols."
  },
  {
    "PUID": "SECM-CAT-IAA-122",
    "Requirement description": "The application must generate unique API keys for each application instance to ensure efficient identification and isolation of compromised or unauthorized access.",
    "Source": "Protect Unique API Key per Application: Generate unique API keys for each application to ensure the ability to identify and isolate compromised or unauthorized access efficiently \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Using unique API keys per application instance enhances the ability to identify and mitigate security breaches by isolating compromised keys without affecting other instances.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must generate unique API keys for each application instance to ensure efficient identification and isolation of compromised or unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IAA-123",
    "Requirement description": "The application must enforce IP-based and service-level restrictions on API key usage, associating keys with specific mobile applications, certificates, or platforms to prevent unauthorized access and misuse.",
    "Source": "Protect IP Restrictions for API Keys: Where applicable, restrict API key usage to specific IP addresses or ranges to limit unauthorized access from unknown locations \\[18\\].  Mobile App Key Usage Limitation: Limit API key usage to specific mobile apps by associating keys with app certificates or bundling them within the app\\'s metadata \\[18\\].  Service-Level Key Restriction: Ensure the service allows restricting API keys to a particular package or platform (e.g., limit key access by package name and signing key, as with Google Maps API) \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Restricting API key usage to defined IP addresses, app certificates, or specific platforms minimizes the risk of unauthorized or malicious access and ensures that API keys are used only by approved applications or services.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce IP-based and service-level restrictions on API key usage, associating keys with specific mobile applications, certificates, or platforms to prevent unauthorized access and misuse."
  },
  {
    "PUID": "SECM-CAT-IAA-124",
    "Requirement description": "The application must prevent the exposure of sensitive information, such as usernames or personal data, in error messages or logs, ensuring that error responses are generic and do not reveal the existence of registered accounts.",
    "Source": "2.4. Do not reveal registered usernames and remove any fingerprint of their existence from verbose error messages \\[16\\].  10.3. Do not reveal sensitive information such as usernames, personal data and others through error messages \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Restricting API key usage to defined IP addresses, app certificates, or specific platforms minimizes the risk of unauthorized or malicious access and ensures that API keys are used only by approved applications or services.",
    "Number of Children": "0",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent the exposure of sensitive information, such as usernames or personal data, in error messages or logs, ensuring that error responses are generic and do not reveal the existence of registered accounts."
  },
  {
    "PUID": "SECM-CAT-IOV-001",
    "Requirement description": "The application must implement comprehensive input validation mechanisms to safeguard against vulnerabilities and insecure deserialization. All input from external sources, including files, network communications, and inter-process communications, must be validated and sanitized using platform-level security features provided by Android.",
    "Source": "General Input Validation: The application must implement robust input validation for all data received from external sources, including files, network communications, and inter-process communication (IPC). The application must utilize platform-level security features provided by Android to minimize input validation issues whenever possible \\[18\\].  V-222609: The application must not be subject to input handling vulnerabilities. Follow best practice when accepting user input and verify that all input is validated before the application processes the input. Remediate identified vulnerabilities and obtain documented risk acceptance for those issues that cannot be remediated immediately \\[15\\].  SI-10 INFORMATION INPUT VALIDATION  Control: Check the validity of the following information inputs: \\[Assignment: organization-defined information inputs to the system\\] \\[11\\].  Input Validation: 1. Validate and sanitize user input using strict validation techniques \\[3\\].  Security Requirement 76 -- Validating Input Data: The EHRi and all PoS systems connected to the EHRi must include, wherever feasible, measures to safeguard against user error by validating data input to ensure that it is correct and appropriate. The following controls should be considered:  a\\) Input checks to detect the following errors:  i\\. out-of-range values;  ii\\. invalid characters in data fields;  iii\\. missing or incomplete data;  iv\\. exceeding upper and lower data volume limits;  v\\. unauthorized or inconsistent control data.  b\\) Procedures for responding to validation errors \\[10\\].  MASVS-CODE-4: The app validates and sanitizes all untrusted inputs: Apps have many data entry points including the UI, IPC, the network, the file system, etc. This incoming data might have been inadvertently modified by untrusted actors and may lead to bypass of critical security checks as well as classical injection attacks such as SQL injection, XSS or insecure deserialization. This control ensures that this data is treated as untrusted input and is properly verified and sanitized before it's used \\[20\\]  V-222602: The application must protect from Cross-Site Scripting (XSS) vulnerabilities. Verify user input is validated and encode or escape user input to prevent embedded script code from executing. Develop your application using a web template system or a web application development framework that provides auto escaping features rather than building your own escape logic \\[15\\].  Validate Input and Sanitize Data: 1. Implement input validation and data sanitization techniques to prevent injection attacks and ensure that only valid and expected data is stored. Validate user inputs to mitigate the risk of malicious code injection or unintended data leakage \\[3\\].  CWE-20 Improper Input Validation: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly \\[35\\].",
    "Priority": "Hight",
    "Rationale": "Proper input validation prevents exploitation of vulnerabilities arising from malformed or malicious data, ensuring application integrity, data confidentiality, and compliance with security best practices.",
    "Number of Children": "6",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-009, SECM-CAT-IOV-010, SECM-CAT-IOV-015, SECM-CAT-IOV-016, SECM-CAT-IOV-017, SECM-CAT-IOV-026",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "98",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement comprehensive input validation mechanisms to safeguard against vulnerabilities and insecure deserialization. All input from external sources, including files, network communications, and inter-process communications, must be validated and sanitized using platform-level security features provided by Android."
  },
  {
    "PUID": "SECM-CAT-IOV-002",
    "Requirement description": "The application must ensure that error messages are generic and do not disclose system details or sensitive data to users. Error messages must only provide information necessary for corrective actions while safeguarding against exploitation by adversaries.",
    "Source": "V-222610: The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries. Configure the server to not send error messages containing system information or sensitive data to users. Use generic error messages \\[15\\].",
    "Priority": "Hight",
    "Rationale": "Restricting the information in error messages reduces the risk of exposing system vulnerabilities or sensitive data, minimizing the likelihood of exploitation by attackers.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-003",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that error messages are generic and do not disclose system details or sensitive data to users. Error messages must only provide information necessary for corrective actions while safeguarding against exploitation by adversaries."
  },
  {
    "PUID": "SECM-CAT-IOV-003",
    "Requirement description": "The application must restrict detailed error messages containing system information or sensitive data to privileged users such as the ISSO, ISSM, or SA. For non-privileged users, error messages must be generic, providing minimal information to avoid exposing system vulnerabilities.",
    "Source": "V-222611: The application must reveal error messages only to the ISSO, ISSM, or SA. Configure the server to only send error messages containing system information or sensitive data to privileged users. Use generic error messages for non-privileged users.",
    "Priority": "Not defined",
    "Rationale": "Restricting access to detailed error messages mitigates the risk of exposing system vulnerabilities or sensitive data to unauthorized users, reducing the attack surface for potential adversaries.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must restrict detailed error messages containing system information or sensitive data to privileged users such as the ISSO, ISSM, or SA. For non-privileged users, error messages must be generic, providing minimal information to avoid exposing system vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-IOV-004",
    "Requirement description": "The application must prevent the population of WebViews loaded from the file URI scheme with user-supplied DOM input to avoid potential security vulnerabilities, such as injection attacks.",
    "Source": "12.16. Avoid populating webviews loaded from the file URI scheme with user supplied DOM input \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "WebViews loaded from file URIs are prone to security risks if populated with user-supplied DOM input. This vulnerability can be exploited to execute malicious scripts, compromise user data, or bypass application security.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent the population of WebViews loaded from the file URI scheme with user-supplied DOM input to avoid potential security vulnerabilities, such as injection attacks."
  },
  {
    "PUID": "SECM-CAT-IOV-005",
    "Requirement description": "The application must implement policies and procedures to ensure the confidentiality, integrity, and availability of electronic protected health information (ePHI). This includes validating output data to ensure consistency with expected content and preventing unauthorized alterations or destruction of data.",
    "Source": "Not described",
    "Priority": "Not defined",
    "Rationale": "Protecting the integrity of ePHI ensures compliance with legal and regulatory standards, such as HIPAA. It minimizes the risks of data corruption, unauthorized access, and potential harm to individuals relying on accurate health information.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-007, SECM-CAT-IOV-008",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement policies and procedures to ensure the confidentiality, integrity, and availability of electronic protected health information (ePHI). This includes validating output data to ensure consistency with expected content and preventing unauthorized alterations or destruction of data."
  },
  {
    "PUID": "SECM-CAT-IOV-006",
    "Requirement description": "The application must not disclose unnecessary information, such as technical details of its architecture, during error events to prevent attackers from exploiting sensitive information.",
    "Source": "V-222600: The application must not disclose unnecessary information to users. Configure the application to not display technical details about the application architecture on error events \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Restricting unnecessary disclosure of technical information prevents attackers from gaining insights into the application\\'s architecture, reducing the risk of targeted exploitation or malicious activity.",
    "Number of Children": "0",
    "Number of Parents": "2",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-002, SECM-CAT-IOV-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must not disclose unnecessary information, such as technical details of its architecture, during error events to prevent attackers from exploiting sensitive information."
  },
  {
    "PUID": "SECM-CAT-IOV-007",
    "Requirement description": "The system must enforce strict control over the data format during information exchange between applications to ensure data integrity, prevent inconsistencies, and safeguard against potential vulnerabilities.",
    "Source": "Data Format Control: The system must enforce control over the data format when sharing information between applications to maintain data integrity and consistency \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Enforcing data format control ensures that information exchanged between applications is processed correctly and securely, reducing the risk of data corruption, misinterpretation, or exploitation.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must enforce strict control over the data format during information exchange between applications to ensure data integrity, prevent inconsistencies, and safeguard against potential vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-IOV-008",
    "Requirement description": "The mobile application must validate the information output from designated software programs and/or applications to ensure it aligns with expected content, preventing extraneous or malicious data from being displayed or transmitted.",
    "Source": "SRG-APP-000449-MAPP-000100: The mobile app must validate information output from software programs and/or applications defined in SI-15, CCI-0002770 to ensure the information is consistent with the expected content \\[17\\].",
    "Priority": "Not defined",
    "Rationale": "Validating output data ensures that anomalies, potentially stemming from attacks such as SQL injections or unauthorized data manipulations, are detected and mitigated, preserving system integrity and user trust.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must validate the information output from designated software programs and/or applications to ensure it aligns with expected content, preventing extraneous or malicious data from being displayed or transmitted."
  },
  {
    "PUID": "SECM-CAT-IOV-009",
    "Requirement description": "The application must implement strict validation and sanitization of all user-supplied URLs or similar requests to prevent Server-Side Request Forgery (SSRF) attacks, ensuring that requests are only sent to trusted and expected destinations.",
    "Source": "CWE-918: Server-Side Request Forgery (SSRF)  The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests. It can cause XSPA:Cross Site Port Attack \\[35\\]",
    "Priority": "Not defined",
    "Rationale": "Preventing SSRF attacks protects the server from being exploited as a proxy to bypass access controls, conduct internal port scans, or perform other unauthorized actions, maintaining the integrity and security of the application and underlying systems.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement strict validation and sanitization of all user-supplied URLs or similar requests to prevent Server-Side Request Forgery (SSRF) attacks, ensuring that requests are only sent to trusted and expected destinations."
  },
  {
    "PUID": "SECM-CAT-IOV-010",
    "Requirement description": "The application must prevent canonical representation vulnerabilities by choosing a suitable canonical form and ensuring all user input is canonicalized before performing any authorization or security checks. Security validations must occur after decoding is completed, and the encoding method used must be verified as valid for its intended representation.",
    "Source": "V-222605: The application must protect from canonical representation vulnerabilities. A suitable canonical form should be chosen and all user input canonicalized into that form before any authorization decisions are performed. Security checks should be carried out after decoding is completed. Moreover, it is recommended to check that the encoding method chosen is a valid canonical encoding for the symbol it represents \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Canonicalization ensures consistency in input validation, preventing attackers from exploiting ambiguities in encoding to bypass security checks or perform unauthorized actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-011",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent canonical representation vulnerabilities by choosing a suitable canonical form and ensuring all user input is canonicalized before performing any authorization or security checks. Security validations must occur after decoding is completed, and the encoding method used must be verified as valid for its intended representation."
  },
  {
    "PUID": "SECM-CAT-IOV-011",
    "Requirement description": "The application must implement robust output sanitization measures to prevent cross-site scripting (XSS) attacks, ensuring all dynamic content displayed in WebViews, forms, or user interfaces is sanitized. This includes safeguarding against reflected, stored, and DOM-based XSS vulnerabilities by neutralizing untrusted input before it is used in dynamically generated content.",
    "Source": "Output Sanitization: 1. Properly sanitize output data to prevent cross-site scripting (XSS) attacks \\[3\\].  Avoid Cross-Site Script Attacks (HTML modifications through malware) \\[25\\].  CWE-79 Improper Neutralization of Input During Web Page Generation (\\'Cross-site Scripting\\')  The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. It is related with XSS.  Cross-site scripting (XSS) vulnerabilities occur when:  1.  Untrusted data enters a web application, typically from a web request.  2.  The web application dynamically generates a web page that contains this untrusted data.  3.  During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.  4.  A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.  5.  Since the script comes from a web page that was sent by the web server, the victim\\'s web browser executes the malicious script in the context of the web server\\'s domain.  6.  This effectively violates the intention of the web browser\\'s same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.  There are three main kinds of XSS:  Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker\\'s content back to the victim, the content is executed by the victim\\'s browser.  Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker\\'s perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.  Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible \\[35\\].",
    "Priority": "Not defined",
    "Rationale": "Canonicalization ensures consistency in input validation, preventing attackers from exploiting ambiguities in encoding to bypass security checks or perform unauthorized actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-012",
    "Parent PUIDs": "SECM-CAT-IOV-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust output sanitization measures to prevent cross-site scripting (XSS) attacks, ensuring all dynamic content displayed in WebViews, forms, or user interfaces is sanitized. This includes safeguarding against reflected, stored, and DOM-based XSS vulnerabilities by neutralizing untrusted input before it is used in dynamically generated content."
  },
  {
    "PUID": "SECM-CAT-IOV-012",
    "Requirement description": "The application must implement output encoding techniques to sanitize data before displaying it in user interfaces or transmitting it over communication channels. This ensures that special characters are rendered safely, preventing unintended behavior or security vulnerabilities such as cross-site scripting (XSS).",
    "Source": "Output Sanitization: 1. Properly sanitize output data to prevent cross-site scripting (XSS) attacks \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Proper output encoding prevents malicious scripts or unauthorized code execution in dynamically generated content, protecting sensitive health data and ensuring application security.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement output encoding techniques to sanitize data before displaying it in user interfaces or transmitting it over communication channels. This ensures that special characters are rendered safely, preventing unintended behavior or security vulnerabilities such as cross-site scripting (XSS)."
  },
  {
    "PUID": "SECM-CAT-IOV-013",
    "Requirement description": "The mobile healthcare application must be designed to prevent vulnerabilities to XML-oriented attacks by ensuring the use of secure and updated XML parsers and libraries, patching components promptly when vulnerabilities are identified, and implementing input validation for XML data.",
    "Source": "V-222608: The application must not be vulnerable to XML-oriented attacks. Design the application to utilize components that are not vulnerable to XML attacks. Patch the application components when vulnerabilities are discovered \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Preventing XML-oriented attacks ensures the confidentiality, integrity, and availability of sensitive healthcare data processed by the application.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-014",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile healthcare application must be designed to prevent vulnerabilities to XML-oriented attacks by ensuring the use of secure and updated XML parsers and libraries, patching components promptly when vulnerabilities are identified, and implementing input validation for XML data."
  },
  {
    "PUID": "SECM-CAT-IOV-014",
    "Requirement description": "The mobile application must mitigate XML-based DoS attacks by implementing robust mechanisms, such as XML filters, parser options, or gateways, to validate recursive payloads, oversized payloads, and prevent XML entity expansion. It must optimize configurations to limit overlong element names and ensure high message throughput while maintaining protection against service disruption.",
    "Source": "V-222593: XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways. Implement:  ```{=html} <!-- --> ``` Validation against recursive payloads  Validation against oversized payloads  Protection against XML entity expansion  Validation against overlong element names  Optimized configuration for maximum message throughput in order to ensure DoS attacks against web services are limited \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Preventing XML-based DoS attacks ensures system availability and protects critical healthcare data in mobile applications.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must mitigate XML-based DoS attacks by implementing robust mechanisms, such as XML filters, parser options, or gateways, to validate recursive payloads, oversized payloads, and prevent XML entity expansion. It must optimize configurations to limit overlong element names and ensure high message throughput while maintaining protection against service disruption."
  },
  {
    "PUID": "SECM-CAT-IOV-015",
    "Requirement description": "The mobile application must perform context-specific validation for all user inputs, particularly in file uploads or database queries, to prevent vulnerabilities such as path traversal and injection attacks. This includes validating and sanitizing file paths to ensure operations remain confined to designated directories.",
    "Source": "Context-Specific Validation: 1. Perform specific validation based on data context (e.g., file uploads, database queries) to prevent attacks like path traversal or injection \\[3\\].  CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\\'Path Transversal\\')  The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.  Many file operations are intended to take place within a restricted directory. By using special elements such as \\\"..\\\" and \\\"/\\\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \\\"../\\\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \\\"/usr/local/bin\\\", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.  In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add \\\".txt\\\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction \\[35\\].",
    "Priority": "Not defined",
    "Rationale": "Ensuring robust input validation protects against unauthorized access to sensitive files or directories, maintaining data integrity and system security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-018",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must perform context-specific validation for all user inputs, particularly in file uploads or database queries, to prevent vulnerabilities such as path traversal and injection attacks. This includes validating and sanitizing file paths to ensure operations remain confined to designated directories."
  },
  {
    "PUID": "SECM-CAT-IOV-016",
    "Requirement description": "The mobile application must validate and sanitize all inputs from external sources and users, including data received through the UI, inter-process communication (IPC) mechanisms such as intents, custom URLs, and network sources, to prevent injection attacks and ensure input integrity.",
    "Source": "6.2: Verify that all inputs from external sources and the user are validated and if necessary sanitized. This includes data received via the UI, IPC mechanisms such as intents, custom URLs, and network sources \\[19\\].  Validate and sanitize user input: Validate and sanitize user input to prevent injection attacks that could expose API keys \\[18\\].  MASVS-CODE-4: The app validates and sanitizes all untrusted inputs: Apps have many data entry points including the UI, IPC, the network, the file system, etc. This incoming data might have been inadvertently modified by untrusted actors and may lead to bypass of critical security checks as well as classical injection attacks such as SQL injection, XSS or insecure deserialization. This control ensures that this data is treated as untrusted input and is properly verified and sanitized before it's used \\[20\\]",
    "Priority": "Not defined",
    "Rationale": "Unvalidated inputs can be exploited by attackers to bypass security controls, leading to data leaks, injection attacks, or system compromise. Proper input sanitization ensures robust protection against these threats.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-017",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must validate and sanitize all inputs from external sources and users, including data received through the UI, inter-process communication (IPC) mechanisms such as intents, custom URLs, and network sources, to prevent injection attacks and ensure input integrity."
  },
  {
    "PUID": "SECM-CAT-IOV-017",
    "Requirement description": "The mobile application must perform rigorous input validation for all data retrieved from external storage, treating it as untrusted input to prevent unauthorized access, data corruption, or injection attacks.",
    "Source": "Input validation: Perform input validation when handling data from external storage as you would with data from any untrusted source \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "External storage is prone to tampering and may expose the application to risks such as injection attacks, data corruption, or unauthorized access. Validating input ensures that only safe and expected data is processed.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-018",
    "Parent PUIDs": "SECM-CAT-IOV-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must perform rigorous input validation for all data retrieved from external storage, treating it as untrusted input to prevent unauthorized access, data corruption, or injection attacks."
  },
  {
    "PUID": "SECM-CAT-IOV-018",
    "Requirement description": "The mobile application must restrict access to device storage by implementing a whitelist of allowed file paths when arbitrary file selection is permitted, ensuring that only intended files are accessible. Additionally, comprehensive escape syntax must be applied to mitigate injection risks during file path handling.",
    "Source": "1.30. If the application allows the arbitrary selection of files from the device storage, consider the use of a white-list to restrict access only to the intended (absolute) file paths \\[16\\].  10.2. Define comprehensive escape syntax as appropriate \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Allowing arbitrary file access poses significant security risks, including unauthorized data exposure and path traversal attacks. A whitelist ensures that only predefined, secure file paths are accessed. Escape syntax helps mitigate injection risks in file path manipulation.",
    "Number of Children": "0",
    "Number of Parents": "2",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-015, SECM-CAT-IOV-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must restrict access to device storage by implementing a whitelist of allowed file paths when arbitrary file selection is permitted, ensuring that only intended files are accessible. Additionally, comprehensive escape syntax must be applied to mitigate injection risks during file path handling."
  },
  {
    "PUID": "SECM-CAT-IOV-019",
    "Requirement description": "The application must enforce strict input size limitations to prevent excessive or malicious data from being passed to interpreters, ensuring data is within acceptable length parameters.",
    "Source": "10.6. Limit size of input data passed to interpreters \\[16\\].  Input Validation: 2. Implement input length restrictions and reject unexpected or malicious data \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Limiting input size helps mitigate risks such as buffer overflows, denial-of-service attacks, and potential exploitation through excessive data processing.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce strict input size limitations to prevent excessive or malicious data from being passed to interpreters, ensuring data is within acceptable length parameters."
  },
  {
    "PUID": "SECM-CAT-IOV-020",
    "Requirement description": "The application must implement robust data format verification for all file path inputs, avoiding reliance on character blocking or replacement mechanisms, to ensure only valid and intended paths are processed.",
    "Source": "Data Format Verification: The application should avoid relying solely on blocking specific characters or performing character replacements, as these methods can introduce errors and vulnerabilities \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Ensuring proper data format verification reduces the risk of path traversal vulnerabilities and processing errors caused by inadequate input validation techniques.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust data format verification for all file path inputs, avoiding reliance on character blocking or replacement mechanisms, to ensure only valid and intended paths are processed."
  },
  {
    "PUID": "SECM-CAT-IOV-021",
    "Requirement description": "The application must disable keyboard caching for text inputs that handle sensitive data, such as credentials or personal information, to prevent unintended exposure or unauthorized access.",
    "Source": "2.4: Verify that the keyboard cache is disabled on text inputs that process sensitive data \\[19\\].  Avoid that credentials (personal data) be visible in the cache or in the code \\[25\\].",
    "Priority": "Not defined",
    "Rationale": "Disabling keyboard caching for sensitive input fields mitigates the risk of exposing user credentials or personal data in keyboard prediction caches or memory.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-022",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must disable keyboard caching for text inputs that handle sensitive data, such as credentials or personal information, to prevent unintended exposure or unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IOV-022",
    "Requirement description": "The application must disable auto-correction and auto-suggestion features for input fields that handle sensitive data to prevent unintended disclosure or storage of sensitive information in predictive text systems.",
    "Source": "1.20. Disable Auto Correction and Autosuggestion for inputs that contain sensitive data \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Disabling auto-correction and auto-suggestion for sensitive data fields reduces the risk of exposing private information through predictive text or keyboard cache systems.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-023",
    "Parent PUIDs": "SECM-CAT-IOV-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must disable auto-correction and auto-suggestion features for input fields that handle sensitive data to prevent unintended disclosure or storage of sensitive information in predictive text systems."
  },
  {
    "PUID": "SECM-CAT-IOV-023",
    "Requirement description": "The application must restrict the use of third-party keyboards for input fields that handle sensitive data, such as credentials or payment information, and should use a custom keyboard for secure inputs instead.",
    "Source": "1.19. Do not allow third party keyboards to be used for inputs that may contain sensitive data (e.g., credentials, credit card information). Prefer a custom keyboard for such inputs instead \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Limiting the use of third-party keyboards for sensitive inputs reduces the risk of data leakage or unauthorized access caused by potentially malicious or insecure third-party keyboard apps.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-024",
    "Parent PUIDs": "SECM-CAT-IOV-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must restrict the use of third-party keyboards for input fields that handle sensitive data, such as credentials or payment information, and should use a custom keyboard for secure inputs instead."
  },
  {
    "PUID": "SECM-CAT-IOV-024",
    "Requirement description": "The application must disable clipboard functionalities, including cut, copy, and paste, for text fields containing sensitive data or restrict clipboard access to the application only.",
    "Source": "2.5: Verify that the clipboard is deactivated on text fields that may contain sensitive data \\[19\\].  1.21. Disable cut, copy and paste functionalities for inputs that may contain sensitive data or restrict the pasteboard to be accessible only from this application \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Disabling clipboard access for sensitive inputs prevents unauthorized access, accidental exposure, or malicious interception of sensitive data via clipboard sharing or monitoring.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IOV-025",
    "Parent PUIDs": "SECM-CAT-IOV-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must disable clipboard functionalities, including cut, copy, and paste, for text fields containing sensitive data or restrict clipboard access to the application only."
  },
  {
    "PUID": "SECM-CAT-IOV-025",
    "Requirement description": "The application must implement input field masking for sensitive data, such as passwords and PINs, ensuring that they are not displayed in clear text during entry or stored as plain text.",
    "Source": "1.24. Introduce input field masking for inputs that contain sensitive data (e.g., passwords) \\[16\\].  9.4.2 Secure log-on procedures: i) not display a password being entered \\[7\\];  V-222554: The application must not display passwords/PINs as clear text. Configure the application to obfuscate passwords and PINs when they are being entered so they cannot be read. Design the application so obfuscated passwords cannot be copied and then pasted as clear text \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Masking sensitive input fields prevents shoulder-surfing attacks and accidental exposure of sensitive information during data entry, enhancing user security.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement input field masking for sensitive data, such as passwords and PINs, ensuring that they are not displayed in clear text during entry or stored as plain text."
  },
  {
    "PUID": "SECM-CAT-IOV-026",
    "Requirement description": "The application must validate all input data received through intent filters in intent receivers, ensuring the data conforms to the expected format and preventing unintended manipulation or execution.",
    "Source": "Input Validation in Intent Receivers: Intent filters are not a security mechanism. Always perform input validation within the intent receiver to ensure that the data conforms to the expected format for the intended activity, service, or receiver. This step prevents unintended data manipulation or execution \\[18\\].  MASVS-PLATFORM-1: The app uses IPC mechanisms securely: Apps typically use platform provided IPC mechanisms to intentionally expose data or functionality. Both installed apps and the user are able to interact with the app in many different ways. This control ensures that all interactions involving IPC mechanisms happen securely \\[20\\].",
    "Priority": "Not defined",
    "Rationale": "Relying solely on intent filters for security is insufficient; input validation within intent receivers strengthens the app\\'s defense against malicious or malformed intents.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IOV-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must validate all input data received through intent filters in intent receivers, ensuring the data conforms to the expected format and preventing unintended manipulation or execution."
  },
  {
    "PUID": "SECM-CAT-ICO-001",
    "Requirement description": "The application must avoid reliance on a single insecure communication channel, such as email or SMS, for critical operations like enrollment and account recovery, ensuring multi-factor authentication mechanisms leverage secure channels.",
    "Source": "5.5: Verify that the app doesn\\'t rely on a single insecure communication channel (email or SMS) for critical operations, such as enrollments and account recovery \\[19\\].  2.11. Do only rely on not adequately secure channels for multi factor authentication (phone numbers and voice mails can be hijacked, see Section 4-10) \\[16\\]",
    "Priority": "Not defined",
    "Rationale": "Using insecure channels like SMS or email for sensitive operations increases the risk of interception, hijacking, and unauthorized access, compromising user accounts and sensitive information.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-002, SECM-CAT-ICO-004",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "99",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must avoid reliance on a single insecure communication channel, such as email or SMS, for critical operations like enrollment and account recovery, ensuring multi-factor authentication mechanisms leverage secure channels."
  },
  {
    "PUID": "SECM-CAT-ICO-002",
    "Requirement description": "The application must avoid using SMS, MMS, or notifications to transfer sensitive data, opting instead for secure IP-based protocols such as Firebase Cloud Messaging (FCM) to ensure encrypted and authenticated communication.",
    "Source": "General Best Practices: 11. Do not send sensitive data over alternate channels (e.g, SMS, MMS, or notifications) \\[3\\].  Use of SMS for Data Transfer: The application must not rely on the SMS protocol for transferring sensitive data due to its inherent limitations in encryption and authentication. Firebase Cloud Messaging (FCM) and IP-based networking must be used for sending data messages between the server and the app on user devices \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Using insecure channels like SMS or email for sensitive operations increases the risk of interception, hijacking, and unauthorized access, compromising user accounts and sensitive information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-003",
    "Parent PUIDs": "SECM-CAT-ICO-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must avoid using SMS, MMS, or notifications to transfer sensitive data, opting instead for secure IP-based protocols such as Firebase Cloud Messaging (FCM) to ensure encrypted and authenticated communication."
  },
  {
    "PUID": "SECM-CAT-ICO-003",
    "Requirement description": "The application must apply an additional layer of encryption to sensitive data before transmitting it through the SSL/TLS channel, ensuring confidentiality even in the event of SSL/TLS vulnerabilities.",
    "Source": "General Best Practices: 12. If possible, apply a separate layer of encryption to any sensitive data before it is given to the SSL channel. In the event that future vulnerabilities are discovered in the SSL implementation, the encrypted data will provide a secondary defense against confidentiality violation \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Encrypting sensitive data independently of the transport layer provides a secondary defense mechanism, safeguarding user data against confidentiality violations caused by potential weaknesses in SSL/TLS implementations.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must apply an additional layer of encryption to sensitive data before transmitting it through the SSL/TLS channel, ensuring confidentiality even in the event of SSL/TLS vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-ICO-004",
    "Requirement description": "The application must prioritize secure and authenticated communication methods, such as Firebase Cloud Messaging (FCM) or encrypted IP-based networking protocols, instead of relying on SMS for app-server interactions.",
    "Source": "Alternatives to SMS: For communication between the app and a server, the app must prioritize secure, authenticated methods such as FCM or other encrypted IP networking protocols instead of SMS \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "SMS lacks robust encryption and authentication, making it vulnerable to interception and impersonation. Using secure, IP-based protocols ensures the confidentiality and authenticity of data transmitted between the app and server.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-005, SECM-CAT-ICO-007",
    "Parent PUIDs": "SECM-CAT-ICO-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prioritize secure and authenticated communication methods, such as Firebase Cloud Messaging (FCM) or encrypted IP-based networking protocols, instead of relying on SMS for app-server interactions."
  },
  {
    "PUID": "SECM-CAT-ICO-005",
    "Requirement description": "The application must treat SMS data as originating from untrusted sources and avoid performing sensitive operations based on unauthenticated SMS data. Safeguards against spoofing and interception must be implemented to mitigate risks associated with SMS as an insecure communication method.",
    "Source": "SMS Data Security: The application must assume that any SMS data received can be from an untrusted source and must not perform sensitive operations based on unauthenticated SMS data. SMS should be treated as a potentially insecure communication method, and the app must implement appropriate safeguards against spoofing and interception. \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "SMS lacks sufficient security features, such as encryption and robust authentication, making it vulnerable to spoofing, interception, and manipulation by adversaries. Implementing safeguards ensures the integrity and authenticity of actions triggered by SMS data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-006",
    "Parent PUIDs": "SECM-CAT-ICO-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must treat SMS data as originating from untrusted sources and avoid performing sensitive operations based on unauthenticated SMS data. Safeguards against spoofing and interception must be implemented to mitigate risks associated with SMS as an insecure communication method."
  },
  {
    "PUID": "SECM-CAT-ICO-006",
    "Requirement description": "The application must assume that the network layer is unsecure and susceptible to eavesdropping. Implement end-to-end encryption and other secure communication practices to safeguard sensitive data transmitted over the network.",
    "Source": "General Best Practices: 1. Assume that the network layer is not secure and is susceptible to eavesdropping \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Network communications may be intercepted by malicious actors, leading to unauthorized access or data breaches. End-to-end encryption ensures confidentiality and integrity, even when the network is compromised.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must assume that the network layer is unsecure and susceptible to eavesdropping. Implement end-to-end encryption and other secure communication practices to safeguard sensitive data transmitted over the network."
  },
  {
    "PUID": "SECM-CAT-ICO-007",
    "Requirement description": "The application must restrict the exposure of sensitive information via broadcast intents, especially when handling SMS messages. Broadcast messages must be secured, limited to authorized applications, and sensitive data must not be transmitted using insecure methods such as SMS or MMS.",
    "Source": "Use of Broadcast Intents: Since SMS messages on Android devices are transmitted as broadcast intents, the app must not expose sensitive information through these intents. Any SMS message that the app handles must be secured and must not be broadcast or accessed by other apps unless they have the necessary permissions (e.g., READ_SMS) \\[18\\].  1.18. Restrict broadcast messages (e.g., Android Broadcast Intents) to authorized applications and audit the application's broadcast messages for sensitive content \\[16\\].  12.8. Restrict the third-party applications whose broadcast messages will be accepted by the application \\[16\\]  4.10. SMS and MMS should not be used to send sensitive data (e.g., two-factor authentication tokens) to or from mobile end-points as SMS and MMS can be intercepted \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Broadcast intents, SMS, and MMS are inherently vulnerable to interception and unauthorized access. Ensuring secure handling of such messages reduces the risk of data leaks and unauthorized access to sensitive information.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-008, SECM-CAT-ICO-009",
    "Parent PUIDs": "SECM-CAT-ICO-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must restrict the exposure of sensitive information via broadcast intents, especially when handling SMS messages. Broadcast messages must be secured, limited to authorized applications, and sensitive data must not be transmitted using insecure methods such as SMS or MMS."
  },
  {
    "PUID": "SECM-CAT-ICO-008",
    "Requirement description": "The mobile application must ensure the confidentiality and integrity of electronically transmitted data, including electronic protected health information (ePHI), by implementing industry-standard encryption protocols (e.g., TLS/SSL) and integrity controls during data transmission.",
    "Source": "§ 164.312 Technical safeguards.  \\(e\\)  \\(1\\) Standard: Transmission security.  Implement technical security measures to guard against unauthorized access to electronic protected health information that is being transmitted over an electronic communications network.  \\(2\\) Implementation specifications:  \\(i\\) Integrity controls (Addressable).  Implement security measures to ensure that electronically transmitted electronic protected health information is not improperly modified without detection until disposed of.  \\(ii\\) Encryption (Addressable):  Implement a mechanism to encrypt electronic protected health information whenever deemed appropriate \\[9\\].  4.7. Communications and Operations Management  Security Requirement 30 -- Encrypting PHI During Transmission: The EHRi and PoS systems connected to the EHRi must apply industry-standard cryptographic algorithms and protocols during transmission of PHI to maintain the confidentiality and integrity of this data whenever it is transmitted outside the physical security perimeters that protects information processing facilities supporting EHRi servers, applications or data \\[10\\].  SC-8 TRANSMISSION CONFIDENTIALITY AND INTEGRITY  Control: Protect the \\[Selection (one or more): confidentiality; integrity\\] of transmitted information.  Discussion: Protecting the confidentiality and integrity of transmitted information applies to internal and external networks as well as any system components that can transmit information, including servers, notebook computers, desktop computers, mobile devices, printers, copiers, scanners, facsimile machines, and radios. Unprotected communication paths are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of information can be accomplished by physical or logical means. Physical protection can be achieved by using protected distribution systems. A protected distribution system is a wireline or fiber-optics telecommunications system that includes terminals and adequate electromagnetic, acoustical, electrical, and physical controls to permit its use for the unencrypted transmission of classified information. Logical protection can be achieved by employing encryption techniques \\[11\\].  V-222598: The application must maintain the confidentiality and integrity of information during preparation for transmission. Configure all of the application systems to require TLS encryption \\[15\\].  SRG-APP-000439-MAPP-000100: The mobile app must protect the confidentiality and integrity of transmitted information \\[17\\].  MASVS-NETWORK-1: The app secures all network traffic according to the current best practices: Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation \\[20\\].  4.9.3. Cryptographic Controls.  Consideration MC22 -- Ensure Communications Channel Encryption: Organizations should ensure that all mobile communications channels that transmit or receive confidential information are encrypted \\[10\\].  Test ID 15: The confidentiality and integrity of EHR information is protected while in transit (SC-8) by using a cryptographic mechanism \\[36\\].  Secure Data Transmission: Utilize secure communication protocols (e.g., HTTPS, SSL/TLS) to protect data during transmission between the mobile application and backend servers. Avoid sending sensitive data over unsecured channels \\[3\\].  iOS Specific Best Practices: 2. When using CFNetwork, consider using the Secure Transport API to designate trusted client certificates. In almost all situations, NSStreamSocketSecurityLevelTLSv1 should be used for higher standard cipher strength \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Transmitting sensitive health information over electronic communication networks requires robust security to protect against unauthorized access, interception, or modification, ensuring compliance with legal and regulatory standards for ePHI protection.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-010",
    "Exclusion PUIDs": "SECM-CAT-ICO-007",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure the confidentiality and integrity of electronically transmitted data, including electronic protected health information (ePHI), by implementing industry-standard encryption protocols (e.g., TLS/SSL) and integrity controls during data transmission."
  },
  {
    "PUID": "SECM-CAT-ICO-009",
    "Requirement description": "The mobile application must use hashed values derived from secure hash functions (e.g., SHA-256 or bcrypt) as primary keys or identifiers to avoid directly storing or transmitting personal information.",
    "Source": "Data Handling Practices: The application must use hashed values (e.g., hash of an email address) as primary keys to avoid storing or transmitting personal information \\[18\\].  Use Strong Hash Functions: 1. Choose widely recognized and cryptographically secure hash functions like SHA-256 or bcrypt. These algorithms are designed to resist attacks and provide a high level of security \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Using hashed values as primary keys or identifiers minimizes the exposure of personal information and enhances data privacy and security. Secure hash functions resist attacks, ensuring data integrity and confidentiality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-011",
    "Parent PUIDs": "SECM-CAT-ICO-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must use hashed values derived from secure hash functions (e.g., SHA-256 or bcrypt) as primary keys or identifiers to avoid directly storing or transmitting personal information."
  },
  {
    "PUID": "SECM-CAT-ICO-010",
    "Requirement description": "The mobile application must ensure confidentiality and integrity of information during reception by enforcing TLS encryption for all data exchanges.",
    "Source": "V-222599: The application must maintain the confidentiality and integrity of information during reception. Configure all of the application systems to require TLS encryption \\[15\\].  Data transmission via a secure channel \\[26\\].",
    "Priority": "Not defined",
    "Rationale": "TLS encryption ensures that sensitive information remains confidential and intact during data transmission, protecting it from interception, tampering, or unauthorized access. This is critical for maintaining trust and security in health-related mobile applications.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure confidentiality and integrity of information during reception by enforcing TLS encryption for all data exchanges."
  },
  {
    "PUID": "SECM-CAT-ICO-011",
    "Requirement description": "The mobile application must sign critical message elements in SOAP messages requiring integrity, including Message ID, Service Request, Timestamp, SAML Assertion, and Message elements.",
    "Source": "V-222398: Design and configure the application to sign the following message elements for SOAP messages requiring integrity:  \\- Message ID  \\- Service Request  \\- Timestamp  \\- SAML Assertion  \\- Message elements \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Signing critical elements ensures the integrity and authenticity of SOAP messages during transmission. This is essential to prevent unauthorized modifications, replay attacks, and ensure trust in message exchange, especially in sensitive health-related data transactions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-012",
    "Parent PUIDs": "SECM-CAT-ICO-009",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must sign critical message elements in SOAP messages requiring integrity, including Message ID, Service Request, Timestamp, SAML Assertion, and Message elements."
  },
  {
    "PUID": "SECM-CAT-ICO-012",
    "Requirement description": "The mobile application must ensure the confidentiality and integrity of transmitted information by requiring TLS encryption for all communications. Cryptographic mechanisms such as HMAC-SHA1, HMAC-SHA-256, HMAC-SHA-512, or GCM mode must be implemented to prevent unauthorized disclosure and detect tampering during data transmission.",
    "Source": "V-222596: The application must protect the confidentiality and integrity of transmitted information. Configure all of the application systems to require TLS encryption in accordance with data protection requirements \\[15\\].  V-222597: The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission unless otherwise protected by alternative physical safeguards, such as, at a minimum, a Protected Distribution System (PDS). Configure the application to use cryptographic protections to prevent unauthorized disclosure of application data based upon the application architecture \\[15\\].  Data transmission via a secure channel \\[26\\].  Integrity Implementation: Ensure data integrity by pairing encryption modes with one of the following:  ```{=html} <!-- --> ``` HMAC-SHA1  HMAC-SHA-256  HMAC-SHA-512  GCM mode \\[18\\].  ```{=html} <!-- --> ``` MASVS-NETWORK-1: The app secures all network traffic according to the current best practices: Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation \\[20\\].  Explicit encryption on data stored on my mobile device and the data transmitted to a remote server \\[26\\].",
    "Priority": "Not defined",
    "Rationale": "Securing network traffic with TLS encryption and strong cryptographic mechanisms ensures data protection during transmission, safeguarding against unauthorized access, tampering, or replay attacks. This is critical for maintaining the confidentiality and integrity of sensitive healthcare data.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "N90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure the confidentiality and integrity of transmitted information by requiring TLS encryption for all communications. Cryptographic mechanisms such as HMAC-SHA1, HMAC-SHA-256, HMAC-SHA-512, or GCM mode must be implemented to prevent unauthorized disclosure and detect tampering during data transmission."
  },
  {
    "PUID": "SECM-CAT-ICO-013",
    "Requirement description": "The mobile application must validate all data downloaded over insecure protocols, such as HTTP. Input validation must be enforced on all responses, particularly when processing data in WebView components or handling responses to HTTP intents, to ensure untrusted data does not compromise application security.",
    "Source": "Validation of Downloaded Data: Data downloaded over insecure protocols such as HTTP must not be trusted by default. Input validation must be enforced for all responses, especially when handling data in components like WebView or processing responses to HTTP intents \\[18\\]",
    "Priority": "Not defined",
    "Rationale": "Validating downloaded data from insecure sources ensures that malicious or manipulated data cannot compromise the integrity, functionality, or security of the application. This is critical for protecting sensitive information and preventing unauthorized access or code execution.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-014, SECM-CAT-ICO-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "98",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must validate all data downloaded over insecure protocols, such as HTTP. Input validation must be enforced on all responses, particularly when processing data in WebView components or handling responses to HTTP intents, to ensure untrusted data does not compromise application security."
  },
  {
    "PUID": "SECM-CAT-ICO-014",
    "Requirement description": "The mobile application must configure all session cookies to include the HTTPOnly flag to prevent client-side scripts from accessing session cookies, mitigating the risk of cross-site scripting (XSS) attacks.",
    "Source": "V-222575: The application must set the HTTPOnly flag on session cookies. Configure the application to set the HTTPOnly flag on session cookies \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Setting the HTTPOnly flag on session cookies ensures that sensitive cookies are inaccessible to malicious client-side scripts, reducing the potential for XSS attacks to compromise session data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-015",
    "Parent PUIDs": "SECM-CAT-ICO-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must configure all session cookies to include the HTTPOnly flag to prevent client-side scripts from accessing session cookies, mitigating the risk of cross-site scripting (XSS) attacks."
  },
  {
    "PUID": "SECM-CAT-ICO-015",
    "Requirement description": "The mobile application must configure all session cookies to include the Secure flag, ensuring that cookies are only transmitted over encrypted HTTPS connections to prevent their exposure in plaintext communication.",
    "Source": "V-222576: The application must set the secure flag on session cookies. Configure the application to ensure the secure flag is set on session cookies \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Setting the Secure flag on session cookies ensures that they are transmitted exclusively over secure channels, such as HTTPS, mitigating the risk of interception by attackers through network sniffing or man-in-the-middle (MITM) attacks.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "0",
    "Number of audits": "0",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must configure all session cookies to include the Secure flag, ensuring that cookies are only transmitted over encrypted HTTPS connections to prevent their exposure in plaintext communication."
  },
  {
    "PUID": "SECM-CAT-ICO-016",
    "Requirement description": "The mobile application must only use certificates signed by a trusted Certificate Authority (CA) and ensure strict certificate validation, including checking for self-signed, expired, revoked, or misconfigured certificates. Connections with endpoints offering invalid certificates must not be allowed.",
    "Source": "General Best Practices: 5. Use certificates signed by a trusted CA provider \\[3\\].  5.4: Verify that the app either uses its own certificate store, or pins the endpoint certificate or public key, and subsequently does not establish connections with endpoints that offer a different certificate or key, even if signed by a trusted CA \\[19\\].  4.7. Use certificates signed by trusted CA providers. Do not allow self-signed certificates and do not disable or ignore certificate chain validation \\[16\\].  Encrypt the code. Apps must be encoded and signed by trusted sources \\[25\\].  General Best Practices: 6. Never allow bad certificates (self-signed, expired, untrusted root, revoked, wrong host..) \\[3\\].  1.3. When storing sensitive data on the device, use a file encryption API provided by the OS or other trusted source. Some platforms (e.g., iOS and Android) provide file encryption API's which use a secret key protected by the device unlock code and deletable on remote wipe. If this is available, it should be used as it increases the security of the encryption without creating extra burden on the end-user. It also makes stored data safer in the case of loss or theft. However, it should be borne in mind that even when protected by the device unlock key, if data is stored on the device, its security is dependent on the security of the device unlock code if remote deletion of the key is for any reason not possible \\[16\\].  iOS Specific Best Practices: 3. After development, ensure all NSURL calls (or wrappers of NSURL) do not allow self-signed or invalid certificates such as the NSURL class method setAllowsAnyHTTPSCertificate \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Using certificates from trusted CAs and enforcing strict validation ensures the integrity and security of communication channels. It prevents attackers from intercepting or tampering with data through techniques like SSL stripping, certificate forgery, or man-in-the-middle (MITM) attacks.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-017",
    "Parent PUIDs": "SECM-CAT-ICO-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must only use certificates signed by a trusted Certificate Authority (CA) and ensure strict certificate validation, including checking for self-signed, expired, revoked, or misconfigured certificates. Connections with endpoints offering invalid certificates must not be allowed."
  },
  {
    "PUID": "SECM-CAT-ICO-017",
    "Requirement description": "The application must prevent the exposure of sensitive data through Inter-Process Communication (IPC) mechanisms by ensuring strict access controls and verifying that permission-protected data is not accessible to unauthorized clients. Sensitive functionality must not be exported via IPC unless adequately protected.",
    "Source": "2.6: Verify that no sensitive data is exposed via IPC mechanisms \\[19\\].  Prevention of Permission Leakage: The application must not expose permission-protected data through IPC to clients that do not have the required permissions. Strict access control measures must be implemented to prevent accidental data leakage \\[18\\].  6.4: Verify that the app does not export sensitive functionality through IPC facilities, unless these mechanisms are properly protected \\[19\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].",
    "Priority": "Not defined",
    "Rationale": "Unprotected IPC mechanisms can expose sensitive data or functionality to unauthorized clients, leading to potential data leakage or misuse of application features. Enforcing strict access control and preventing unintended IPC exports ensures the confidentiality and security of sensitive data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "0",
    "Number of audits": "0",
    "Child PUIDs": "SECM-CAT-ICO-018",
    "Parent PUIDs": "SECM-CAT-ICO-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent the exposure of sensitive data through Inter-Process Communication (IPC) mechanisms by ensuring strict access controls and verifying that permission-protected data is not accessible to unauthorized clients. Sensitive functionality must not be exported via IPC unless adequately protected."
  },
  {
    "PUID": "SECM-CAT-ICO-018",
    "Requirement description": "The application must secure Inter-Process Communication (IPC) mechanisms by implementing permissions using the \\<permission\\> element for sensitive components like ContentProvider. For IPC between apps by the same developer, signature protection must be used. Explicit intents must be utilized over implicit ones for asynchronous IPC to prevent data exposure.",
    "Source": "Secure Inter-Process Communication (IPC): When exposing security-sensitive IPC components like a ContentProvider, the app must use the \\<permission\\> element to protect it. Signature protection must be implemented for IPC communication between apps developed by the same developer. \\[18\\]  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  Explicit Intents for Security: For asynchronous IPC between activities, services, and broadcast receivers, always prefer explicit intents over implicit ones for security purposes. \\[18\\]  IPC and Data Exposure: The application must ensure that it does not inadvertently expose user data to other applications through overly permissive IPC mechanisms, world-writable files, or unsecured network sockets \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Insecure IPC mechanisms can unintentionally expose sensitive data or functionality to unauthorized applications, leading to potential data breaches. Implementing strong permissions and using explicit intents ensures that only authorized entities access sensitive IPC components, protecting user data and application integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-019",
    "Parent PUIDs": "SECM-CAT-ICO-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must secure Inter-Process Communication (IPC) mechanisms by implementing permissions using the \\<permission\\> element for sensitive components like ContentProvider. For IPC between apps by the same developer, signature protection must be used. Explicit intents must be utilized over implicit ones for asynchronous IPC to prevent data exposure."
  },
  {
    "PUID": "SECM-CAT-ICO-019",
    "Requirement description": "The application must ensure that all external connections to third-party entities, such as analytics providers or social networks, use SSL/TLS for secure communication when running routines through the browser or WebView. Mixed SSL sessions must be avoided to protect the user's session ID and data integrity.",
    "Source": "Use General Best Practices: 3. Account for outside entities like third-party analytics companies, social networks, etc. by using their SSL versions when an application runs a routine via the browser/webkit. Avoid mixed SSL sessions as they may expose the user's session ID \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Mixed SSL sessions expose users to potential man-in-the-middle attacks and session hijacking, compromising user data. By enforcing SSL/TLS for all external connections, the application ensures a secure environment for data exchange with third-party services.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-020",
    "Parent PUIDs": "SECM-CAT-ICO-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that all external connections to third-party entities, such as analytics providers or social networks, use SSL/TLS for secure communication when running routines through the browser or WebView. Mixed SSL sessions must be avoided to protect the user's session ID and data integrity."
  },
  {
    "PUID": "SECM-CAT-ICO-020",
    "Requirement description": "The application must ensure that session IDs are not exposed to unauthorized entities and must implement measures to protect session IDs from interception, manipulation, or unauthorized reus.",
    "Source": "V-222577: The application must not expose session IDs. Configure the application to protect session IDs from interception or from manipulation \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Exposing session IDs compromises session integrity and allows attackers to impersonate users, leading to unauthorized access. By securing session IDs, the application mitigates risks of session hijacking and ensures user session confidentiality and integrity.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-019",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that session IDs are not exposed to unauthorized entities and must implement measures to protect session IDs from interception, manipulation, or unauthorized reus."
  },
  {
    "PUID": "SECM-CAT-ICO-021",
    "Requirement description": "The application must enforce the use of secure communication protocols, such as HTTPS, for all network communication involving sensitive data. Connections over unsecured protocols, such as HTTP, must be blocked, and HTTPS must be used by default, especially on unsecured networks like public Wi-Fi.",
    "Source": "Use of Secure Protocols: All network communication handling sensitive data must use secure protocols, such as HttpsURLConnection, instead of HTTP. HTTPS must be used wherever supported by the server, particularly when the mobile device connects to unsecured networks like public Wi-Fi \\[18\\].  Test ID 4: Connection to the EHR system is permitted only through specific secure protocols \\[36\\].",
    "Priority": "Not defined",
    "Rationale": "Using secure protocols ensures the confidentiality and integrity of sensitive data during transmission. This mitigates risks of eavesdropping, man-in-the-middle attacks, and data tampering on unsecured or public networks.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-022, SECM-CAT-ICO-024",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce the use of secure communication protocols, such as HTTPS, for all network communication involving sensitive data. Connections over unsecured protocols, such as HTTP, must be blocked, and HTTPS must be used by default, especially on unsecured networks like public Wi-Fi."
  },
  {
    "PUID": "SECM-CAT-ICO-022",
    "Requirement description": "The application must secure all network communication with SSL/TLS protocols to ensure the confidentiality and integrity of transmitted data, particularly for sensitive operations such as API calls, authentication, and data exchanges. Mutual authentication must be utilized when handling non-releasable or highly sensitive data.",
    "Source": "Use SSL/HTTPS: Always use HTTPS communication to encrypt your API requests \\[18\\].  Data can be encrypted end to end using HTTPS protocols to allow only secure apps from devices to communicate with the web service layer \\[32\\].  V-222534: Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS. Configure the application to utilize mutual authentication when the application is processing non-releasable data \\[15\\].  V-222396: The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions. Design and configure applications to use TLS encryption to protect the confidentiality of remote access sessions \\[15\\].  V-222397: The application must implement cryptographic mechanisms to protect the integrity of remote access sessions. Design and configure applications to use TLS encryption to protect the integrity of remote access sessions \\[15\\].  Encrypt communication: Use HTTPS and similar technologies to ensure the data your app sends over a network is protected \\[18\\].  SR3: Mutual Authentication and Trust A valid patient and authorized medical professional must have unique identities and must be able to authenticate each other for a trustful session. The mobile devices may have malware that can risk the health card and reader applications. The two devices must prove their trustful states to each other before the exchange of any data \\[30\\].  All information passed through the m-health system must been done via encrypted messages \\[22\\].  Protect API Key Communication: Secure all communication between the app and the service using HTTPS to prevent API keys from being exposed during transit \\[18\\].  General Best Practices: 2. Apply SSL/TLS to transport channels that the mobile app will use to transmit data to a backend API or web service \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Encrypting communication using HTTPS (SSL/TLS) ensures data protection against eavesdropping and tampering during transmission. This is essential for safeguarding sensitive healthcare data and API keys, particularly when transmitted over unsecured networks.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-023",
    "Parent PUIDs": "SECM-CAT-ICO-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must secure all network communication with SSL/TLS protocols to ensure the confidentiality and integrity of transmitted data, particularly for sensitive operations such as API calls, authentication, and data exchanges. Mutual authentication must be utilized when handling non-releasable or highly sensitive data."
  },
  {
    "PUID": "SECM-CAT-ICO-023",
    "Requirement description": "The application must implement short-lived access tokens for API calls and operations to minimize the exposure of sensitive credentials. Authentication tokens must be required for all subsequent requests, especially those involving privileged access or sensitive data modifications.",
    "Source": "Use Short-Lived Access Tokens: Implement short-lived tokens for operations and API calls to limit the exposure of sensitive credentials \\[18\\].  2.7. Require authentication credentials or tokens to be passed with any subsequent request (especially those granting privileged access or modification) \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Short-lived tokens reduce the risk of unauthorized access by limiting the timeframe in which stolen or intercepted credentials can be misused. Requiring tokens for each request enhances security by enforcing session validity and authentication for every action.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement short-lived access tokens for API calls and operations to minimize the exposure of sensitive credentials. Authentication tokens must be required for all subsequent requests, especially those involving privileged access or sensitive data modifications."
  },
  {
    "PUID": "SECM-CAT-ICO-024",
    "Requirement description": "The application must implement encrypted socket-level communication using HTTPS URIs or the SSLSocket class for secure file retrieval and data transmission. Additional hostname verification precautions must be applied when using SSLSocket to prevent man-in-the-middle (MITM) attacks. All network traffic must follow best practices for securing data privacy and integrity during transit.",
    "Source": "Secure Communications: For secure file retrieval from known network locations, use HTTPS URIs. When a secure tunnel is required, use HttpsURLConnection or SSLSocket. Be aware that SSLSocket doesn\\'t perform hostname verification, and additional precautions are necessary \\[18\\].  Encrypted Communication: Applications must implement encrypted socket-level communication using the SSLSocket class for secure data transmission. Secure networking is mandatory for all applications that communicate over the network to mitigate risks from unsecured wireless networks \\[18\\].  MASVS-NETWORK-1: The app secures all network traffic according to the current best practices: Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation \\[20\\].",
    "Priority": "Not defined",
    "Rationale": "Enforcing encrypted communication ensures data confidentiality and integrity while mitigating risks associated with unsecured networks, such as public Wi-Fi. Using HTTPS and SSLSocket with appropriate security measures minimizes the likelihood of MITM attacks and unauthorized data interception.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-025, SECM-CAT-ICO-026",
    "Parent PUIDs": "SECM-CAT-ICO-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement encrypted socket-level communication using HTTPS URIs or the SSLSocket class for secure file retrieval and data transmission. Additional hostname verification precautions must be applied when using SSLSocket to prevent man-in-the-middle (MITM) attacks. All network traffic must follow best practices for securing data privacy and integrity during transit."
  },
  {
    "PUID": "SECM-CAT-ICO-025",
    "Requirement description": "The application must utilize only DoD-approved Public Key Infrastructure (PKI) certificate authorities (CAs) for the verification of protected session establishments. Configure the application to ensure all DoD-signed certificates are validated using DoD-approved PKI CAs exclusively.",
    "Source": "V-222584: The application must only allow the use of DoD-approved certificate authorities for verification of the establishment of protected sessions. Configure the application to utilize DoD-approved PKI established CAs when verifying DoD-signed certificates \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Enforcing the use of DoD-approved CAs ensures the authenticity and trustworthiness of certificates, reducing the risk of man-in-the-middle (MITM) attacks and unauthorized access. This aligns with the stringent security standards required for handling sensitive or classified information in a defense context.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-027",
    "Parent PUIDs": "SECM-CAT-ICO-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must utilize only DoD-approved Public Key Infrastructure (PKI) certificate authorities (CAs) for the verification of protected session establishments. Configure the application to ensure all DoD-signed certificates are validated using DoD-approved PKI CAs exclusively."
  },
  {
    "PUID": "SECM-CAT-ICO-026",
    "Requirement description": "The application must enforce secure communication by utilizing strong, industry-standard cipher suites with appropriate key lengths and transport layer encryption protocols, such as HTTPS or TLS, for all network traffic. Implement strict certificate validation and ensure consistent use of secure channels across the app.",
    "Source": "General Best Practices: 4. Use strong, industry standard cipher suites with appropriate key lengths \\[3\\].  5.1: Verify that data is encrypted on the network using TLS. The secure channel is used consistently throughout the app \\[19\\].  Secure Communication Any communication or data handling performed in native code must be secured using encryption protocols (e.g., HTTPS, TLS) to prevent potential exploits or data tampering \\[18\\].  4.2. Applications should enforce the use of an end-to-end secure channel (such as TLS) when sending sensitive information over any network (e.g., using Strict Transport Security - STS). This includes passing user credentials and other authentication equivalents \\[16\\].  MASVS-NETWORK-1: The app secures all network traffic according to the current best practices: Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation \\[20\\].  Employ Secure Transport Layer: 1. Use secure transport layer protocols, such as HTTPS (HTTP Secure), for transmitting encrypted data over networks. Implement proper certificate validation and ensure secure communication channels between the mobile app and backend systems \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Ensuring secure communication protects sensitive data from interception, tampering, or unauthorized access. This is especially critical for applications that transmit personal or healthcare-related information over networks, including public Wi-Fi.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-028",
    "Parent PUIDs": "SECM-CAT-ICO-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce secure communication by utilizing strong, industry-standard cipher suites with appropriate key lengths and transport layer encryption protocols, such as HTTPS or TLS, for all network traffic. Implement strict certificate validation and ensure consistent use of secure channels across the app."
  },
  {
    "PUID": "SECM-CAT-ICO-027",
    "Requirement description": "The application must implement FIPS 140-2-validated cryptographic modules for encryption, key exchange, digital signatures, random number generation, and hash functionality. Secure communication channels, such as IPSec or TLS, must protect all stored, collected, and exchanged data with encryption mechanisms aligned with current best practices.",
    "Source": "Security: 23. The app has encryption mechanisms for storing, collecting and exchanging information \\[29\\].  5.2: Verify that the TLS settings are in line with current best practices, as far as they are supported by the mobile operating system \\[19\\].  4.3.5 Transmission Security: The app has encryption mechanisms for storing, collecting, and exchanging information. It has password management mechanisms.  All communication among a typical patient, doctor, health IT administrator, and the electronic health record system is protected via end-to-end encryption by using IPSec, TLS, or similar technology. Federal agencies should verify that all components using Extensible Authentication Protocol (EAP) Transport Layer Security (TLS) are Federal Information Processing Standard (FIPS) 140-2 validated. In our implementation, because we used such a varied set of products, not all of the products were FIPS 140-2 validated \\[36\\].  MASVS-NETWORK-1: The app secures all network traffic according to the current best practices: Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation \\[20\\].  Security: The app has encryption mechanisms for storing, collecting, and exchanging information. It has password management mechanisms \\[21\\].  4.6. Enforce secure TLS versions. Safely abort the connection, if this is not possible \\[16\\].  V-222583: The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality. Configure the application to use FIPS 140-2-validated cryptographic modules when the application implements encryption, key exchange, digital signatures, random number generators, and hash functionality \\[15\\].  V-222641: The application must use encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange. Use encryption for key exchange \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "The use of validated cryptographic modules and secure communication protocols ensures the confidentiality, integrity, and authenticity of sensitive information, including personal health data, in compliance with regulatory and security standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-029",
    "Parent PUIDs": "SECM-CAT-ICO-025",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement FIPS 140-2-validated cryptographic modules for encryption, key exchange, digital signatures, random number generation, and hash functionality. Secure communication channels, such as IPSec or TLS, must protect all stored, collected, and exchanged data with encryption mechanisms aligned with current best practices."
  },
  {
    "PUID": "SECM-CAT-ICO-028",
    "Requirement description": "The application must avoid binding to the non-specific IP address INADDR_ANY. Instead, it must bind only to specific and secure IP addresses to restrict unauthorized access and prevent unintended exposure to all network interfaces.",
    "Source": "Prohibit Use of INADDR_ANY: The application must avoid binding to the non-specific IP address INADDR_ANY, as this allows the app to receive requests from any IP address. Binding must be limited to specific and secure addresses to prevent unintended access \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Binding to INADDR_ANY increases the risk of unauthorized access as it permits connections from any network interface. Restricting bindings to specific IP addresses enhances the application\\'s security by limiting exposure and ensuring controlled network communication.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-030",
    "Parent PUIDs": "SECM-CAT-ICO-026",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must avoid binding to the non-specific IP address INADDR_ANY. Instead, it must bind only to specific and secure IP addresses to restrict unauthorized access and prevent unintended exposure to all network interfaces."
  },
  {
    "PUID": "SECM-CAT-ICO-029",
    "Requirement description": "The application must not override the onReceivedSslError method to bypass SSL certificate validation, ensuring that invalid SSL certificates are not accepted.",
    "Source": "Android Specific Best Practices: 3. Avoid overriding onReceivedSslError to allow invalid SSL certificates \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Overriding onReceivedSslError to accept invalid certificates exposes the application to man-in-the-middle (MITM) attacks and compromises the security of sensitive data in transit. Strict SSL certificate validation ensures secure communication channels and protects against interception and tampering.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-031",
    "Parent PUIDs": "SECM-CAT-ICO-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must not override the onReceivedSslError method to bypass SSL certificate validation, ensuring that invalid SSL certificates are not accepted."
  },
  {
    "PUID": "SECM-CAT-ICO-030",
    "Requirement description": "The application must establish secure TLS connections only after verifying the identity of the endpoint server using trusted certificates in the key chain and enforcing SSL chain verification.",
    "Source": "4.3. For sensitive data, to reduce the risk of man-in-middle attacks (like SSL proxy, SSL strip), a secure connection should only be established after verifying the identity of the remote-end-point (server). This can be achieved by ensuring that TLS is only established with end-points having the trusted certificates in the key chain \\[16\\].  General Best Practices: 8. Always require SSL chain verification \\[3\\].  General Best Practices: 9. Only establish a secure connection after verifying the identity of the endpoint server using trusted certificates in the key chain \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Verifying the identity of the endpoint server through trusted certificates mitigates the risk of man-in-the-middle (MITM) attacks, such as SSL proxy and SSL strip, ensuring secure and trusted communication channels for sensitive data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICO-032",
    "Parent PUIDs": "SECM-CAT-ICO-028",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must establish secure TLS connections only after verifying the identity of the endpoint server using trusted certificates in the key chain and enforcing SSL chain verification."
  },
  {
    "PUID": "SECM-CAT-ICO-031",
    "Requirement description": "The application must leverage platform-specific mechanisms, such as App Transport Security (ATS) in iOS and clear text traffic opt-out in Android, to enforce additional security requirements for HTTP-based networking requests.",
    "Source": "4.3. For sensitive data, to reduce the risk of man-in-middle attacks (like SSL proxy, SSL strip), a secure connection should only be established after verifying the identity of the remote-end-point (server). This can be achieved by ensuring that TLS is only established with end-points having the trusted certificates in the key chain \\[16\\].  General Best Practices: 8. Always require SSL chain verification \\[3\\].  General Best Practices: 9. Only establish a secure connection after verifying the identity of the endpoint server using trusted certificates in the key chain \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Enforcing platform-specific security requirements ensures secure communication by default, reducing risks associated with clear text traffic and misconfigured networking requests, particularly for sensitive data transmissions.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must leverage platform-specific mechanisms, such as App Transport Security (ATS) in iOS and clear text traffic opt-out in Android, to enforce additional security requirements for HTTP-based networking requests."
  },
  {
    "PUID": "SECM-CAT-ICO-032",
    "Requirement description": "The application must alert users through the user interface (UI) if the peer certificate does not match the expected certificate, providing clear warnings and the option to abort further interaction.",
    "Source": "4.9. Design the user interface in a way that warns the user if the peer certificate does not match the expected certificate and provide the ability to abort any further interaction \\[16\\].  General Best Practices: 10. Alert users through the UI if the mobile app detects an invalid certificate \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Informing users about invalid certificates protects against man-in-the-middle (MITM) attacks and unauthorized endpoint connections, ensuring secure communication and user trust in the application.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICO-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must alert users through the user interface (UI) if the peer certificate does not match the expected certificate, providing clear warnings and the option to abort further interaction."
  },
  {
    "PUID": "SECM-CAT-IPC-001",
    "Requirement description": "The application must assign and enforce the use of unique user identifiers (IDs) to track and manage user activity, ensuring each user can be uniquely identified in combination with additional attributes such as jurisdictional or organizational identifiers. These IDs must also prevent session fixation and unauthorized reuse of session identifiers.",
    "Source": "SEC. 262. ADMINISTRATIVE SIMPLIFICATION  STANDARDS FOR INFORMATION TRANSACTIONS AND DATA ELEMENTS. ''SEC. 1173. (a) STANDARDS TO ENABLE ELECTRONIC EXCHANGE.  \"(b) UNIQUE HEALTH IDENTIFIERS. ---  \"(1) IN GENERAL. ---The Secretary shall adopt standards providing for a standard unique health identifier for each individual, employer, health plan, and health care provider for use in the health care system.  \"(2) USE OF IDENTIFIERS. ---The standards adopted under paragraph (1) shall specify the purposes for which a unique health identifier may be used \\[37\\].  1.2. Does the app capture a unique username or \"fixed device identifier\" used as a user identifier (for both patient and health care provider)? \\[33\\].  The authentication must be done with a unique ID and a password only known by the user \\[23\\].  § 164.312 Technical safeguards.  \\(a\\)  \\(2\\) Implementation specifications:  \\(i\\) Unique user identification (Required).  Assign a unique name and/or number for identifying and tracking user identity \\[9\\].  4.2.8.1. User Registration: Security Requirement 54 -- Assigning Identifiers to Users: All organizations connecting to the EHRi must ensure that users of PoS systems that connect to the EHRi are assigned an identifier (User ID) that, in combination with other identifiers (e.g. facility identifiers, jurisdictional identifiers), can uniquely identify the user within the EHRi. PoS systems must support the unique identification of users \\[10\\].  4.9.3. Cryptographic Controls  Consideration MC17 -- Uniquely Identify the Individual Using a Mobile Device: Establish approved mechanisms that will allow the organization to uniquely identify the user of a shared mobile device, prior to granting access to confidential information \\[10\\].  V-222579: Applications must use system-generated session identifiers that protect against session fixation. Design the application to generate new session IDs with unique values when authenticating user sessions \\[15\\].  IA-4 IDENTIFIER MANAGEMENT  Control: Manage system identifiers by:  a\\. Receiving authorization from \\[Assignment: organization-defined personnel or roles\\] to assign an individual, group, role, service, or device identifier;  b\\. Selecting an identifier that identifies an individual, group, role, service, or device;  c\\. Assigning the identifier to the intended individual, group, role, service, or device \\[11\\];  SESSION AUTHENTICITY \\| UNIQUE SYSTEM-GENERATED SESSION IDENTIFIERS  Generate a unique session identifier for each session with \\[Assignment: organization-defined randomness requirements\\] and recognize only session identifiers that are system-generated.  Discussion: Generating unique session identifiers curtails the ability of adversaries to reuse previously valid session IDs. Employing the concept of randomness in the generation of unique session identifiers protects against brute-force attacks to determine future session identifiers \\[11\\].",
    "Priority": "Not defined",
    "Rationale": "Assigning unique user identifiers ensures secure and precise tracking of individual user activity, compliance with regulatory requirements like HIPAA, and mitigates risks associated with session hijacking or fixation attacks. This control supports accountability and enhances user management within health systems",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-002, SECM-CAT-IPC-005",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "98",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must assign and enforce the use of unique user identifiers (IDs) to track and manage user activity, ensuring each user can be uniquely identified in combination with additional attributes such as jurisdictional or organizational identifiers. These IDs must also prevent session fixation and unauthorized reuse of session identifiers."
  },
  {
    "PUID": "SECM-CAT-IPC-002",
    "Requirement description": "The application must individually authenticate users with unique credentials before granting access to group accounts or resources associated with group authenticators.",
    "Source": "V-222529: The application must ensure users are authenticated with an individual authenticator prior to using a group authenticator. Design and configure the application to individually authenticate group account members prior to allowing access \\[15\\].  SR1: Confidentiality The health folder must be encrypted and be accessible to authorized users \\[30\\].",
    "Priority": "Not defined",
    "Rationale": "Individual authentication ensures accountability by tracking user actions within group accounts and prevents unauthorized users from gaining access through shared credentials. This practice strengthens security by enforcing identity verification prior to granting group-level privileges.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-003",
    "Parent PUIDs": "SECM-CAT-IPC-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must individually authenticate users with unique credentials before granting access to group accounts or resources associated with group authenticators."
  },
  {
    "PUID": "SECM-CAT-IPC-003",
    "Requirement description": "The application must use non-persistent and app-specific identifiers instead of device hardware identifiers (e.g., IMEI, UDID) to ensure privacy and prevent cross-app tracking.",
    "Source": "1.13. Use non-persistent identifiers which are not shared with other apps wherever possible (e.g., do not use the device unique hardware identifiers such as IMEI or UDID as an identifier) \\[16\\].  IA-4 IDENTIFIER MANAGEMENT  Control: Manage system identifiers by:  d\\. Preventing reuse of identifiers for \\[Assignment: organization-defined time period\\] \\[11\\].",
    "Priority": "Not defined",
    "Rationale": "Using app-specific identifiers protects user privacy by avoiding exposure of sensitive hardware-based identifiers. Non-persistent identifiers minimize the risk of tracking or misuse of unique device data, aligning with best practices for secure identifier management.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-004",
    "Parent PUIDs": "SECM-CAT-IPC-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use non-persistent and app-specific identifiers instead of device hardware identifiers (e.g., IMEI, UDID) to ensure privacy and prevent cross-app tracking."
  },
  {
    "PUID": "SECM-CAT-IPC-004",
    "Requirement description": "The application must assess the necessity of collecting personally identifiable information (PII), such as name, address, gender, and age, and minimize the collection of sensitive data wherever possible.",
    "Source": "Reducing PII collection: 1. The system should allow for the need to collect all PII processed, such as name, address, gender, and age, to be assessed in order to minimize the amount of sensitive data \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Minimizing the collection of PII reduces the risk of data breaches and unauthorized access to sensitive information. This aligns with privacy principles and regulations, ensuring only the necessary data is processed for intended purposes.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must assess the necessity of collecting personally identifiable information (PII), such as name, address, gender, and age, and minimize the collection of sensitive data wherever possible."
  },
  {
    "PUID": "SECM-CAT-IPC-005",
    "Requirement description": "The application must associate and retain organization-defined security attributes with information during storage and processing. These attributes must include organization-defined security values and must persist across storage and processing activities.",
    "Source": "V-222393: The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in storage. Design and configure the application to assign data marking and ensure the marking is retained when the data is stored \\[15\\].  V-222394: The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in process. Design and configure the application to retain the data marking when processing data \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Associating and retaining security attributes with data ensures that sensitive information is properly classified and protected throughout its lifecycle. This supports compliance with organizational data protection policies and prevents unauthorized access or processing.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-006, SECM-CAT-IPC-007",
    "Parent PUIDs": "SECM-CAT-IPC-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must associate and retain organization-defined security attributes with information during storage and processing. These attributes must include organization-defined security values and must persist across storage and processing activities."
  },
  {
    "PUID": "SECM-CAT-IPC-006",
    "Requirement description": "The mobile application must clear or overwrite memory blocks used to process sensitive data, such as Personally Identifiable Information (PII), location data, or authentication credentials. Additionally, sensitive personal data must not be retained beyond its required use, and temporary storage must adhere to strict access controls.",
    "Source": "SRG-APP-000516-MAPP-000067: The mobile app must clear or overwrite memory blocks used to process potentially sensitive data. Sensitive data may include PII, a user\\'s location, or authentication credentials \\[17\\].  1.7. Do not store historical location data or other sensitive information on the device beyond the period required by the application. Assume that shared storage is untrusted - information may easily leak in unexpected ways through any shared storage. In particular:  Be aware of caches and temporary storage as a possible leakage channel, when shared with other apps.  Be aware of shared storage such as address book, media gallery, audio files, as a possible leakage channel. For example, storing images with location metadata in the media-gallery allows that information to be shared in unintended ways.  Do not store temporary cached data in a world readable directory \\[16\\]  1.8. For sensitive personal data, deletion should be scheduled according to a maximum retention period, (to prevent e.g. data remaining in caches indefinitely). \\[16\\]",
    "Priority": "Not defined",
    "Rationale": "Proper management and timely deletion of sensitive data mitigate risks of unintended exposure through shared or temporary storage. Clearing memory and enforcing retention limits enhance user privacy and align with security best practices.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "0",
    "Number of audits": "0",
    "Child PUIDs": "SECM-CAT-IPC-008",
    "Parent PUIDs": "SECM-CAT-IPC-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must clear or overwrite memory blocks used to process sensitive data, such as Personally Identifiable Information (PII), location data, or authentication credentials. Additionally, sensitive personal data must not be retained beyond its required use, and temporary storage must adhere to strict access controls."
  },
  {
    "PUID": "SECM-CAT-IPC-007",
    "Requirement description": "The system must replace critical Personally Identifiable Information (PII) with less sensitive data when possible, such as replacing detailed location information with approximate location. The application must also implement processes to securely handle, classify, retain, and dispose of data based on sensitivity.",
    "Source": "Replacing critical PII: 1. The system should be able to replace critical PII with less sensitive data, such as replacing detailed location with approximate location \\[3\\].  CIS Critical Security Control 3: Data Protection: Develop processes and technical controls to identify, classify, securely handle, retain, and dispose of data \\[14\\]",
    "Priority": "Not defined",
    "Rationale": "Replacing detailed sensitive data with less specific alternatives reduces privacy risks while maintaining functional requirements. Proper data handling ensures compliance with data protection standards and minimizes exposure to breaches or misuse.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "0",
    "Number of audits": "0",
    "Child PUIDs": "SECM-CAT-IPC-009, SECM-CAT-IPC-010",
    "Parent PUIDs": "SECM-CAT-IPC-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must replace critical Personally Identifiable Information (PII) with less sensitive data when possible, such as replacing detailed location information with approximate location. The application must also implement processes to securely handle, classify, retain, and dispose of data based on sensitivity."
  },
  {
    "PUID": "SECM-CAT-IPC-008",
    "Requirement description": "The system must provide an option to reduce the frequency of Personally Identifiable Information (PII) updates, such as reducing the update interval for user location from every minute to every hour. The application must ensure data is securely identified, classified, handled, and disposed of following organizational policies.",
    "Source": "PII update frequency: 1. The system should provide the option to reduce the PII update frequency, such as updating the user\\'s location every hour instead of every minute \\[3\\].  CIS Critical Security Control 3: Data Protection: Develop processes and technical controls to identify, classify, securely handle, retain, and dispose of data \\[14\\]",
    "Priority": "Not defined",
    "Rationale": "Reducing the frequency of PII updates minimizes the amount of sensitive data collected, processed, and transmitted, lowering the risk of exposure in case of a breach or unauthorized access while still meeting operational requirements.",
    "Number of Children": "01",
    "Number of Parents": "01",
    "Cycles": "01",
    "Number of audits": "01",
    "Child PUIDs": "SECM-CAT-IPC-011",
    "Parent PUIDs": "SECM-CAT-IPC-006",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must provide an option to reduce the frequency of Personally Identifiable Information (PII) updates, such as reducing the update interval for user location from every minute to every hour. The application must ensure data is securely identified, classified, handled, and disposed of following organizational policies."
  },
  {
    "PUID": "SECM-CAT-IPC-009",
    "Requirement description": "The system must implement mechanisms to automatically delete Personally Identifiable Information (PII) after a defined retention period, such as retaining only data from the last week.",
    "Source": "Deleting PII based on retention time: 1. The system should have a mechanism to delete PII after a certain expiration period, such as retaining only data from the last week. \\[3\\].  CIS Critical Security Control 3: Data Protection: Develop processes and technical controls to identify, classify, securely handle, retain, and dispose of data \\[14\\]",
    "Priority": "Not defined",
    "Rationale": "Automating the deletion of PII after a retention period minimizes the risk of unauthorized access to outdated or unnecessary sensitive data, aligns with data protection regulations, and reduces storage overhead.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must implement mechanisms to automatically delete Personally Identifiable Information (PII) after a defined retention period, such as retaining only data from the last week."
  },
  {
    "PUID": "SECM-CAT-IPC-010",
    "Requirement description": "The system must allow users to manage access to their personal information at any time, including granting or revoking access to specific data.",
    "Source": "The users should be able to allow or forbid access to their information at any moment \\[23\\].",
    "Priority": "Not defined",
    "Rationale": "Providing users with control over their data access promotes user autonomy, ensures compliance with data protection regulations, and enhances trust in the application by allowing dynamic consent management.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-012, SECM-CAT-IPC-013",
    "Parent PUIDs": "SECM-CAT-IPC-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must allow users to manage access to their personal information at any time, including granting or revoking access to specific data."
  },
  {
    "PUID": "SECM-CAT-IPC-011",
    "Requirement description": "The system must retain a complete history of PHI (Protected Health Information), including its former content, and track details of who accessed, modified, or entered the data, along with timestamps. This functionality must be available in both EHRi systems and PoS systems connected to EHRi.",
    "Source": "4.7. Communications and Operations Management  Security Requirement 38 -- Preserving the History of PHI in the EHRi: The EHRi must be capable of displaying the former content of a record at any point in the past, as well the associated details of who entered, accessed or modified the data, and at what time  Security Requirement 39 -- Preserving the History of PHI in PoS Systems: All PoS systems connected to the EHRi should be capable of displaying the former content of a record at any point in the past, as well as the associated details of who entered, accessed or modified the data, and at what time \\[10\\].  SR13: Audit Logs All events of reading and writing to the health folder must be recorded in the cloud along with a backup of the transaction for reference in the case of improper access \\[30\\].",
    "Priority": "Not defined",
    "Rationale": "Preserving a historical record of PHI ensures compliance with legal and regulatory standards, enhances data traceability, and provides accountability for modifications or access to sensitive health data.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must retain a complete history of PHI (Protected Health Information), including its former content, and track details of who accessed, modified, or entered the data, along with timestamps. This functionality must be available in both EHRi systems and PoS systems connected to EHRi."
  },
  {
    "PUID": "SECM-CAT-IPC-012",
    "Requirement description": "The system must implement procedures to collect, review, and retain audit logs of all significant events, including access reports and security incident tracking, ensuring compliance with regulatory requirements and supporting investigation and recovery processes.",
    "Source": "Not described",
    "Priority": "Not defined",
    "Rationale": "Regular review and retention of audit logs provide critical evidence for detecting, understanding, and recovering from security incidents. This practice ensures the confidentiality, integrity, and availability of sensitive health information and helps maintain regulatory compliance.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-014",
    "Parent PUIDs": "SECM-CAT-IPC-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must implement procedures to collect, review, and retain audit logs of all significant events, including access reports and security incident tracking, ensuring compliance with regulatory requirements and supporting investigation and recovery processes."
  },
  {
    "PUID": "SECM-CAT-IPC-013",
    "Requirement description": "The application must implement logging mechanisms to audit the execution of privileged functions. Each log entry must include, at a minimum, the specific action taken, the date, and the time of the event.",
    "Source": "V-222431: The application must audit the execution of privileged functions. Configure the application to write log entries when privileged functions are executed. At a minimum, ensure the specific action taken, date and time of event are recorded \\[15\\].  Test ID 7: Application and system components contain a mechanism to allow the auditing of privileged functions \\[36\\].",
    "Priority": "Not defined",
    "Rationale": "Auditing privileged functions ensures accountability and facilitates the detection of unauthorized or inappropriate use of elevated privileges. This supports compliance with security policies and enables effective monitoring of system activity.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement logging mechanisms to audit the execution of privileged functions. Each log entry must include, at a minimum, the specific action taken, the date, and the time of the event."
  },
  {
    "PUID": "SECM-CAT-IPC-014",
    "Requirement description": "The mobile application must ensure that error messages are only transmitted to authorized destinations, including audit logs, the Mobile Device Management (MDM) system, or the device display. Error messages must not be sent to unauthorized entities.",
    "Source": "SRG-APP-000267-MAPP-000060: The mobile app must not transmit error messages to any entity other than authorized audit logs, the MDM, or the device display \\[17\\].  SR2: Integrity An intruder must not be able to alter the health information \\[30\\].",
    "Priority": "Not defined",
    "Rationale": "Restricting the transmission of error messages to authorized entities reduces the risk of exposing sensitive application details that could be exploited by attackers. This helps maintain the confidentiality and integrity of the application\\'s operational data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-015",
    "Parent PUIDs": "SECM-CAT-IPC-012",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure that error messages are only transmitted to authorized destinations, including audit logs, the Mobile Device Management (MDM) system, or the device display. Error messages must not be sent to unauthorized entities."
  },
  {
    "PUID": "SECM-CAT-IPC-015",
    "Requirement description": "The application must ensure that server logs adequately capture information about established connections, including parsing HTTP headers like X-Forwarded-For in cases involving multiple intermediate proxies.",
    "Source": "4.12. Ensure adequate logs on the server are retained about established connections. In the case of multiple intermediate proxies, make sure that HTTP headers are parsed correctly (e.g., X-Forwarded-For) \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Comprehensive logging of connection details, including correct interpretation of HTTP headers in proxied environments, enables accurate tracing of client requests and enhances the organization\\'s ability to investigate and respond to security incidents.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-016, SECM-CAT-IPC-017",
    "Parent PUIDs": "SECM-CAT-IPC-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that server logs adequately capture information about established connections, including parsing HTTP headers like X-Forwarded-For in cases involving multiple intermediate proxies."
  },
  {
    "PUID": "SECM-CAT-IPC-016",
    "Requirement description": "The mobile health application must retain adequate logs on the back-end to support incident detection, response, and forensic analysis, ensuring compliance with applicable data protection laws and regulations. These logs should record security-relevant events while maintaining the privacy of sensitive health data.",
    "Source": "5.5. Ensure adequate logs are retained on the back-end in order to detect and respond to incidents and perform forensics (within the limits of data protection law) \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Retaining adequate logs enables timely detection of security incidents and supports forensic analysis to identify potential breaches or misuse. This is critical in mobile health applications, where protecting sensitive personal health information (PHI) is paramount.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-018",
    "Parent PUIDs": "SECM-CAT-IPC-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must retain adequate logs on the back-end to support incident detection, response, and forensic analysis, ensuring compliance with applicable data protection laws and regulations. These logs should record security-relevant events while maintaining the privacy of sensitive health data."
  },
  {
    "PUID": "SECM-CAT-IPC-017",
    "Requirement description": "Mobile health applications must audit and log all non-local maintenance and diagnostic sessions, capturing organization-defined auditable events. Additionally, cryptographic mechanisms must be implemented to protect the integrity of communications during such sessions, ensuring that remote maintenance is secure and traceable.",
    "Source": "V-222561: Applications used for non-local maintenance sessions must audit non-local maintenance and diagnostic sessions for organization-defined auditable events. Configure the application to log when application maintenance functionality is executed remotely \\[15\\].  V-222562: Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the integrity of non-local maintenance and diagnostic communications. Configure the application to encrypt remote application maintenance sessions \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Non-local maintenance sessions are potential vectors for unauthorized access and data breaches. Proper auditing ensures accountability, while encryption safeguards the integrity of sensitive communication, reducing the risk of malicious interception or alteration during remote sessions.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must audit and log all non-local maintenance and diagnostic sessions, capturing organization-defined auditable events. Additionally, cryptographic mechanisms must be implemented to protect the integrity of communications during such sessions, ensuring that remote maintenance is secure and traceable."
  },
  {
    "PUID": "SECM-CAT-IPC-018",
    "Requirement description": "Mobile health applications must generate audit records for the creation of session IDs, ensuring that each session initiation event is logged with relevant details such as timestamp, session identifier, and associated user account.",
    "Source": "V-222441: The application must provide audit record generation capability for the creation of session IDs. Enable session ID creation event auditing \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Auditing session ID creation enhances security by enabling the detection of unauthorized or suspicious session initiation activities. This is critical for protecting sensitive health data and ensuring accountability in user access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-019",
    "Parent PUIDs": "SECM-CAT-IPC-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must generate audit records for the creation of session IDs, ensuring that each session initiation event is logged with relevant details such as timestamp, session identifier, and associated user account."
  },
  {
    "PUID": "SECM-CAT-IPC-019",
    "Requirement description": "Mobile health applications must generate audit records for the destruction of session IDs, capturing relevant details such as the session ID, timestamp, and associated user account to enhance traceability and security.",
    "Source": "V-222442: The application must provide audit record generation capability for the destruction of session IDs. Enable session ID destruction event auditing \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Auditing the destruction of session IDs ensures traceability and accountability, allowing administrators to detect abnormal termination of sessions that could indicate potential security issues. This is vital for protecting sensitive health information and maintaining compliance with data security standards.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must generate audit records for the destruction of session IDs, capturing relevant details such as the session ID, timestamp, and associated user account to enhance traceability and security."
  },
  {
    "PUID": "SECM-CAT-IPC-020",
    "Requirement description": "Mobile health applications must generate audit records for the renewal of session IDs, capturing details such as session ID, timestamp, user account, and changes in privileges or permissions, to ensure transparency and traceability.",
    "Source": "V-222443: The application must provide audit record generation capability for the renewal of session IDs. Design or reconfigure the application to log session renewal events on those application events that provide changes in the users privileges or permissions to the application \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Logging session ID renewals provides a clear audit trail of user privilege or permission changes, which is critical for detecting unauthorized access or privilege escalation attempts. This supports compliance with health data security standards and enhances accountability.",
    "Number of Children": "2",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-021, SECM-CAT-IPC-022",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must generate audit records for the renewal of session IDs, capturing details such as session ID, timestamp, user account, and changes in privileges or permissions, to ensure transparency and traceability."
  },
  {
    "PUID": "SECM-CAT-IPC-021",
    "Requirement description": "Mobile health applications must enable audit record generation for HTTP headers, including User-Agent, Referer, GET, and POST, capturing relevant data to support forensic analysis and incident detection.",
    "Source": "V-222447: The application must provide audit record generation capability for HTTP headers including User-Agent, Referer, GET, and POST. Configure the web application and/or the web server to log HTTP headers \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Auditing HTTP headers provides valuable insights into application usage patterns, potential misuse, or attack vectors. This ensures compliance with security standards for healthcare applications and aids in identifying malicious activities.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must enable audit record generation for HTTP headers, including User-Agent, Referer, GET, and POST, capturing relevant data to support forensic analysis and incident detection."
  },
  {
    "PUID": "SECM-CAT-IPC-022",
    "Requirement description": "Mobile health applications must generate audit records for session timeout events, capturing details such as user ID, session duration, and timestamp to ensure traceability and compliance with security standards.",
    "Source": "V-222445: The application must provide audit record generation capability for session timeouts. Configure the application to record session timeout events in the logs \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Auditing session timeouts helps identify potential misuse, such as unauthorized access due to prolonged inactive sessions. This is crucial for detecting anomalies and maintaining secure user access to sensitive healthcare data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-023",
    "Parent PUIDs": "SECM-CAT-IPC-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must generate audit records for session timeout events, capturing details such as user ID, session duration, and timestamp to ensure traceability and compliance with security standards."
  },
  {
    "PUID": "SECM-CAT-IPC-023",
    "Requirement description": "Mobile health applications must retain audit trails for at least one year for non-SAMI data and five years for applications processing SAMI (Sensitive Application Management Information) data to ensure traceability, compliance, and forensic analysis capabilities.",
    "Source": "V-222621: The ISSO must ensure application audit trails are retained for at least 1 year for applications without SAMI data, and 5 years for applications including SAMI data. Retain application audit log files for one year and five years for SAMI data \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Retention of audit trails is critical for ensuring accountability, supporting incident investigations, and meeting regulatory compliance requirements specific to healthcare data management.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-024",
    "Parent PUIDs": "SECM-CAT-IPC-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must retain audit trails for at least one year for non-SAMI data and five years for applications processing SAMI (Sensitive Application Management Information) data to ensure traceability, compliance, and forensic analysis capabilities."
  },
  {
    "PUID": "SECM-CAT-IPC-024",
    "Requirement description": "Mobile health applications must ensure that no sensitive data, including personally identifiable information (PII) or sensitive health information, is written to application logs. Logs must only capture essential data necessary for troubleshooting while maintaining confidentiality and security.",
    "Source": "2.2: Verify that no sensitive data is written to application logs \\[19\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[4\\].  Sensitive information should never be logged \\[28\\].  V-222444: The application must not write sensitive data into the application logs. Design or reconfigure the application to not write sensitive data to the logs \\[15\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].  SI-11 ERROR HANDLING  Control:  a\\. Generate error messages that provide information necessary for corrective actions without revealing information that could be exploited; and  b\\. Reveal error messages only to \\[Assignment: organization-defined personnel or roles\\]  Discussion: Organizations consider the structure and content of error messages. The extent to which systems can handle error conditions is guided and informed by organizational policy and operational requirements. Exploitable information includes stack traces and implementation details; erroneous logon attempts with passwords mistakenly entered as the username; mission or business information that can be derived from, if not stated explicitly by, the information recorded; and personally identifiable information, such as account numbers, social security numbers, and credit card numbers. Error messages may also provide a covert channel for transmitting information \\[11\\].",
    "Priority": "Not defined",
    "Rationale": "Preventing sensitive data from being logged minimizes the risk of unauthorized access and inadvertent exposure, ensuring compliance with healthcare regulations and safeguarding user privacy.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-025",
    "Parent PUIDs": "SECM-CAT-IPC-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must ensure that no sensitive data, including personally identifiable information (PII) or sensitive health information, is written to application logs. Logs must only capture essential data necessary for troubleshooting while maintaining confidentiality and security."
  },
  {
    "PUID": "SECM-CAT-IPC-025",
    "Requirement description": "Mobile health applications must ensure that sensitive data, including database administration credentials and health-related information, is removed or sanitized from production database exports and backups. Backups must be excluded from device-level and cloud synchronization mechanisms to prevent unauthorized access.",
    "Source": "V-222666: Production database exports must have database administration credentials and sensitive data removed before releasing the export. Remove sensitive data from production database exports \\[15\\].  2.8: Verify that no sensitive data is included in backups \\[19\\].  Disable backup mode (Android): 1. By disabling backup mode on Android devices, you prevent the inclusion of app data in the device's backup, ensuring that sensitive data from the app is not stored in the device backup. 2. Limit application attack surface by only exporting activities, content providers and services that are necessary to be exported \\[3\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].  1.29. Exclude sensitive application files from device backups and cloud synchronization services. If this option is not available in the in use platform (e.g., Android), exclude the whole application from device backups \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Removing sensitive data from database exports and backups reduces the risk of data breaches, unauthorized access, and misuse of confidential information. This ensures compliance with healthcare data protection regulations and safeguards user privacy.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-026, SECM-CAT-IPC-027",
    "Parent PUIDs": "SECM-CAT-IPC-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must ensure that sensitive data, including database administration credentials and health-related information, is removed or sanitized from production database exports and backups. Backups must be excluded from device-level and cloud synchronization mechanisms to prevent unauthorized access."
  },
  {
    "PUID": "SECM-CAT-IPC-026",
    "Requirement description": "Mobile health applications must disable debugging features and limit logging in production environments to prevent inadvertent exposure of sensitive information. Personally identifiable information (PII) must not be logged, and logging levels must be configurable using debug flags and custom logging classes.",
    "Source": "Logging Practices: The application must avoid logging personally identifiable information (PII) and limit log usage in production environments. Logging must be managed using debug flags and custom Log classes to easily configure logging levels and prevent inadvertent data exposure \\[18\\].  Disable application logging and debug messages in production releases. All exceptions should be handled securely \\[16\\].  Disable Debugging: 1. Disable debugging features in the production version of the app \\[3\\].",
    "Priority": "Not defined",
    "Rationale": "Limiting logging and disabling debugging in production environments ensures sensitive data is not exposed inadvertently and reduces the risk of attackers exploiting debug information. Proper log management enhances security and complies with privacy regulations for healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "SECM-CAT-IPC-025",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must disable debugging features and limit logging in production environments to prevent inadvertent exposure of sensitive information. Personally identifiable information (PII) must not be logged, and logging levels must be configurable using debug flags and custom logging classes."
  },
  {
    "PUID": "SECM-CAT-IPC-027",
    "Requirement description": "The application must prevent the unintentional storage or exposure of sensitive data, ensuring that any sensitive data (including keys) is encrypted and stored in a tamper-proof, platform-supported area if required.",
    "Source": "MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  1.5. Do not store/cache sensitive data (including keys) unless they are encrypted and if possible stored in a platform supported tamper-proof area \\[5\\].",
    "Priority": "Not defined",
    "Rationale": "Unintentional storage or exposure of sensitive data in publicly accessible locations increases the risk of data breaches. Encryption and tamper-proof storage minimize the potential for unauthorized access to sensitive information, enhancing security.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-028, SECM-CAT-IPC-029",
    "Parent PUIDs": "SECM-CAT-IPC-025",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prevent the unintentional storage or exposure of sensitive data, ensuring that any sensitive data (including keys) is encrypted and stored in a tamper-proof, platform-supported area if required."
  },
  {
    "PUID": "SECM-CAT-IPC-028",
    "Requirement description": "The mobile application must implement security controls to prevent unauthorized and unintended information transfer via shared system resources. Data classification mechanisms should be utilized to manage sensitive information, ensuring that personal or confidential data is not exposed or shared without explicit justification and user consent.",
    "Source": "SRG-APP-000516-MAPP-000075: The mobile app must not record or forward sensor data unless explicitly authorized to do so \\[17\\].",
    "Priority": "Not defined",
    "Rationale": "Protecting sensitive data in mobile health applications is critical to prevent unauthorized access, minimize security risks, and comply with privacy regulations. Proper classification and control measures reduce the likelihood of data leakage or misuse.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-030",
    "Parent PUIDs": "SECM-CAT-IPC-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must implement security controls to prevent unauthorized and unintended information transfer via shared system resources. Data classification mechanisms should be utilized to manage sensitive information, ensuring that personal or confidential data is not exposed or shared without explicit justification and user consent."
  },
  {
    "PUID": "SECM-CAT-IPC-029",
    "Requirement description": "The mobile application must apply data classification practices and enforce strict access boundaries to safeguard sensitive information. It must ensure that personal, confidential, or health-related data is only processed, stored, or shared when explicitly required and authorized. The application should actively prevent data leakage through shared system resources by validating access, restricting exposure, and minimizing unnecessary interactions with third-party components.",
    "Source": "V-222592: Applications must prevent unauthorized and unintended information transfer via shared system resources. Â Configure or design the application to utilize a security control that will implement a boundary that will prevent unauthorized and unintended information transfer via shared system resources \\[15\\].  Cautious Data Exposure: The application must evaluate the necessity of providing personal information to third-party components, such as advertising services. If the purpose is unclear, personal information must not be shared. The application should reduce access to personal information to minimize potential security risks \\[18\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  5.12 Classification of information: Information should be classified according to the information security needs of the organization based on confidentiality, integrity, availability and relevant interested party requirements \\[6\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Protecting sensitive data in mobile health applications is critical to prevent unauthorized access, minimize security risks, and comply with privacy regulations. Proper classification and control measures reduce the likelihood of data leakage or misuse.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must apply data classification practices and enforce strict access boundaries to safeguard sensitive information. It must ensure that personal, confidential, or health-related data is only processed, stored, or shared when explicitly required and authorized. The application should actively prevent data leakage through shared system resources by validating access, restricting exposure, and minimizing unnecessary interactions with third-party components."
  },
  {
    "PUID": "SECM-CAT-IPC-030",
    "Requirement description": "The mobile health application must identify and clearly document all sensitive data elements and their associated protection requirements. This includes maintaining a Security Classification Guide for classified or sensitive data and implementing measures to prevent data leakage in publicly accessible locations.",
    "Source": "1.5. Verify that data considered sensitive in the context of the mobile app is clearly identified \\[19\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  V-222423: Application data protection requirements must be identified and documented. Identify and document the application data elements and the data protection requirements \\[15\\].  V-222664: If the application contains classified data, a Security Classification Guide must exist containing data elements and their classification. Create and maintain a security classification guide \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Clearly identifying and classifying sensitive data ensures that appropriate security measures are implemented to protect user information and comply with privacy regulations, reducing the risk of data exposure or misuse.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-031, SECM-CAT-IPC-032",
    "Parent PUIDs": "SECM-CAT-IPC-028",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "Not described",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must identify and clearly document all sensitive data elements and their associated protection requirements. This includes maintaining a Security Classification Guide for classified or sensitive data and implementing measures to prevent data leakage in publicly accessible locations."
  },
  {
    "PUID": "SECM-CAT-IPC-031",
    "Requirement description": "The mobile health application must have the capability to mark sensitive or classified output when required, ensuring that sensitive data is not unintentionally exposed or shared with unauthorized third parties. The application must minimize sensitive data access, adhere to the principle of minimal disclosure, and securely manage sensitive data in the UI and storage.",
    "Source": "V-222643: The application must have the capability to mark sensitive/classified output when required. Enable the application to adequately mark sensitive/classified output \\[15\\].  2.3: Verify that no sensitive data is shared with third parties unless it is a necessary part of the architecture \\[19\\]  Do not send data to third parties, or, failing that, inform user \\[25\\].  Minimization of Sensitive Data Access: The application must minimize the use of APIs that access sensitive or personal information. If user data access is necessary, the application should avoid storing or transmitting this data whenever possible, opting instead for non-reversible forms such as hashes \\[18\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  MASVS-PLATFORM-3: The app uses the user interface securely: Sensitive data has to be displayed in the UI in many situations (e.g. passwords, credit card details, OTP codes in notifications). This control ensures that this data doesn't end up being unintentionally leaked due to platform mechanisms such as auto-generated screenshots or accidentally disclosed via e.g. shoulder surfing or sharing the device with another person \\[20\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].  1.12. Apply the principle of minimal disclosure - only collect and disclose data which is required for business use of the application \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Marking sensitive or classified data ensures proper handling and reduces the risk of accidental exposure. Minimizing sensitive data usage and adhering to secure UI practices protects against data leaks and unauthorized access, aligning with privacy and security regulations.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must have the capability to mark sensitive or classified output when required, ensuring that sensitive data is not unintentionally exposed or shared with unauthorized third parties. The application must minimize sensitive data access, adhere to the principle of minimal disclosure, and securely manage sensitive data in the UI and storage."
  },
  {
    "PUID": "SECM-CAT-IPC-032",
    "Requirement description": "The mobile health application must encrypt all multimedia content, including audio, video, and file-sharing data, to ensure secure storage and transfer in telehealth systems.",
    "Source": "Secure mobile telehealth systems must also allow for efficient storage and transfer of multimedia content. That is, they must encrypt all of the data to allow audio, video, and file sharing \\[24\\].",
    "Priority": "Not defined",
    "Rationale": "Encrypting multimedia content safeguards sensitive patient data and communication from unauthorized access, ensuring compliance with privacy and security standards for telehealth systems.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-033",
    "Parent PUIDs": "SECM-CAT-IPC-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must encrypt all multimedia content, including audio, video, and file-sharing data, to ensure secure storage and transfer in telehealth systems."
  },
  {
    "PUID": "SECM-CAT-IPC-033",
    "Requirement description": "The mobile health application must prevent the unintentional exposure of sensitive data (e.g., passwords, credit card details) through the user interface or screenshots. Mechanisms such as disabling screen capture or notifying users of security implications must be implemented.",
    "Source": "2.7: Verify that no sensitive data, such as passwords and credit card numbers, is exposed through the user interface or leaks to screenshots \\[19\\].  1.22. Disable screen capture for interfaces that contain sensitive data. If the platform does not support this option (e.g., iOS), notify the user about potential security implications of storing a screenshot in unprotected storage \\[16\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  MASVS-PLATFORM-3: The app uses the user interface securely: Sensitive data has to be displayed in the UI in many situations (e.g. passwords, credit card details, OTP codes in notifications). This control ensures that this data doesn't end up being unintentionally leaked due to platform mechanisms such as auto-generated screenshots or accidentally disclosed via e.g. shoulder surfing or sharing the device with another person \\[20\\].",
    "Priority": "Not defined",
    "Rationale": "Preventing sensitive data exposure through the user interface or screenshots reduces the risk of unintended data leakage, ensuring compliance with privacy requirements and safeguarding user information.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-034, SECM-CAT-IPC-035",
    "Parent PUIDs": "SECM-CAT-IPC-032",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must prevent the unintentional exposure of sensitive data (e.g., passwords, credit card details) through the user interface or screenshots. Mechanisms such as disabling screen capture or notifying users of security implications must be implemented."
  },
  {
    "PUID": "SECM-CAT-IPC-034",
    "Requirement description": "The mobile application must not use URL-embedded session IDs to ensure the security of session management. Session ID information must be securely transmitted via cookies or other secure mechanisms. Sensitive functionality must not be exposed via custom URL schemes unless robust protection measures are implemented.",
    "Source": "V-222581: Applications must not use URL embedded session IDs. Configure the application to transmit session ID information via cookies \\[15\\].  6.3: Verify that the app does not export sensitive functionality via custom URL schemes, unless these mechanisms are properly protected \\[19\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "URL-embedded session IDs can lead to session hijacking if the URLs are exposed in logs, browser history, or shared inadvertently. Transmitting session data via cookies ensures confidentiality and integrity, reducing the risk of unauthorized access. Protecting custom URL schemes prevents potential exploitation by malicious actors.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-036",
    "Parent PUIDs": "SECM-CAT-IPC-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must not use URL-embedded session IDs to ensure the security of session management. Session ID information must be securely transmitted via cookies or other secure mechanisms. Sensitive functionality must not be exposed via custom URL schemes unless robust protection measures are implemented."
  },
  {
    "PUID": "SECM-CAT-IPC-035",
    "Requirement description": "The mobile application must ensure that, when using JavaScript code running in the context of a file scheme URL, all unused platform-supported attributes are disabled. Specifically, the application must restrict access to content from other file scheme URLs and content from any origin unless explicitly required and securely implemented.",
    "Source": "12.3. In the case that the application uses JavaScript code running in the context of a file scheme URL, it is recommended to disable any unused platform supported attributes, such as accessing content from other file scheme URL and content from any origin \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Allowing unrestricted access to file scheme URLs or content from any origin increases the risk of unauthorized data access and exploitation of application vulnerabilities. Restricting such attributes minimizes the attack surface and enhances the security posture of the application.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure that, when using JavaScript code running in the context of a file scheme URL, all unused platform-supported attributes are disabled. Specifically, the application must restrict access to content from other file scheme URLs and content from any origin unless explicitly required and securely implemented."
  },
  {
    "PUID": "SECM-CAT-IPC-036",
    "Requirement description": "The mobile application must remove sensitive data from views when transitioning to the background. If the platform retains a screenshot of the visible screen in local storage during backgrounding (e.g., iOS), the application must either disable backgrounding or apply a blurred screen overlay to protect sensitive data.",
    "Source": "2.9: Verify that the app removes sensitive data from views when backgrounded \\[19\\].  1.23. Disable backgrounding or use a blurry screen when the application transitions to the background in platforms that maintain a screenshot of the visible screen in the local storage (e.g., iOS) \\[16\\].  Allow deactivation of running of the application in the background \\[25\\].",
    "Priority": "Not defined",
    "Rationale": "Sensitive data displayed on the screen when an application transitions to the background may be captured in screenshots or cached by the operating system. This increases the risk of unauthorized access and data leakage, particularly on shared or compromised devices.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-037",
    "Parent PUIDs": "SECM-CAT-IPC-034",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must remove sensitive data from views when transitioning to the background. If the platform retains a screenshot of the visible screen in local storage during backgrounding (e.g., iOS), the application must either disable backgrounding or apply a blurred screen overlay to protect sensitive data."
  },
  {
    "PUID": "SECM-CAT-IPC-037",
    "Requirement description": "The mobile application must exclude sensitive user interface elements from being accessed by custom accessibility applications, particularly on platforms like Android that support such permissions. Sensitive data must not be exposed through accessibility features.",
    "Source": "12.15. In platforms that support custom applications with accessibility permissions (e.g., Android), exclude sensitive user interface elements from being accessed by accessibility applications \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Accessibility services can potentially be exploited by malicious applications to extract sensitive information from user interface elements. Protecting sensitive data ensures compliance with privacy and security requirements, especially in healthcare applications where confidentiality is paramount.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-036",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must exclude sensitive user interface elements from being accessed by custom accessibility applications, particularly on platforms like Android that support such permissions. Sensitive data must not be exposed through accessibility features."
  },
  {
    "PUID": "SECM-CAT-IPC-038",
    "Requirement description": "The mobile application must ensure that passwords and cryptographic keys are not visible in any cache, application logs, or debug information to prevent unintended exposure of sensitive data.",
    "Source": "3.8. Ensure passwords and keys are not visible in cache or logs \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Storing sensitive information such as passwords and keys in logs or caches can lead to severe security risks if the data is exposed to unauthorized entities. This is particularly critical in healthcare applications where confidentiality is a priority.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-039",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must ensure that passwords and cryptographic keys are not visible in any cache, application logs, or debug information to prevent unintended exposure of sensitive data."
  },
  {
    "PUID": "SECM-CAT-IPC-039",
    "Requirement description": "The mobile application must require user re-authentication when transitioning from background to foreground if it contains sensitive data. Alternatively, the application must verify that the device is secured with a PIN, pattern, or password.",
    "Source": "2.17. For applications that contain sensitive data, is also recommended to request for user re-authentication when the application state changes to background or verify that the device is secured with PIN, pattern or password \\[16\\].",
    "Priority": "Not defined",
    "Rationale": "Re-authentication or device security verification ensures that unauthorized users cannot access sensitive data when the application is backgrounded and subsequently reopened. This mitigates the risk of unauthorized access due to unattended devices or session hijacking, especially in healthcare scenarios.",
    "Number of Children": "2",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-040, SECM-CAT-IPC-041",
    "Parent PUIDs": "SECM-CAT-IPC-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must require user re-authentication when transitioning from background to foreground if it contains sensitive data. Alternatively, the application must verify that the device is secured with a PIN, pattern, or password."
  },
  {
    "PUID": "SECM-CAT-IPC-040",
    "Requirement description": "The mobile application must enforce re-authentication for users and devices under organization-defined circumstances, such as privilege escalation, role changes, or after a defined time period. Dual authorization must be enforced for specific privileged commands or critical actions as required by organizational policies.",
    "Source": "V-222520: The application must require users to reauthenticate when organization-defined circumstances or situations require reauthentication. Configure the application to require reauthentication before user privilege is escalated and user roles are changed \\[15\\].  V-222521: The application must require devices to reauthenticate when organization-defined circumstances or situations requiring reauthentication. Configure the application to require reauthentication periodically \\[15\\].  IA-11 RE-AUTHENTICATION  Control: Require users to re-authenticate when \\[Assignment: organization-defined circumstances or situations requiring re-authentication\\].  Discussion: In addition to the re-authentication requirements associated with device locks, organizations may require re-authentication of individuals in certain situations, including when roles, authenticators or credentials change, when security categories of systems change, when the execution of privileged functions occurs, after a fixed time period, or periodically \\[11\\].  Control Enhancements:  \\(2\\) ACCESS ENFORCEMENT \\| DUAL AUTHORIZATION  Enforce dual authorization for \\[Assignment: organization-defined privileged commands and/or other organization-defined actions\\].  Discussion: Dual authorization, also known as two-person control, reduces risk related to insider threats. Dual authorization mechanisms require the approval of two authorized individuals to execute. To reduce the risk of collusion, organizations consider rotating dual authorization duties. Organizations consider the risk associated with implementing dual authorization mechanisms when immediate responses are necessary to ensure public and environmental safety \\[11\\].",
    "Priority": "Not defined",
    "Rationale": "Requiring re-authentication ensures the security of sensitive operations and prevents unauthorized privilege escalation or role changes. Dual authorization adds an additional layer of protection for critical operations, reducing the risk of insider threats and unauthorized actions in healthcare applications.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-039",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must enforce re-authentication for users and devices under organization-defined circumstances, such as privilege escalation, role changes, or after a defined time period. Dual authorization must be enforced for specific privileged commands or critical actions as required by organizational policies."
  },
  {
    "PUID": "SECM-CAT-IPC-041",
    "Requirement description": "The mobile application must inspect custom notifications for sensitive content and provide users with the ability to disable notifications or hide sensitive information within notification content.",
    "Source": "V-222520: The application must require users to reauthenticate when organization-defined circumstances or situations require reauthentication. Configure the application to require reauthentication before user privilege is escalated and user roles are changed \\[15\\].  V-222521: The application must require devices to reauthenticate when organization-defined circumstances or situations requiring reauthentication. Configure the application to require reauthentication periodically \\[15\\].  IA-11 RE-AUTHENTICATION  Control: Require users to re-authenticate when \\[Assignment: organization-defined circumstances or situations requiring re-authentication\\].  Discussion: In addition to the re-authentication requirements associated with device locks, organizations may require re-authentication of individuals in certain situations, including when roles, authenticators or credentials change, when security categories of systems change, when the execution of privileged functions occurs, after a fixed time period, or periodically \\[11\\].  Control Enhancements:  \\(2\\) ACCESS ENFORCEMENT \\| DUAL AUTHORIZATION  Enforce dual authorization for \\[Assignment: organization-defined privileged commands and/or other organization-defined actions\\].  Discussion: Dual authorization, also known as two-person control, reduces risk related to insider threats. Dual authorization mechanisms require the approval of two authorized individuals to execute. To reduce the risk of collusion, organizations consider rotating dual authorization duties. Organizations consider the risk associated with implementing dual authorization mechanisms when immediate responses are necessary to ensure public and environmental safety \\[11\\].",
    "Priority": "Not defined",
    "Rationale": "Notifications may unintentionally expose sensitive information to unauthorized individuals. Allowing users to manage notification settings enhances privacy and reduces the risk of sensitive data leakage in healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IPC-042",
    "Parent PUIDs": "SECM-CAT-IPC-039",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must inspect custom notifications for sensitive content and provide users with the ability to disable notifications or hide sensitive information within notification content."
  },
  {
    "PUID": "SECM-CAT-IPC-042",
    "Requirement description": "The mobile health application must inform users about the confidentiality of personal health information (PHI) accessed or processed by the system. This includes displaying confidentiality notices at login, labeling hardcopy outputs containing PHI as confidential, and providing clear privacy policies in compliance with applicable privacy regulations.",
    "Source": "8.2.2 Labelling of Information: All health information systems processing personal health information should inform users of the confidentiality of personal health information accessible from the system (e.g. at start-up or log-in) and should label hardcopy output as confidential when it contains personal health information \\[7\\].  2.12: Verify that the app educates the user about the types of personally identifiable information processed, as well as security best practices the user should follow in using the app \\[19\\].  Compliance with Privacy Regulations: If personal information is accessed, the application must provide a clear privacy policy detailing the use and storage of that data, in accordance with jurisdictional requirements \\[18\\].",
    "Priority": "Not defined",
    "Rationale": "Ensuring that users are aware of the sensitive nature of PHI reinforces the importance of secure handling and compliance with jurisdictional privacy laws. Educating users and appropriately labeling data reduces the risk of unintentional disclosure or misuse.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IPC-041",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must inform users about the confidentiality of personal health information (PHI) accessed or processed by the system. This includes displaying confidentiality notices at login, labeling hardcopy outputs containing PHI as confidential, and providing clear privacy policies in compliance with applicable privacy regulations."
  },
  {
    "PUID": "SECM-CAT-IBP-001",
    "Requirement description": "The mobile health application installation package must be digitally signed using FIPS 186-3 approved methods or equivalent. The app must ensure only signed and provisioned packages are installed, preventing unsigned patches or service packs. Additionally, a cryptographic hash value must be provided for administrator verification before installation.",
    "Source": "SRG-APP-000516-MAPP-000078: Unless the MOS manages app signing, the mobile app installation package must be digitally signed in accordance with FIPS 186-3 approved methods \\[17\\].  7.1: Verify that the app is signed and provisioned with valid certificate \\[19\\].  The application must have the capability to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.  Design and configure the application to have the capability to prevent unsigned patches and packages from being installed.  Provide a cryptographic hash value that can be verified by a system administrator prior to installation \\[15\\].",
    "Priority": "Not defined",
    "Rationale": "Digital signing ensures the integrity and authenticity of the application installation package, preventing unauthorized or malicious modifications. This measure is critical in safeguarding the app from tampered or rogue installations, maintaining trustworthiness in health applications that handle sensitive data.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-002",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application installation package must be digitally signed using FIPS 186-3 approved methods or equivalent. The app must ensure only signed and provisioned packages are installed, preventing unsigned patches or service packs. Additionally, a cryptographic hash value must be provided for administrator verification before installation."
  },
  {
    "PUID": "SECM-CAT-IBP-002",
    "Requirement description": "The mobile health application must implement mechanisms to detect and handle interactions from modified or tampered app binaries. The app must verify its code integrity at runtime and react to integrity violations by preventing unauthorized modifications and safeguarding data.",
    "Source": "Protection Against Tampered Versions: The system must ensure that interactions from modified or tampered app binaries are identified and handled securely to protect app functionality and data \\[18\\].  React in case of a code integrity violation preventing it being modified \\[25\\].",
    "Priority": "Not defined",
    "Rationale": "Detecting and addressing tampered app binaries is essential to maintaining the security and integrity of health applications. Tampering can lead to unauthorized data access, compromised functionality, and breaches of sensitive health information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-003",
    "Parent PUIDs": "SECM-CAT-IBP-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement mechanisms to detect and handle interactions from modified or tampered app binaries. The app must verify its code integrity at runtime and react to integrity violations by preventing unauthorized modifications and safeguarding data."
  },
  {
    "PUID": "SECM-CAT-IBP-003",
    "Requirement description": "The mobile health application must ensure that all debugging symbols and verbose logging or debugging messages are removed from production builds. Native binaries should not include debugging symbols, and the app must not generate verbose error messages that expose sensitive information.",
    "Source": "7.4: Verify that debugging code has been removed, and the app does not log verbose errors or debugging messages \\[19\\].  7.3: Verify that debugging symbols have been removed from native binaries \\[19\\].",
    "Priority": "Not defined",
    "Rationale": "Removing debugging symbols and verbose logs is critical to prevent attackers from gaining insights into the application\\'s internal workings, which could be exploited to compromise sensitive health data or application functionality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-004",
    "Parent PUIDs": "SECM-CAT-IBP-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that all debugging symbols and verbose logging or debugging messages are removed from production builds. Native binaries should not include debugging symbols, and the app must not generate verbose error messages that expose sensitive information."
  },
  {
    "PUID": "SECM-CAT-IBP-004",
    "Requirement description": "The mobile health application must be built in release mode for production deployment. The build settings must ensure that the app is non-debuggable and optimized for security, with all debug-related functionalities disabled.",
    "Source": "7.2: Verify that the app has been built in release mode, with settings appropriate for a release build (e.g. non-debuggable) \\[19\\].",
    "Priority": "Not defined",
    "Rationale": "Building the app in release mode ensures that unnecessary debugging functionalities are removed, reducing the risk of attackers exploiting debug features or extracting sensitive information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-005",
    "Parent PUIDs": "SECM-CAT-IBP-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must be built in release mode for production deployment. The build settings must ensure that the app is non-debuggable and optimized for security, with all debug-related functionalities disabled."
  },
  {
    "PUID": "SECM-CAT-IBP-005",
    "Requirement description": "The mobile health application must implement robust error handling mechanisms to prevent error handling vulnerabilities. Proper return codes and exception handling must be implemented throughout the application to ensure secure and predictable behavior during runtime anomalies.",
    "Source": "V-222656: The application must not be subject to error handling vulnerabilities. Ensure proper return code and exception handling is implemented throughout the application \\[15\\].  7.5: Verify that the app catches and handles possible exceptions \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Proper error handling ensures that exceptions and errors do not expose sensitive data or compromise the application\\'s security. It mitigates risks such as unhandled exceptions leading to crashes, information leakage, or undefined application behavior.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-006",
    "Parent PUIDs": "SECM-CAT-IBP-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement robust error handling mechanisms to prevent error handling vulnerabilities. Proper return codes and exception handling must be implemented throughout the application to ensure secure and predictable behavior during runtime anomalies."
  },
  {
    "PUID": "SECM-CAT-IBP-006",
    "Requirement description": "The mobile health application must prioritize the use of the Android SDK over native code to enhance security, portability, and maintainability. Where native code is necessary, memory corruption vulnerabilities such as buffer overflows must be mitigated through memory protection techniques like data execution prevention (DEP) and address space layout randomization (ASLR). Static analysis tools must be employed during the development process to detect and remediate memory management issues.",
    "Source": "Prefer Android SDK over Native Code: The application must prioritize using the Android SDK for development. Native code should be avoided unless absolutely necessary due to its complexity, lack of portability, and susceptibility to memory-corruption errors like buffer overflows \\[18\\]  12.13. Protect from memory corruptions in applications that are developed using a programming language which supports explicit memory management (e.g., Objective-C, C, C++). Perform static analysis for memory management vulnerabilities in the development process \\[16\\].  SI-16 MEMORY PROTECTION  Control: Implement the following controls to protect the system memory from unauthorized code execution: \\[Assignment: organization-defined controls\\].  Discussion: Some adversaries launch attacks with the intent of executing code in non-executable regions of memory or in memory locations that are prohibited. Controls employed to protect memory include data execution prevention and address space layout randomization. Data execution prevention controls can either be hardware-enforced or software-enforced with hardware enforcement providing the greater strength of mechanism \\[11\\].",
    "Priority": "Not described",
    "Rationale": "The use of native code introduces increased risks of memory-corruption vulnerabilities and reduces portability across devices. Leveraging the Android SDK simplifies development, enhances security, and minimizes the attack surface. Memory protection mechanisms and rigorous static analysis further safeguard the application from unauthorized code execution.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-007",
    "Parent PUIDs": "SECM-CAT-IBP-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must prioritize the use of the Android SDK over native code to enhance security, portability, and maintainability. Where native code is necessary, memory corruption vulnerabilities such as buffer overflows must be mitigated through memory protection techniques like data execution prevention (DEP) and address space layout randomization (ASLR). Static analysis tools must be employed during the development process to detect and remediate memory management issues."
  },
  {
    "PUID": "SECM-CAT-IBP-007",
    "Requirement description": "The mobile health application must ensure that all permissions are explicitly declared and managed according to the Android permission model, even when utilizing native code. Developers must adhere to Linux security practices, such as the Secure Programming Guidelines, to mitigate risks associated with memory handling, file operations, and processing external inputs in a native code environment.",
    "Source": "Application Permissions: Native code must comply with the Android permission model. All permissions must be explicitly declared and managed within the app, even if the application primarily uses native code.  Linux Development Best Practices: Developers using native code must be familiar with Linux security practices, including Secure Programming Guidelines (e.g., Secure Programming HOWTO). These practices help mitigate risks when handling memory, files, and external inputs in a native code environment. \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Explicitly managing permissions within the Android framework ensures transparency and prevents unauthorized access to sensitive data or device features. Adhering to secure programming practices in native code environments reduces vulnerabilities, such as improper memory management and file handling, which could compromise application security and patient data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-008",
    "Parent PUIDs": "SECM-CAT-IBP-006",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that all permissions are explicitly declared and managed according to the Android permission model, even when utilizing native code. Developers must adhere to Linux security practices, such as the Secure Programming Guidelines, to mitigate risks associated with memory handling, file operations, and processing external inputs in a native code environment."
  },
  {
    "PUID": "SECM-CAT-IBP-008",
    "Requirement description": "The mobile health application must ensure that the final build does not include source code, unreferenced code, or subroutines that are never invoked during operation. Exceptions are allowed only for software components and libraries from approved third-party products explicitly required for the application's functionality.",
    "Source": "SRG-APP-000141-MAPP-000031: The mobile app must not include source code, unreferenced code or subroutines that are never invoked during operation, except for software components and libraries from approved third-party products \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Eliminating unused and unreferenced code reduces the attack surface, improves application performance, and minimizes the risk of vulnerabilities arising from outdated or unnecessary components. This ensures a secure, lean, and efficient application suitable for handling sensitive health data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-009",
    "Parent PUIDs": "SECM-CAT-IBP-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that the final build does not include source code, unreferenced code, or subroutines that are never invoked during operation. Exceptions are allowed only for software components and libraries from approved third-party products explicitly required for the application's functionality."
  },
  {
    "PUID": "SECM-CAT-IBP-009",
    "Requirement description": "The mobile health application must not load code from outside the APK package to prevent vulnerabilities such as code injection or tampering. Dynamically loaded code must comply with platform-specific and regulatory restrictions, ensuring strict version control, testing, and security verification.",
    "Source": "Avoid External Code Loading: The application must not load code from outside the APK package to prevent security vulnerabilities such as code injection and tampering. Loading external code increases the complexity of testing, version management, and security verification \\[18\\].  Compliance Considerations: Applications must adhere to any regulatory or platform-specific restrictions regarding dynamically loaded code. Environments that require strict application behavior verification might prohibit dynamic code loading altogether \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Avoiding external code loading minimizes the risk of malicious code execution, unauthorized modifications, and compliance violations. It ensures the application operates predictably, maintaining the integrity of its functionality and safeguarding sensitive health data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-010",
    "Parent PUIDs": "SECM-CAT-IBP-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must not load code from outside the APK package to prevent vulnerabilities such as code injection or tampering. Dynamically loaded code must comply with platform-specific and regulatory restrictions, ensuring strict version control, testing, and security verification."
  },
  {
    "PUID": "SECM-CAT-IBP-010",
    "Requirement description": "The mobile health application must mitigate SQL injection vulnerabilities by using parameterized queries and prepared statements for all database operations. User input must be validated and sanitized to prevent the injection of unauthorized SQL commands. Concatenation of user data into SQL queries is strictly prohibited.",
    "Source": "V-222607: The application must not be vulnerable to SQL Injection. Modify the application and remove SQL injection vulnerabilities \\[15\\].  Preventing SQL Injection: All queries, updates, and deletions must be performed using parameterized query methods (query(), update(), delete()) to avoid SQL injection risks. Concatenation of user data into SQL statements is prohibited to prevent injection vulnerabilities \\[18\\].  Avoid simple exploits such as SQL injection \\[25\\].  Improper Neutralization of Special Elements used in an SQL Command (\\'SQL Injection\\')  The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. It is related to SQL Injection \\[35\\].  12.12. Mitigate SQL injections, local file inclusion, JavaScript injections, XML injections. When dealing with dynamic queries (e.g., SQL queries with untrusted inputs) or Content-Providers ensure you are using parameterized queries. Always validate user provided inputs that will be used for file accessing purposes or as part of a dynamic code execution. Use a vetted framework for XML operations \\[16\\].  Protection Against SQL Injection: The application must use parameterized queries for all database operations to prevent SQL injection attacks. Permissions for database access must be limited to read-only or write-only as appropriate, to minimize potential harm from SQL injection vulnerabilities \\[35\\].  MASVS-CODE-4: The app validates and sanitizes all untrusted inputs: Apps have many data entry points including the UI, IPC, the network, the file system, etc. This incoming data might have been inadvertently modified by untrusted actors and may lead to bypass of critical security checks as well as classical injection attacks such as SQL injection, XSS or insecure deserialization. This control ensures that this data is treated as untrusted input and is properly verified and sanitized before it's used \\[20\\]  Secure Coding Practices: 1. Follow secure coding practices, such as using parameterized queries and prepared statements to prevent SQL injection \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Preventing SQL injection is critical to protecting sensitive health data stored in application databases. SQL injection exploits can lead to unauthorized data access, corruption, or deletion, undermining the application\\'s integrity and confidentiality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-011",
    "Parent PUIDs": "SECM-CAT-IBP-009",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must mitigate SQL injection vulnerabilities by using parameterized queries and prepared statements for all database operations. User input must be validated and sanitized to prevent the injection of unauthorized SQL commands. Concatenation of user data into SQL queries is strictly prohibited."
  },
  {
    "PUID": "SECM-CAT-IBP-011",
    "Requirement description": "The mobile health application must mitigate command injection vulnerabilities by validating and sanitizing all user inputs before executing any system or OS commands. Input filtering must escape or neutralize special characters that could be exploited to alter the intended behavior of commands.",
    "Source": "V-222604: The application must protect from command injection. Modify the application so as to escape/sanitize special character input or configure the system to protect against command injection attacks based on application architecture \\[15\\].  CWE-78 Improper Neutralization of Special Elements used in an OS Command (\\'OS Command Injection\\')  The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. It is related to command injection in OS. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input \\[35\\].  10.1. Filter user data passed to interpreters.\\[16\\].  CWE-94: Improper Control of Generation of Code (\\'Code Injection\\')  The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment \\[35\\].  V-222606: The application must validate all input. Design and configure the application to validate input prior to executing commands \\[15\\].  CWE-77: Improper Neutralization of Special Elements used in a Command (\\'Command Injection\\')  The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.  Command injection vulnerabilities typically occur when:  1\\. Data enters the application from an untrusted source.  2\\. The data is part of a string that is executed as a command by the application.  3\\. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.  Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks. Command injection is a common problem with wrapper programs \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Command injection vulnerabilities allow attackers to execute unauthorized commands within the system, leading to potential data breaches, system compromise, or unauthorized access to sensitive resources. Proper validation and sanitization of inputs are critical to ensuring the application\\'s security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-012",
    "Parent PUIDs": "SECM-CAT-IBP-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must mitigate command injection vulnerabilities by validating and sanitizing all user inputs before executing any system or OS commands. Input filtering must escape or neutralize special characters that could be exploited to alter the intended behavior of commands."
  },
  {
    "PUID": "SECM-CAT-IBP-012",
    "Requirement description": "The mobile health application must implement validation and error-handling mechanisms to prevent null pointer dereference vulnerabilities, ensuring that all pointers are checked for null values before dereferencing.",
    "Source": "CWE-476: NULL Pointer Dereference: A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Null pointer dereference vulnerabilities can cause application crashes, denial of service, or unexpected behavior, impacting the reliability and security of the application. Proper validation of pointers helps maintain system stability and prevents exploitation.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-013",
    "Parent PUIDs": "SECM-CAT-IBP-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement validation and error-handling mechanisms to prevent null pointer dereference vulnerabilities, ensuring that all pointers are checked for null values before dereferencing."
  },
  {
    "PUID": "SECM-CAT-IBP-013",
    "Requirement description": "The mobile health application must implement replay-resistant authentication mechanisms for both privileged and non-privileged accounts to prevent unauthorized access through replay attacks.",
    "Source": "V-222530: The application must implement replay-resistant authentication mechanisms for network access to privileged accounts. Design and configure the application to utilize replay-resistant mechanisms when authenticating privileged accounts \\[15\\].  V-222531: The application must implement replay-resistant authentication mechanisms for network access to non-privileged accounts. Design and configure the application to utilize replay-resistant mechanisms when authenticating non-privileged accounts \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Replay attacks can compromise account security by capturing and reusing authentication credentials. Replay-resistant mechanisms ensure secure authentication by using unique, time-sensitive tokens or nonces, safeguarding sensitive user data and application resources.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-014",
    "Parent PUIDs": "SECM-CAT-IBP-012",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement replay-resistant authentication mechanisms for both privileged and non-privileged accounts to prevent unauthorized access through replay attacks."
  },
  {
    "PUID": "SECM-CAT-IBP-014",
    "Requirement description": "The mobile health application must implement rate-limiting mechanisms for authentication and authorization requests to prevent brute-force attacks. This includes account lockouts, CAPTCHAs, or additional user verification measures after multiple failed login attempts.",
    "Source": "Limit Authentication Rates: Implement rate-limiting for authentication and authorization requests to prevent brute-force attacks, balancing security with app usability \\[18\\].  9.4.2 Secure log-on procedures: e) protect against brute force log-on attempts; \\[7\\]  2.5. Introduce a bruteforce protection mechanism for the authentication controls (e.g., password change/reset). Consider enforcing account lockout for a specific duration, extended questions about the user, notifying the user through another channel and completely automated public Turing tests (captcha) in case of multiple failed attempts \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Brute-force attacks target authentication systems to gain unauthorized access by systematically trying combinations of credentials. Rate-limiting mechanisms and lockout policies mitigate these risks, enhancing application security while maintaining usability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-015",
    "Parent PUIDs": "SECM-CAT-IBP-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement rate-limiting mechanisms for authentication and authorization requests to prevent brute-force attacks. This includes account lockouts, CAPTCHAs, or additional user verification measures after multiple failed login attempts."
  },
  {
    "PUID": "SECM-CAT-IBP-015",
    "Requirement description": "The mobile health application must disable interaction events when the app interface is obscured by another layer to prevent tapjacking attacks. This ensures that users do not unknowingly interact with hidden views or unauthorized overlays.",
    "Source": "12.4. Prevent interaction events when the application is obscured by another interface in the presentation layer in order to mitigate tapjacking attacks. By disabling the application interaction events, the possibility of a user interacting with a hidden view is eliminated. \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Tapjacking attacks trick users into interacting with hidden or malicious UI elements, potentially compromising sensitive data or app functionality. Disabling interactions when the app is obscured eliminates this risk, enhancing user security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-016",
    "Parent PUIDs": "SECM-CAT-IBP-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must disable interaction events when the app interface is obscured by another layer to prevent tapjacking attacks. This ensures that users do not unknowingly interact with hidden views or unauthorized overlays."
  },
  {
    "PUID": "SECM-CAT-IBP-016",
    "Requirement description": "The mobile health application must implement secure coding practices to prevent vulnerabilities such as buffer overflows, including the use of secure functions and careful handling of native code. Functions and code paths vulnerable to overflow attacks must be identified and replaced with secure alternatives.",
    "Source": "V-222612: The application must not be vulnerable to overflow attacks \\[15\\].  SRG-APP-000516-MAPP-000069: The mobile app must not call functions vulnerable to buffer overflows \\[17\\].  Use secure functions to prevent buffer overflow \\[25\\].  Handling Native Code: When using native code, the application must ensure that all data handling is performed carefully to prevent vulnerabilities such as buffer overflows, use-after-free errors, and off-by-one errors \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Buffer overflow vulnerabilities can lead to unauthorized access, application crashes, or arbitrary code execution, posing a significant security risk in mobile health applications. Proactively mitigating these vulnerabilities ensures data protection and application stability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-017",
    "Parent PUIDs": "SECM-CAT-IBP-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement secure coding practices to prevent vulnerabilities such as buffer overflows, including the use of secure functions and careful handling of native code. Functions and code paths vulnerable to overflow attacks must be identified and replaced with secure alternatives."
  },
  {
    "PUID": "SECM-CAT-IBP-017",
    "Requirement description": "The mobile health application must ensure that all calculations and operations involving integers are securely implemented to prevent integer overflows or wraparounds. This includes validating input ranges and employing safe arithmetic operations to mitigate risks.",
    "Source": "CWE-190: Integer Overflow or Wraparound  The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Integer overflows can lead to critical vulnerabilities, including incorrect resource allocation, logic errors, and potential execution of unauthorized operations. Secure handling of integer operations ensures application integrity and reliability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-018",
    "Parent PUIDs": "SECM-CAT-IBP-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that all calculations and operations involving integers are securely implemented to prevent integer overflows or wraparounds. This includes validating input ranges and employing safe arithmetic operations to mitigate risks."
  },
  {
    "PUID": "SECM-CAT-IBP-018",
    "Requirement description": "The mobile health application must prevent vulnerabilities arising from race conditions by implementing proper synchronization mechanisms. All shared resources accessed by concurrent processes or threads must be protected to ensure consistency and integrity during execution.",
    "Source": "V-222567: The application must not be vulnerable to race conditions. Be aware of potential timing issues related to application programming calls when designing and building the application. Validate those variable values do not change while a switch event is occurring \\[15\\].  CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization (\\'Race Condition\\'): The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Race conditions can lead to unpredictable behavior, security vulnerabilities, and data corruption by allowing concurrent processes to modify shared resources without proper synchronization. Secure programming practices mitigate these risks and ensure stable application performance.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-019",
    "Parent PUIDs": "SECM-CAT-IBP-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must prevent vulnerabilities arising from race conditions by implementing proper synchronization mechanisms. All shared resources accessed by concurrent processes or threads must be protected to ensure consistency and integrity during execution."
  },
  {
    "PUID": "SECM-CAT-IBP-019",
    "Requirement description": "The mobile health application must implement strict bounds checking for all memory operations to prevent out-of-bounds reads and writes. This includes validating buffer sizes, performing pointer arithmetic safely, and avoiding memory access outside the allocated boundaries. Proper error handling and memory management practices must also be enforced to prevent memory corruption vulnerabilities.",
    "Source": "CWE-787 Out-of-bounds Write  The product writes data past the end, or before the beginning, of the intended buffer.  Typically, this can result in corruption of data, a crash, or code execution. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results.  Memory Corruption:  Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is invalid, when the root cause is something other than a sequential copy of excessive data from a fixed starting location. This may include issues such as incorrect pointer arithmetic, accessing invalid pointers due to incomplete initialization or memory release, etc \\[35\\].  CWE-125: Out-of-bounds Read  The product reads data past the end, or before the beginning, of the intended buffer.  Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results \\[35\\].  CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer  The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Out-of-bounds memory operations, such as reads or writes, can lead to data corruption, crashes, unauthorized code execution, or leaks of sensitive information. Adhering to secure memory management practices ensures application stability, security, and user data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-020",
    "Parent PUIDs": "SECM-CAT-IBP-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement strict bounds checking for all memory operations to prevent out-of-bounds reads and writes. This includes validating buffer sizes, performing pointer arithmetic safely, and avoiding memory access outside the allocated boundaries. Proper error handling and memory management practices must also be enforced to prevent memory corruption vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-IBP-020",
    "Requirement description": "The mobile health application must leverage Android\\'s security features, such as Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP), to protect against memory corruption vulnerabilities. Input validation and safe memory management practices must also be implemented to mitigate issues such as use-after-free errors and other memory handling flaws.",
    "Source": "Handling Native Code: The application must utilize Android\\'s security technologies, including Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP), while still addressing the underlying input validation issues \\[18\\].  CWE-416 Use After Free: Avoid referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.  The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system\\'s reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:  Error conditions and other exceptional circumstances.  Confusion over which part of the program is responsible for freeing the memory.  In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.  If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Memory corruption vulnerabilities, including use-after-free errors, can lead to crashes, unauthorized code execution, or unexpected application behavior. Leveraging Android\\'s built-in security mechanisms and adhering to secure coding practices reduces the risk of exploitation and enhances application robustness.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-021",
    "Parent PUIDs": "SECM-CAT-IBP-019",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must leverage Android\\'s security features, such as Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP), to protect against memory corruption vulnerabilities. Input validation and safe memory management practices must also be implemented to mitigate issues such as use-after-free errors and other memory handling flaws."
  },
  {
    "PUID": "SECM-CAT-IBP-021",
    "Requirement description": "The mobile health application must adhere to secure memory management best practices when using native code. This includes preventing vulnerabilities such as buffer overflows, use-after-free errors, and memory leaks through careful coding, testing, and adherence to platform-specific security guidelines.",
    "Source": "Memory Management Best Practices: When native code is necessary, developers must follow best practices for secure memory management to prevent common vulnerabilities such as buffer overflows, use-after-free errors, and memory leaks \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Improper memory management can lead to severe security vulnerabilities, including crashes, unauthorized code execution, or data corruption. Following secure memory management practices ensures application stability and protects sensitive health information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-022",
    "Parent PUIDs": "SECM-CAT-IBP-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must adhere to secure memory management best practices when using native code. This includes preventing vulnerabilities such as buffer overflows, use-after-free errors, and memory leaks through careful coding, testing, and adherence to platform-specific security guidelines."
  },
  {
    "PUID": "SECM-CAT-IBP-022",
    "Requirement description": "The mobile health application must implement safeguards to prevent vulnerabilities related to integer arithmetic, such as integer overflows, underflows, or wraparounds. These issues can lead to incorrect calculations, resource mismanagement, or security vulnerabilities.",
    "Source": "Memory Management Best Practices: When native code is necessary, developers must follow best practices for secure memory management to prevent common vulnerabilities such as buffer overflows, use-after-free errors, and memory leaks \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Integer arithmetic vulnerabilities can cause critical security and functional issues in mobile health applications. These include data corruption, crashes, and potential exploits, compromising the application\\'s reliability and user safety.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-023",
    "Parent PUIDs": "SECM-CAT-IBP-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement safeguards to prevent vulnerabilities related to integer arithmetic, such as integer overflows, underflows, or wraparounds. These issues can lead to incorrect calculations, resource mismanagement, or security vulnerabilities."
  },
  {
    "PUID": "SECM-CAT-IBP-023",
    "Requirement description": "The mobile health application must avoid using API calls that enable bridging between dynamic code (e.g., JavaScript) and native code (e.g., Objective-C or Kotlin). This prevents potential security vulnerabilities where injection attacks in the dynamic code could lead to unauthorized execution of native code.",
    "Source": "12.2. Avoid using API calls that provide bridging of dynamic code (e.g., JavaScript) with native code (e.g., Objective-C) since an injection in the dynamic code will lead to native code execution \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Bridging dynamic and native code increases the risk of security vulnerabilities, as malicious code injected into the dynamic layer can exploit the native execution environment. For health applications, this can compromise sensitive data and critical functionality, violating regulatory compliance and user trust.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-024",
    "Parent PUIDs": "SECM-CAT-IBP-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must avoid using API calls that enable bridging between dynamic code (e.g., JavaScript) and native code (e.g., Objective-C or Kotlin). This prevents potential security vulnerabilities where injection attacks in the dynamic code could lead to unauthorized execution of native code."
  },
  {
    "PUID": "SECM-CAT-IBP-024",
    "Requirement description": "The mobile health application must ensure that any dynamically loaded code inherits the same security permissions as the application and maintains user trust by adhering to the application's defined security policies. All dynamically loaded components must be secure, validated, and aligned with the permissions granted to the application.",
    "Source": "Permissions and Trust Model: If dynamically loaded code is required, it must be noted that such code will run with the same security permissions as the application itself. The user's trust in the application applies to any code executed within it, including dynamically loaded components. \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Dynamically loaded code operates under the same security context as the main application, which means any vulnerabilities or malicious behavior in such code could exploit the application's permissions. For mobile health applications, this can lead to unauthorized access to sensitive data, breach of user trust, and regulatory violations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-025",
    "Parent PUIDs": "SECM-CAT-IBP-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that any dynamically loaded code inherits the same security permissions as the application and maintains user trust by adhering to the application's defined security policies. All dynamically loaded components must be secure, validated, and aligned with the permissions granted to the application."
  },
  {
    "PUID": "SECM-CAT-IBP-025",
    "Requirement description": "The mobile health application must ensure that dynamically executed code is loaded exclusively from secure, verified sources. Code from insecure sources, such as unencrypted network transmissions or world-writable locations like external storage, must not be loaded to mitigate risks of unauthorized access or malicious code execution.",
    "Source": "Source of Loaded Code: The application must only load dynamically executed code from secure, verified sources. It must not load code from insecure sources like unencrypted network transmissions or world-writable locations (e.g., external storage). \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Loading code from insecure sources exposes mobile health applications to risks like unauthorized modifications, malicious injections, and potential exploitation. For healthcare applications, such vulnerabilities can compromise sensitive health data and breach user trust, making it essential to restrict dynamically loaded code to verified and secure origins.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-026",
    "Parent PUIDs": "SECM-CAT-IBP-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that dynamically executed code is loaded exclusively from secure, verified sources. Code from insecure sources, such as unencrypted network transmissions or world-writable locations like external storage, must not be loaded to mitigate risks of unauthorized access or malicious code execution."
  },
  {
    "PUID": "SECM-CAT-IBP-026",
    "Requirement description": "The mobile health application must ensure that any dynamically loaded code is transmitted over secure, encrypted channels (e.g., HTTPS) and stored in tamper-proof locations to prevent unauthorized access or modification by other applications or users.",
    "Source": "Secure Transmission and Storage: If code must be downloaded, ensure that it is transmitted over secure, encrypted channels (e.g., HTTPS) and stored in locations that are protected from tampering by other applications or users. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Insecure transmission and storage of dynamically loaded code can expose mobile health applications to risks such as tampering, unauthorized access, or the introduction of malicious code. Ensuring secure channels and protected storage locations mitigates these risks, safeguarding sensitive health data and maintaining application integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-027",
    "Parent PUIDs": "SECM-CAT-IBP-025",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that any dynamically loaded code is transmitted over secure, encrypted channels (e.g., HTTPS) and stored in tamper-proof locations to prevent unauthorized access or modification by other applications or users."
  },
  {
    "PUID": "SECM-CAT-IBP-027",
    "Requirement description": "The mobile health application must package dynamically loaded modules directly within the APK whenever feasible. These modules should be implemented as native libraries or classes loaded using DexClassLoader to prevent tampering or alteration by external applications.",
    "Source": "Internal Code Modules: Whenever possible, dynamically loaded modules must be packaged directly within the APK to prevent tampering. Modules should be either native libraries or classes loaded using DexClassLoader, ensuring they cannot be altered by external applications. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Dynamically loaded modules sourced externally increase the risk of tampering and unauthorized modification, which could compromise sensitive health data and application functionality. Packaging these modules within the APK ensures their integrity and reduces the risk of external interference.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-028",
    "Parent PUIDs": "SECM-CAT-IBP-026",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must package dynamically loaded modules directly within the APK whenever feasible. These modules should be implemented as native libraries or classes loaded using DexClassLoader to prevent tampering or alteration by external applications."
  },
  {
    "PUID": "SECM-CAT-IBP-028",
    "Requirement description": "The mobile health application must ensure that no sensitive data, such as location or other private information, is unintentionally transferred between the mobile device and web-server backends or other external interfaces. This includes data embedded within file metadata.",
    "Source": "5.1. Carry out a specific check of your code for sensitive data unintentionally transferred between the mobile device and web-server back-ends and other external interfaces - (e.g., is location or other information transferred within file metadata) \\[16\\]",
    "Priority": "Not described",
    "Rationale": "Unintentional transfer of sensitive data can expose users to privacy risks, including unauthorized access to location information or personal data stored within file metadata. Ensuring secure data transmission protects patient confidentiality and complies with healthcare data protection standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-029",
    "Parent PUIDs": "SECM-CAT-IBP-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that no sensitive data, such as location or other private information, is unintentionally transferred between the mobile device and web-server backends or other external interfaces. This includes data embedded within file metadata."
  },
  {
    "PUID": "SECM-CAT-IBP-029",
    "Requirement description": "The mobile health application must implement robust anti-static analysis mechanisms, including code obfuscation, to impede reverse engineering. This includes using obfuscation tools, compiling natively when feasible, and ensuring that obfuscation balances complexity with operational correctness of dependent features.",
    "Source": "MASVS-RESILIENCE-3: The app implements anti-static analysis mechanisms: Understanding the internals of an app is typically the first step towards tampering with it (either dynamically, or statically). This control tries to impede comprehension by making it as difficult as possible to figure out how an app works using static analysis \\[20\\].  Avoid reverse engineering of the application, \\\"obfuscating\\\" the app code \\[25\\].  Binary code obfuscation: 1. The system must allow the application's binary code to be obfuscated, making it incomprehensible to prevent reverse engineering. Obfuscation tools should be used, and when possible, applications should be compiled natively or use interpreters or nested virtual machines \\[3\\].  Balance in code obfuscation: 1. Obfuscation must strike a balance between code complexity and robustness against reverse engineering, ensuring that libraries and features dependent on certain strings or symbols in the code operate correctly \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Preventing reverse engineering enhances application resilience by making it difficult for attackers to understand its internal workings. This protects sensitive logic, API keys, and intellectual property, while maintaining the functionality of libraries and dependencies critical to the app\\'s operation.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-030",
    "Parent PUIDs": "SECM-CAT-IBP-028",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement robust anti-static analysis mechanisms, including code obfuscation, to impede reverse engineering. This includes using obfuscation tools, compiling natively when feasible, and ensuring that obfuscation balances complexity with operational correctness of dependent features."
  },
  {
    "PUID": "SECM-CAT-IBP-030",
    "Requirement description": "The mobile health application must ensure that memory in unmanaged code is securely allocated, used, and freed to prevent vulnerabilities such as memory leaks, use-after-free errors, and buffer overflows.",
    "Source": "7.7: Verify that in unmanaged code, memory is allocated, freed and used securely \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Proper memory management is essential in unmanaged code to ensure application stability and security. Incorrect memory handling can lead to critical vulnerabilities such as crashes, data corruption, or exploitation by attackers, compromising the application\\'s reliability and user data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-031",
    "Parent PUIDs": "SECM-CAT-IBP-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that memory in unmanaged code is securely allocated, used, and freed to prevent vulnerabilities such as memory leaks, use-after-free errors, and buffer overflows."
  },
  {
    "PUID": "SECM-CAT-IBP-031",
    "Requirement description": "The mobile health application must integrate with the Play Integrity API to ensure that interactions and server requests originate from a legitimate, untampered app binary running on a genuine Android device.",
    "Source": "Play Integrity API Integration: The system must integrate with the Play Integrity API to verify that interactions and server requests are originating from a legitimate app binary running on a genuine Android device \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Integration with the Play Integrity API enhances application security by verifying the authenticity of the app and device, protecting against tampering, fraudulent activity, and interactions from non-legitimate sources. This is critical for safeguarding sensitive health information and ensuring compliance with security standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-032",
    "Parent PUIDs": "SECM-CAT-IBP-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must integrate with the Play Integrity API to ensure that interactions and server requests originate from a legitimate, untampered app binary running on a genuine Android device."
  },
  {
    "PUID": "SECM-CAT-IBP-032",
    "Requirement description": "The mobile health application must initialize all parameter values upon startup to ensure predictable behavior, prevent unintentional data leakage, and avoid reliance on uninitialized or potentially unsafe variables.",
    "Source": "SRG-APP-000516-MAPP-000073: The mobile app must initialize all parameter values on startup. \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Proper initialization of parameter values at startup enhances the application\\'s security posture by mitigating risks associated with undefined behaviors, memory corruption, or unintended interactions. This practice is critical in applications handling sensitive health data to maintain data integrity and operational reliability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-033",
    "Parent PUIDs": "SECM-CAT-IBP-031",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must initialize all parameter values upon startup to ensure predictable behavior, prevent unintentional data leakage, and avoid reliance on uninitialized or potentially unsafe variables."
  },
  {
    "PUID": "SECM-CAT-IBP-033",
    "Requirement description": "The mobile health app must verify integrity at startup to detect tampering or redistribution, alert stakeholders, and mitigate risks, such as removing unauthorized copies. Annual testing of initialization, shutdown, and abort scenarios must ensure system security.",
    "Source": "Protection against redistribution with malicious code: 1. The system should perform integrity checks during application startup to detect redistribution or malicious modifications of the binary. If a violation is found, it must automatically notify the appropriate parties to remove unauthorized copies of the app from app stores \\[3\\].  V-222647: Test procedures must be created and at least annually executed to ensure system initialization, shutdown, and aborts are configured to verify the system remains in a secure state \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Integrity checks are critical to prevent unauthorized redistribution or tampering with the app binary, which could compromise sensitive health data or system functionality. Regular testing of initialization and shutdown processes ensures the system remains secure during critical states.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IBP-034",
    "Parent PUIDs": "SECM-CAT-IBP-032",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health app must verify integrity at startup to detect tampering or redistribution, alert stakeholders, and mitigate risks, such as removing unauthorized copies. Annual testing of initialization, shutdown, and abort scenarios must ensure system security."
  },
  {
    "PUID": "SECM-CAT-IBP-034",
    "Requirement description": "The mobile health application system must evaluate application binaries to identify critical content or high popularity that may necessitate binary protection. For applications requiring such protection, a thorough threat modeling analysis must be conducted to identify relevant risks and their potential financial impact.",
    "Source": "Critical content evaluation in binaries: 1. The system must assess whether the binary of each application contains critical content or if its popularity requires binary protection. If so, a threat modeling analysis should be performed to identify the most relevant risks and their potential financial impact \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Critical content or highly popular applications are prime targets for attacks such as reverse engineering or tampering. Assessing these risks and implementing appropriate protections can mitigate potential financial and security impacts.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IBP-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application system must evaluate application binaries to identify critical content or high popularity that may necessitate binary protection. For applications requiring such protection, a thorough threat modeling analysis must be conducted to identify relevant risks and their potential financial impact."
  },
  {
    "PUID": "SECM-CAT-SMC-001",
    "Requirement description": "The system must enforce secure default configurations for assets and software, minimizing permissions and restricting sensitive access.",
    "Source": "CIS Critical Security Control 4: Secure Configuration of Enterprise Assets and Software: Establish and maintain the secure configuration of enterprise assets (end-user devices, including portable and mobile; network devices; non-computing/IoT devices; and servers) and software (operating systems and applications) \\[14\\]  8.9 Configuration management: Configurations, including security configurations, of hardware, software, services and networks should be established, documented, implemented, monitored and reviewed \\[6\\].  CWE-276: Incorrect Default Permissions  The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions \\[35\\].  Secure default configurations: 1. Ensure that default settings and configurations are properly secured and do not expose sensitive information or provide unnecessary permissions \\[3\\].  Test ID 20: A mobile device's configuration goes out of compliance while logged in \\[36\\].",
    "Priority": "Not described",
    "Rationale": "Secure configurations reduce risks of unauthorized access and exploitation due to default settings or misconfigurations.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-002",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must enforce secure default configurations for assets and software, minimizing permissions and restricting sensitive access."
  },
  {
    "PUID": "SECM-CAT-SMC-002",
    "Requirement description": "The system must ensure all security controls are centrally implemented and configuration settings are documented and monitored.",
    "Source": "1.9: Verify that all security controls have a centralized implementation \\[19\\].  CM-6 CONFIGURATION SETTINGS  Control:  a\\. Establish and document configuration settings for components employed within the system that reflect the most restrictive mode consistent with operational requirements using \\[Assignment: organization-defined common secure configurations\\];  d\\. Monitor and control changes to the configuration settings in accordance with organizational policies and procedures.  Discussion: Configuration settings are the parameters that can be changed in the hardware, software, or firmware components of the system that affect the security and privacy posture or functionality of the system. Information technology products for which configuration settings can be defined include mainframe computers, servers, workstations, operating systems, mobile devices, input/output devices, protocols, and applications. Parameters that impact the security posture of systems include registry settings; account, file, or directory permission settings; and settings for functions, protocols, ports, services, and remote connections \\[11\\].",
    "Priority": "Not described",
    "Rationale": "Centralized security control implementation enhances consistency, reduces errors, and ensures compliance with organizational policies.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-003",
    "Parent PUIDs": "SECM-CAT-SMC-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must ensure all security controls are centrally implemented and configuration settings are documented and monitored."
  },
  {
    "PUID": "SECM-CAT-SMC-003",
    "Requirement description": "The system must implement protections against Denial-of-Service (DoS) attacks, including rate limiting, throttling, and QoS technologies.",
    "Source": "V-222667: Protections against DoS attacks must be implemented. Implement mitigations from the threat model for DOS attacks \\[15\\].  5.7. Employ rate limiting and throttling on a per-user/IP basis (if user identification is available) to reduce the risk from denial of service (DoS) attack \\[16\\].  SC-5 DENIAL-OF-SERVICE PROTECTION  Control:  a\\. \\[Selection: Protect against; Limit\\] the effects of the following types of denial-of-service events: \\[Assignment: organization-defined types of denial-of-service events\\]; and  b\\. Employ the following controls to achieve the denial-of-service objective: \\[Assignment: organization-defined controls by type of denial-of-service event\\].  Discussion: Denial-of-service events may occur due to a variety of internal and external causes, such as an attack by an adversary or a lack of planning to support organizational needs with respect to capacity and bandwidth. Such attacks can occur across a wide range of network protocols (e.g., IPv4, IPv6). A variety of technologies are available to limit or eliminate the origination and effects of denial-of-service events. For example, boundary protection devices can filter certain types of packets to protect system components on internal networks from being directly affected by or the source of denial-of-service attacks. Employing increased network capacity and bandwidth combined with service redundancy also reduces the susceptibility to denial-of-service events \\[11\\].  V-222594: The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems. Design and deploy the application to utilize controls that will prevent the application from being affected by DoS attacks or being used to attack other systems. This includes but is not limited to utilizing throttling techniques for application traffic such as QoS or implementing logic controls within the application code itself that prevents application use those results in network or system capabilities being exceeded \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Mitigating DoS attacks ensures service availability and prevents unauthorized disruption to system operations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-004",
    "Parent PUIDs": "SECM-CAT-SMC-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The system must implement protections against Denial-of-Service (DoS) attacks, including rate limiting, throttling, and QoS technologies."
  },
  {
    "PUID": "SECM-CAT-SMC-004",
    "Requirement description": "The application must default to a secure state in the event of initialization, shutdown, or abort failures, ensuring no unintended access or exposure.",
    "Source": "V-222585: The application must fail to a secure state if system initialization fails, shutdown fails, or aborts fail. Fix any vulnerability found when the application is an insecure state (initialization, shutdown and aborts) \\[15\\].  SRG-APP-000225-MAPP-000047: The mobile app must fail to an initial state when the application unexpectedly terminates, unless it maintains a secure state at all times \\[17\\].  7.6: Verify that error handling logic in security controls denies access by default \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Mitigating DoS attacks ensures service availability and prevents unauthorized disruption to system operations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-005",
    "Parent PUIDs": "SECM-CAT-SMC-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must default to a secure state in the event of initialization, shutdown, or abort failures, ensuring no unintended access or exposure."
  },
  {
    "PUID": "SECM-CAT-SMC-005",
    "Requirement description": "The application must preserve critical information during a system failure to facilitate root cause analysis and ensure minimal disruption to operations upon recovery.",
    "Source": "V-222586: In the event of a system failure, applications must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes. Create operational configuration documentation that identifies information needed for the application to return back into service or specify no such data is required, and retain data required to determine root cause of application failures \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Retaining key data during failures enables effective debugging and restoration, supporting mission continuity and reliability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-006",
    "Parent PUIDs": "SECM-CAT-SMC-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must preserve critical information during a system failure to facilitate root cause analysis and ensure minimal disruption to operations upon recovery."
  },
  {
    "PUID": "SECM-CAT-SMC-006",
    "Requirement description": "The application must shut down or implement compensating controls upon audit system failure, ensuring continued compliance or secure operation.",
    "Source": "V-222586: In the event of a system failure, applications must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes. Create operational configuration documentation that identifies information needed for the application to return back into service or specify no such data is required, and retain data required to determine root cause of application failures \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Shutting down or compensating for audit failures prevents the application from operating in a state where logging and accountability are compromised, thereby maintaining compliance and security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-007",
    "Parent PUIDs": "SECM-CAT-SMC-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must shut down or implement compensating controls upon audit system failure, ensuring continued compliance or secure operation."
  },
  {
    "PUID": "SECM-CAT-SMC-007",
    "Requirement description": "The application must incorporate redundancy mechanisms to ensure high availability in critical environments, mitigating single points of failure.",
    "Source": "V-222595: The web service design must include redundancy mechanisms when used with high-availability systems. Build the application to address issues that are found in a redundant environment and utilize redundancy mechanisms to provide high availability \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Redundancy mechanisms enable applications to maintain operational continuity during component failures, ensuring the reliability and availability of high-availability systems.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-008",
    "Parent PUIDs": "SECM-CAT-SMC-006",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must incorporate redundancy mechanisms to ensure high availability in critical environments, mitigating single points of failure."
  },
  {
    "PUID": "SECM-CAT-SMC-008",
    "Requirement description": "The application must not modify or request operating system parameters unless essential for its functionality, and privileged access must be restricted and managed to prevent integrity issues or privilege escalation.",
    "Source": "SRG-APP-000033-MAPP-000010: The mobile app must not modify, request, or assign values for operating system parameters unless necessary to perform application functions. A mobile app that operates with the privileges of its host OS is vulnerable to integrity issues and escalated privileges that would affect the entire platform and device. \\[17\\].  8.2 Privileged access rights  Control: The allocation and use of privileged access rights should be restricted and managed. Purpose: To ensure only authorized users, software components and services are provided with privileged access rights \\[6\\].  CWE-269: Improper Privilege Management:  The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.  The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Restricting unnecessary modifications to operating system parameters and managing privileged access prevents potential integrity violations, unauthorized control, and security vulnerabilities across the host device.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-009",
    "Parent PUIDs": "SECM-CAT-SMC-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must not modify or request operating system parameters unless essential for its functionality, and privileged access must be restricted and managed to prevent integrity issues or privilege escalation."
  },
  {
    "PUID": "SECM-CAT-SMC-009",
    "Requirement description": "The application must enforce execution policies to prevent unauthorized program execution and restrict privilege levels to the minimum necessary, in compliance with organizational policies and terms of software usage.",
    "Source": "V-222516: The application must prevent program execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage. Restrict application execution in accordance with the policy, terms, and conditions specified \\[15\\].  SRG-APP-000033-MAPP-000011: The mobile app must not execute as a privileged operating system process unless necessary to perform any app functions \\[17\\].  SRG-APP-000342-MAPP-000100: The mobile app must prevent organization-defined software from executing at higher privilege levels than users executing the software \\[17\\].  Security: 25. It states terms and conditions of cloud services \\[29\\].  Test ID 6: The system will not allow users greater access than their assigned role permits \\[36\\].  2.19. Ensure that the app runs with user privileges (unprivileged) on the end user device (does not require a rooted or a jailbroken device). Verify that it does not request more access authorizations to system resources and rights in the execution environment than the absolutely necessary (least privilege principle) \\[16\\].  Security: The cloud services used have the relevant security measures. It states the terms and conditions of cloud services \\[21\\].",
    "Priority": "Not described",
    "Rationale": "Restricting program execution and privilege levels ensures compliance with organizational security policies, minimizes attack surfaces, and prevents unauthorized access to system resources.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-010",
    "Parent PUIDs": "SECM-CAT-SMC-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must enforce execution policies to prevent unauthorized program execution and restrict privilege levels to the minimum necessary, in compliance with organizational policies and terms of software usage."
  },
  {
    "PUID": "SECM-CAT-SMC-010",
    "Requirement description": "The mobile application must not lock or restrict file permissions in a way that prevents the operating system or authorized backup tools from copying application files.",
    "Source": "SRG-APP-000516-MAPP-000034: The mobile app must not lock or set permissions on application files in a manner such that the operating system or an approved backup application cannot copy the files \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring backup tools and the operating system can access application files is essential for data recovery, operational continuity, and compliance with organizational backup policies.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-011",
    "Parent PUIDs": "SECM-CAT-SMC-009",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must not lock or restrict file permissions in a way that prevents the operating system or authorized backup tools from copying application files."
  },
  {
    "PUID": "SECM-CAT-SMC-011",
    "Requirement description": "The mobile application must not alter the file permissions of any files outside its scope of operation, ensuring it modifies only files dedicated to its own functionality.",
    "Source": "SRG-APP-000381-MAPP-000010: The mobile app must not change the file permissions of any files other than those dedicated to its own operation \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Restricting file permission changes to the app's operational files minimizes the risk of accidental or malicious modifications to system files, maintaining overall device integrity and security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-012",
    "Parent PUIDs": "SECM-CAT-SMC-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must not alter the file permissions of any files outside its scope of operation, ensuring it modifies only files dedicated to its own functionality."
  },
  {
    "PUID": "SECM-CAT-SMC-012",
    "Requirement description": "The application must prioritize the use of existing system-defined permissions to meet security requirements before defining new permissions.",
    "Source": "Use Existing Permissions: Before creating a new permission, the application must first verify if existing system-defined permissions can be used to satisfy the security needs \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Leveraging system-defined permissions reduces complexity, avoids redundancy, and ensures alignment with platform security standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-013",
    "Parent PUIDs": "SECM-CAT-SMC-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must prioritize the use of existing system-defined permissions to meet security requirements before defining new permissions."
  },
  {
    "PUID": "SECM-CAT-SMC-013",
    "Requirement description": "The application must adhere to the least privilege principle, requiring only the minimum set of permissions necessary for functionality while avoiding unnecessary or excessive permissions.",
    "Source": "4.3.1. access control  least privilege access control for maximum security: a user of a system has enough rights to conduct authorized actions within a system. All other permissions are denied by default health \\[36\\].  6.1: Verify that the app only requires the minimum set of permissions necessary \\[19\\].  Least privilege principle: 1. Request only the permissions necessary for the proper functioning of the application \\[3\\].  No Unnecessary Permissions: If a permission is not required for the app to function, it must not be declared. A thorough evaluation must be conducted to determine the need for each permission before it is included \\[18\\].  Minimize Permission Creation: The application must define the smallest set of new permissions necessary to meet security requirements. System-defined permissions must be used wherever possible, avoiding the creation of new permissions unless absolutely required \\[18\\].  Limit Scope of Permissions: Request only the narrowest permission scope necessary for each task, avoiding broad access that isn\\'t required \\[18\\].  V-222430: The application must execute without excessive account permissions. Configure the application accounts with minimalist privileges. Do not allow the application to operate with admin credentials \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Leveraging system-defined permissions reduces complexity, avoids redundancy, and ensures alignment with platform security standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-014",
    "Parent PUIDs": "SECM-CAT-SMC-012",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must adhere to the least privilege principle, requiring only the minimum set of permissions necessary for functionality while avoiding unnecessary or excessive permissions."
  },
  {
    "PUID": "SECM-CAT-SMC-014",
    "Requirement description": "The application must request only the minimum number of permissions strictly necessary for its core functionality, avoiding any unnecessary or non-essential permissions.",
    "Source": "Minimize Permission Requests: The application must minimize the number of permissions it requests, only asking for permissions that are strictly necessary for its functionality. Permissions that are not essential to the core operation of the app must not be requested \\[18\\].  No Unnecessary Permissions: If a permission is not required for the app to function, it must not be declared. A thorough evaluation must be conducted to determine the need for each permission before it is included \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Minimizing permission requests reduces security vulnerabilities, preserves user privacy, and ensures compliance with platform security guidelines.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-015",
    "Parent PUIDs": "SECM-CAT-SMC-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must request only the minimum number of permissions strictly necessary for its core functionality, avoiding any unnecessary or non-essential permissions."
  },
  {
    "PUID": "SECM-CAT-SMC-015",
    "Requirement description": "The application must notify System Administrators and Information System Security Officers (ISSOs) of account lifecycle events, including creation, modification, enabling, disabling, and removal.",
    "Source": "V-222417: The application must notify System Administrators and Information System Security Officers when accounts are created. Configure the application to notify the system administrator and the ISSO when application accounts are created \\[15\\].  V-222418: The application must notify System Administrators and Information System Security Officers when accounts are modified. Configure the application to notify the system administrator and the ISSO when application accounts are modified \\[15\\].  V-222419: The application must notify System Administrators and Information System Security Officers of account disabling actions. Configure the application to notify the system administrator and the ISSO when application accounts are disabled \\[15\\].  V-222420: The application must notify System Administrators and Information System Security Officers of account removal actions. Configure the application to notify the system administrator and the ISSO when application accounts are removed \\[15\\].  V-222422: The application must notify System Administrators and Information System Security Officers of account enabling actions. Configure the application to notify the system administrator and the ISSO when application accounts are enabled \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Providing notifications for account lifecycle events ensures transparency, accountability, and timely responses to unauthorized or unexpected changes, enhancing security and compliance.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-016",
    "Parent PUIDs": "SECM-CAT-SMC-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must notify System Administrators and Information System Security Officers (ISSOs) of account lifecycle events, including creation, modification, enabling, disabling, and removal."
  },
  {
    "PUID": "SECM-CAT-SMC-016",
    "Requirement description": "The application must be designed to avoid requiring sensitive permissions by utilizing alternative methods, such as generating unique identifiers internally without accessing device information.",
    "Source": "Design without Sensitive Permissions: Where possible, the application should be designed to avoid the need for sensitive permissions. For example, instead of requesting device information to create unique identifiers, the app must generate a UUID internally \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Minimizing the use of sensitive permissions reduces the risk of exposing user data and enhances compliance with privacy regulations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-017",
    "Parent PUIDs": "SECM-CAT-SMC-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must be designed to avoid requiring sensitive permissions by utilizing alternative methods, such as generating unique identifiers internally without accessing device information."
  },
  {
    "PUID": "SECM-CAT-SMC-017",
    "Requirement description": "The application must support dynamic permission management, enabling content providers to grant or revoke data access case-by-case and allowing secure, runtime permission additions when necessary.",
    "Source": "Dynamic Permission Management: The content provider must support dynamic permission grants, allowing the system to grant or revoke data access to other apps on a case-by-case basis, ensuring more secure data control \\[18\\].  Dynamic Permission Addition: The application must have the capability to dynamically add permissions using the addPermission() method, when needed \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Dynamic permission management ensures tighter control over data access, enhancing security and reducing unnecessary exposure of sensitive information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-018",
    "Parent PUIDs": "SECM-CAT-SMC-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must support dynamic permission management, enabling content providers to grant or revoke data access case-by-case and allowing secure, runtime permission additions when necessary."
  },
  {
    "PUID": "SECM-CAT-SMC-018",
    "Requirement description": "The mobile health application must minimize the use of dangerous-level permissions and avoid insecure file permissions, ensuring requests are clear and necessary to prevent user confusion or deterred installation.",
    "Source": "Avoiding User Confusion: The application must minimize the use of dangerous-level permissions, avoiding confusing permission requests that may deter users from installing the application \\[18\\].  Insecure permissions: 1. Avoid storing application files with overly permissive permissions like world-readable and/or world-writable \\[3\\].  Handling Dangerous Permissions: If a new permission is declared with a \\\"dangerous\\\" protection level, the following considerations must be addressed:  ```{=html} <!-- --> ``` The permission string must be concise and clearly convey the security decision to users.  The permission string must be localized into multiple languages to ensure broad understanding.  The application must handle the possibility that users may choose not to install the app due to confusion or perceived risk associated with the dangerous permission.  The app must manage requests for the permission even if the defining app has not been installed \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring the clarity and necessity of permission requests reduces user confusion, builds trust, and maintains compliance with security standards critical in handling sensitive health data. Avoiding overly permissive file permissions minimizes unauthorized access risks.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-019",
    "Parent PUIDs": "SECM-CAT-SMC-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must minimize the use of dangerous-level permissions and avoid insecure file permissions, ensuring requests are clear and necessary to prevent user confusion or deterred installation."
  },
  {
    "PUID": "SECM-CAT-SMC-019",
    "Requirement description": "The mobile health application must prevent other applications or non-privileged processes from modifying its software libraries.",
    "Source": "SRG-APP-000133-MAPP-000030: The mobile app must not enable other applications or non-privileged processes to modify software libraries \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Protecting software libraries from unauthorized modification ensures application integrity, prevents exploitation, and safeguards sensitive health-related functionalities and data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-020",
    "Parent PUIDs": "SECM-CAT-SMC-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must prevent other applications or non-privileged processes from modifying its software libraries."
  },
  {
    "PUID": "SECM-CAT-SMC-020",
    "Requirement description": "The mobile health application must clear all cookies and user-tracking information upon termination to prevent unauthorized access or identity tracking.",
    "Source": "SRG-APP-000516-MAPP-000066: The mobile app must remove cookies or information used to track a user's identity when it terminates \\[17\\].  1.34. In the case that the application includes embedded web browsing capabilities (e.g., WebViews), clear stored cookies on app termination or use in-memory cookie storage \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring the removal of cookies and tracking data at app termination minimizes the risk of data leakage, identity theft, and misuse of sensitive health information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-021",
    "Parent PUIDs": "SECM-CAT-SMC-019",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must clear all cookies and user-tracking information upon termination to prevent unauthorized access or identity tracking."
  },
  {
    "PUID": "SECM-CAT-SMC-021",
    "Requirement description": "The mobile health application must utilize ports and protocols in alignment with organizational and DoD Ports, Protocols, and Services Management (DoD PPSM) guidelines.",
    "Source": "SRG-APP-000142-MAPP-000032: The mobile app must utilize ports or protocols in a manner consistent with DoD Ports and Protocols guidance \\[17\\].  V-222628: New IP addresses, data services, and associated ports used by the application must be submitted to the appropriate approving authority for the organization, which in turn will be submitted through the DoD Ports, Protocols, and Services Management (DoD PPSM) \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Proper management of ports and protocols ensures secure communication, prevents unauthorized access, and complies with organizational and DoD security standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-022",
    "Parent PUIDs": "SECM-CAT-SMC-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must utilize ports and protocols in alignment with organizational and DoD Ports, Protocols, and Services Management (DoD PPSM) guidelines."
  },
  {
    "PUID": "SECM-CAT-SMC-022",
    "Requirement description": "The mobile health application must synchronize its internal clocks with the authoritative time source provided by the Mobile Operating System (MOS).",
    "Source": "SRG-APP-000372-MAPP-000100: The mobile app must synchronize internal information system clocks to the MOS-based authoritative time source \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Accurate and synchronized system time is critical for secure logging, auditing, and system operation to ensure consistency and traceability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-023",
    "Parent PUIDs": "SECM-CAT-SMC-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must synchronize its internal clocks with the authoritative time source provided by the Mobile Operating System (MOS)."
  },
  {
    "PUID": "SECM-CAT-SMC-023",
    "Requirement description": "The mobile health application must activate free security features offered by the toolchain, including byte-code minification, stack protection, Position Independent Executable (PIE) support, and automatic reference counting.",
    "Source": "7.8: Free security features offered by the toolchain, such as byte-code minification, stack protection, PIE support and automatic reference counting, are activated \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Activating these free security features enhances the application\\'s resilience against exploitation by minimizing vulnerabilities at the compilation and runtime levels.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-024",
    "Parent PUIDs": "SECM-CAT-SMC-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must activate free security features offered by the toolchain, including byte-code minification, stack protection, Position Independent Executable (PIE) support, and automatic reference counting."
  },
  {
    "PUID": "SECM-CAT-SMC-024",
    "Requirement description": "The mobile health application must implement signature-level protection for private data, ensuring that only applications signed with the same developer key can access sensitive features or data.",
    "Source": "Signature Protection for Private Data: For sharing data only between applications signed with the same key, the android:protectionLevel attribute must be set to signature, ensuring controlled access without requiring user confirmation \\[18\\].  Signature-Level Protection: If a new permission is required, the permission must be implemented with a signature protection level where appropriate. This ensures that only applications signed by the same developer can access the protected features, without requiring user interaction \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Signature-level protection enhances security by restricting access to trusted applications within the same development ecosystem, reducing the risk of unauthorized data access or feature exploitation.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-025",
    "Parent PUIDs": "SECM-CAT-SMC-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement signature-level protection for private data, ensuring that only applications signed with the same developer key can access sensitive features or data."
  },
  {
    "PUID": "SECM-CAT-SMC-025",
    "Requirement description": "The mobile health application must verify the correct operation of security functions on system startup, restart, or upon command by a privileged user.",
    "Source": "V-222616: The application must perform verification of the correct operation of security functions: upon system startup and/or restart; upon command by a user with privileged access; and/or every 30 days. Design the application to verify the correct operation of security functions on command and on application startup and restart \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Periodic and event-driven verification of security functions ensures the reliability and robustness of security mechanisms, reducing risks of undetected failures.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-026",
    "Parent PUIDs": "SECM-CAT-SMC-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must verify the correct operation of security functions on system startup, restart, or upon command by a privileged user."
  },
  {
    "PUID": "SECM-CAT-SMC-026",
    "Requirement description": "The mobile health application must notify the ISSO (Information System Security Officer) and ISSM (Information System Security Manager) of any failed security verification tests.",
    "Source": "V-222617: The application must notify the ISSO and ISSM of failed security verification tests. Configure the application to send notices to the ISSO and ISSM indicating the application failed a verification test \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Prompt notification of failed security tests ensures timely response to potential threats, minimizing risks to system integrity and data security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-027",
    "Parent PUIDs": "SECM-CAT-SMC-025",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must notify the ISSO (Information System Security Officer) and ISSM (Information System Security Manager) of any failed security verification tests."
  },
  {
    "PUID": "SECM-CAT-SMC-027",
    "Requirement description": "The mobile health application must alert administrators when low resource conditions, such as insufficient memory or CPU overload, are detected.",
    "Source": "V-222668: The system must alert an administrator when low resource conditions are encountered. Implement mechanisms to alert system administrators about a low resource condition \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Timely alerts about low resource conditions enable administrators to take proactive measures to maintain application availability and prevent potential failures.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-028",
    "Parent PUIDs": "SECM-CAT-SMC-026",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must alert administrators when low resource conditions, such as insufficient memory or CPU overload, are detected."
  },
  {
    "PUID": "SECM-CAT-SMC-028",
    "Requirement description": "Mobile health applications must declare new permissions in the app manifest using the \\<permission\\> element, ensuring proper reference and control by dependent applications.",
    "Source": "V-222668: The system must alert an administrator when low resource conditions are encountered. Implement mechanisms to alert system administrators about a low resource condition \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Declaring and managing permissions in the manifest provides a secure framework for access control, ensuring permissions are explicit and maintainable across interconnected applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-029",
    "Parent PUIDs": "SECM-CAT-SMC-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must declare new permissions in the app manifest using the \\<permission\\> element, ensuring proper reference and control by dependent applications."
  },
  {
    "PUID": "SECM-CAT-SMC-029",
    "Requirement description": "Each service class in mobile health applications must have a \\<service\\> declaration in the AndroidManifest.xml file, with explicitly defined accessibility attributes to prevent unintentional exposure to other applications.",
    "Source": "Service Declaration in Manifest: Each service class must have a corresponding \\<service\\> declaration in the application's AndroidManifest.xml file. Ensure the android attribute is explicitly set to define whether the service is accessible to other applications. Avoid relying on implicit defaults, especially when intent filters are present \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Explicit service declarations and attribute settings prevent unauthorized access, reducing potential security vulnerabilities arising from implicit defaults or misconfigured intent filters.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-030",
    "Parent PUIDs": "SECM-CAT-SMC-028",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Each service class in mobile health applications must have a \\<service\\> declaration in the AndroidManifest.xml file, with explicitly defined accessibility attributes to prevent unintentional exposure to other applications."
  },
  {
    "PUID": "SECM-CAT-SMC-030",
    "Requirement description": "Mobile health applications must restrict access to services by using the android:permission attribute in the \\<service\\> declaration. For apps targeting Android 5.0 (API level 21) or higher, JobScheduler must be used instead of continuous background services to optimize resource usage and efficiency.",
    "Source": "Service Permission Protection for Services: Use the android attribute in the \\<service\\> declaration to restrict access. This ensures that only applications with the specified permission, declared via \\<uses-permission\\> in their manifest, can start, stop, or bind to the service \\[18\\].  Use JobScheduler for Background Services (API 21+): For apps targeting Android 5.0 (API level 21) or higher, use JobScheduler instead of running background services continuously. This improves efficiency and reduces resource usage \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Restricting service access using permissions ensures only authorized apps can interact with sensitive services, enhancing security. Utilizing JobScheduler improves resource management and compliance with modern platform requirements.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-031",
    "Parent PUIDs": "SECM-CAT-SMC-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must restrict access to services by using the android:permission attribute in the \\<service\\> declaration. For apps targeting Android 5.0 (API level 21) or higher, JobScheduler must be used instead of continuous background services to optimize resource usage and efficiency."
  },
  {
    "PUID": "SECM-CAT-SMC-031",
    "Requirement description": "Mobile health applications must explicitly manage export settings and permissions in the manifest to ensure sensitive services are not unintentionally exposed.",
    "Source": "Security Best Practices: Ensure sensitive services are not unintentionally exposed by explicitly managing export settings and permissions in the manifest \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Properly configured export settings and permissions reduce the risk of unauthorized access to sensitive services, protecting user data and application integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-032",
    "Parent PUIDs": "SECM-CAT-SMC-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must explicitly manage export settings and permissions in the manifest to ensure sensitive services are not unintentionally exposed."
  },
  {
    "PUID": "SECM-CAT-SMC-032",
    "Requirement description": "Mobile health applications must restrict API key usage by applying IP address, app package name, or certificate fingerprint restrictions and monitor API usage for anomalies.",
    "Source": "Restrict API Key Usage: Use restrictions on API keys to limit their scope, such as restricting access by IP address, app package name, or certificate fingerprints. Implement usage quotas and monitor API usage to detect any suspicious activity. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Limiting API key usage to defined scopes and monitoring activity enhances security by mitigating unauthorized access and identifying potential misuse.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-033",
    "Parent PUIDs": "SECM-CAT-SMC-031",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must restrict API key usage by applying IP address, app package name, or certificate fingerprint restrictions and monitor API usage for anomalies."
  },
  {
    "PUID": "SECM-CAT-SMC-033",
    "Requirement description": "Mobile health applications must implement regular API key rotation, adhering to ISO 27001 or similar standards, to reduce the risk of key exposure and unauthorized access.",
    "Source": "API Key Rotation and Revocation: Implement regular API key rotation to reduce the risk of long-term key exposure \\[18\\].  Compliance with ISO 27001 Key Management Framework: Ensure that key rotation and expiration policies are compliant with the ISO 27001 framework or similar security standards to maintain adherence to established information security practices \\[18\\].  Regular Key Rotation: API keys must be rotated regularly to minimize the risk of unauthorized access. The rotation period should range from 90 days to 6 months, following industry best practices and standards such as ISO 27001 \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Regular API key rotation ensures minimized exposure duration for keys, enhancing the security posture by reducing risks associated with stale or compromised credentials.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-034",
    "Parent PUIDs": "SECM-CAT-SMC-032",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement regular API key rotation, adhering to ISO 27001 or similar standards, to reduce the risk of key exposure and unauthorized access."
  },
  {
    "PUID": "SECM-CAT-SMC-034",
    "Requirement description": "Mobile health applications must implement an automated key management system to rotate API keys at regular intervals, reducing human error and ensuring compliance with security policies.",
    "Source": "Automated Key Rotation Process: Implement a key management system that automates the process of rotating API keys at regular intervals, reducing human error and ensuring compliance with security policies \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Automating API key rotation ensures consistency, minimizes human error, and enforces adherence to security best practices, safeguarding sensitive operations and data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-035",
    "Parent PUIDs": "SECM-CAT-SMC-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement an automated key management system to rotate API keys at regular intervals, reducing human error and ensuring compliance with security policies."
  },
  {
    "PUID": "SECM-CAT-SMC-035",
    "Requirement description": "Mobile health applications must define and enforce an API key expiration policy to ensure keys are invalidated and replaced before expiration, reducing the risk of unauthorized access or misuse.",
    "Source": "Key Expiration Policy: Define an expiration policy for API keys that ensures keys are invalidated and replaced before they reach their expiration date to reduce the risk of misuse \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Implementing a key expiration policy minimizes the risk of misuse and enhances overall security by ensuring that expired or unused API keys cannot be exploited.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-036",
    "Parent PUIDs": "SECM-CAT-SMC-034",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must define and enforce an API key expiration policy to ensure keys are invalidated and replaced before expiration, reducing the risk of unauthorized access or misuse."
  },
  {
    "PUID": "SECM-CAT-SMC-036",
    "Requirement description": "Mobile health applications must implement notification and monitoring mechanisms to alert administrators before API key expiration, ensuring sufficient time for key rotation without service interruption.",
    "Source": "Notification and Monitoring for Key Expiry: The system must notify administrators before key expiration, providing sufficient time for the rotation process to complete without service interruption \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Advance notification of key expiry ensures seamless operation by allowing timely key rotation, minimizing risks of downtime or unauthorized access due to expired keys.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-037",
    "Parent PUIDs": "SECM-CAT-SMC-035",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement notification and monitoring mechanisms to alert administrators before API key expiration, ensuring sufficient time for key rotation without service interruption."
  },
  {
    "PUID": "SECM-CAT-SMC-037",
    "Requirement description": "Mobile health applications must support the immediate revocation and replacement of compromised API keys.",
    "Source": "API Key Rotation and Revocation: In case of potential compromise, enable swift revocation of API keys and update the app to use new keys without disrupting user experience \\[18\\].  Compliance with ISO 27001 Key Management Framework: Ensure that key rotation and expiration policies are compliant with the ISO 27001 framework or similar security standards to maintain adherence to established information security practices \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Swift revocation and replacement of API keys in case of compromise mitigate potential risks while aligning with industry standards for secure key management.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-038",
    "Parent PUIDs": "SECM-CAT-SMC-036",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must support the immediate revocation and replacement of compromised API keys."
  },
  {
    "PUID": "SECM-CAT-SMC-038",
    "Requirement description": "Mobile health applications must implement certificate pinning to restrict trusted certificates to a predefined set, ensuring secure communication with backend servers and mitigating risks from compromised Certificate Authorities.",
    "Source": "General Best Practices: 7. Consider certificate pinning \\[3\\].  Certificate pinning: For an extra layer of security, you can consider implementing certificate pinning to check which certificates are considered valid \\[18\\].  4.8. Introduce certificate pinning. Restrict an application's trusted certificates to a small set of known certificates that are used by the backend servers \\[16\\].  iOS Specific Best Practices: 4. Consider using certificate pinning by doing the following: export your certificate, include it in your app bundle, and anchor it to your trust object. Using the NSURL method connection:willSendRequestForAuthenticationChallenge: will now accept your cert \\[3\\].  MASVS-NETWORK-2: The app performs identity pinning for all remote endpoints under the developer's control: Instead of trusting all the default root CAs of the framework or device, this control will make sure that only very specific CAs are trusted. This practice is typically called certificate pinning or public key pinning \\[20\\].  Secure network configuration: 1. Disallow cleartext traffic and use certificate pinning when possible \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Certificate pinning enhances security by limiting trust to specific certificates, reducing exposure to man-in-the-middle attacks and ensuring communication integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-039",
    "Parent PUIDs": "SECM-CAT-SMC-037",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement certificate pinning to restrict trusted certificates to a predefined set, ensuring secure communication with backend servers and mitigating risks from compromised Certificate Authorities."
  },
  {
    "PUID": "SECM-CAT-SMC-039",
    "Requirement description": "Mobile health applications must implement a streamlined API key revocation process to address security incidents or vulnerabilities, ensuring continuity of service by quickly issuing new keys.",
    "Source": "Streamlined Key Revocation: In the event of a security incident or detected vulnerability, the system must allow for immediate revocation of API keys and ensure new keys are issued quickly to maintain service continuity \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Prompt API key revocation reduces the risk of unauthorized access during security incidents, while efficient reissuance ensures minimal service disruption.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-040",
    "Parent PUIDs": "SECM-CAT-SMC-038",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement a streamlined API key revocation process to address security incidents or vulnerabilities, ensuring continuity of service by quickly issuing new keys."
  },
  {
    "PUID": "SECM-CAT-SMC-040",
    "Requirement description": "Mobile health applications must disable metadata publishing, such as WSDL documents, to prevent unintended exposure of sensitive service metadata.",
    "Source": "5.3. Disable metadata publishing (e.g., metadata for WSDL documents and for WSDL derived objects), in order to prevent unintentional disclosure of potentially sensitive service metadata \\[16\\].  8.1 User endpoint devices: Information stored on, processed by or accessible via user endpoint devices should be protected \\[6\\].",
    "Priority": "Not described",
    "Rationale": "Disabling metadata publishing reduces the risk of exposing sensitive information that could assist attackers in understanding application structure and functionality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-SMC-041",
    "Parent PUIDs": "SECM-CAT-SMC-039",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must disable metadata publishing, such as WSDL documents, to prevent unintended exposure of sensitive service metadata."
  },
  {
    "PUID": "SECM-CAT-SMC-041",
    "Requirement description": "Mobile health applications must control the export status of services by explicitly setting android:exported attributes to define accessibility.",
    "Source": "Service Export Control: Services are not exported by default unless they include intent filters. If the service needs to be accessed by other applications, explicitly set android  ```{=html} <!-- --> ``` =\\\"true\\\". Otherwise, ensure android  =\\\"false\\\" to keep the service private \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Disabling metadata publishing reduces the risk of exposing sensitive information that could assist attackers in understanding application structure and functionality.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-SMC-040",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must control the export status of services by explicitly setting android:exported attributes to define accessibility."
  },
  {
    "PUID": "SECM-CAT-IDS-001",
    "Requirement description": "The mobile health application must ensure secure audit logging for all access, updates, or overrides of PHI. This includes logging user interactions with patient records, consent directive overrides, and access to locked or masked data. Logs must remain operational and accessible whenever the system is in use.",
    "Source": "4.7. Communications and Operations Management  Security Requirement 37 -- Logging Transactions in the EHRi: The EHRi must create a secure audit record each time a user:  a\\) Accesses, creates or updates PHI of a patient/person via the EHRi;  b\\) Overrides the consent directives of a patient/person via the EHRi;  c\\) Accesses, via the EHRi, data that is locked or masked by instruction of a patient/person; or  d\\) Accesses, creates or updates registration data on an EHRi user  Security Requirement 41 -- Logging Access to PHI in PoS Systems: All PoS systems connected to the EHRi must record in an audit log every instance of a user accessing, updating or archiving PHI \\[10\\].  12.4.1 Event logging: The health information system's audit logging facility should be operational at all times while the health information system being audited is available for use \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring secure and consistent audit logging is critical for accountability and compliance with healthcare data protection regulations. It helps trace unauthorized access or modifications to sensitive health information, thereby improving overall system integrity.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-002",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "99",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure secure audit logging for all access, updates, or overrides of PHI. This includes logging user interactions with patient records, consent directive overrides, and access to locked or masked data. Logs must remain operational and accessible whenever the system is in use."
  },
  {
    "PUID": "SECM-CAT-IDS-002",
    "Requirement description": "The mobile health application must ensure audit logs are retained for a period determined by clinical and legal standards, enabling after-the-fact investigation of security incidents. Additionally, the system must provide reporting capabilities to support these investigations.",
    "Source": "12.4.1 Event logging: The organization should carefully assess and determine the retention period for these audit logs, with particular reference to clinical professional standards and legal obligations, in order to enable investigations to be carried out when necessary and to provide evidence of misuse where necessary \\[7\\].  V-222494: The application must provide a report generation capability that supports after-the-fact investigations of security incidents. Design or configure the application to provide after-the-fact report generation capability or utilize a centralized utility designed for the purpose of log management and reporting \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Retention of audit logs ensures compliance with legal and professional standards while providing evidence for investigations into potential misuse or security incidents. Reporting capabilities enhance the ability to analyze logs efficiently and take corrective actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-003",
    "Parent PUIDs": "SECM-CAT-IDS-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "98",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure audit logs are retained for a period determined by clinical and legal standards, enabling after-the-fact investigation of security incidents. Additionally, the system must provide reporting capabilities to support these investigations."
  },
  {
    "PUID": "SECM-CAT-IDS-003",
    "Requirement description": "The mobile health application must implement user audit controls that log the user\\'s unique identifier, data subject identifier, performed function, and timestamp for all actions involving sensitive data.",
    "Source": "User audit controls:  Simple audits are in place. While additional security incident and event managers and system log aggregation tools are recommended to maximize security event analysis capabilities, aggregation and analytics tools like these are considered out of scope for this iteration \\[36\\].  12.4.1 Event logging  The audit log should uniquely identify the user, uniquely identify the data subject (i.e. the subject of care), identify the function performed by the user (record creation, access, update, etc.), and note the time and date at which the function was performed \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Comprehensive audit logs provide essential details for investigating security events, ensuring accountability, and maintaining compliance with regulatory requirements for sensitive data handling in healthcare systems.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-004",
    "Parent PUIDs": "SECM-CAT-IDS-002",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement user audit controls that log the user\\'s unique identifier, data subject identifier, performed function, and timestamp for all actions involving sensitive data."
  },
  {
    "PUID": "SECM-CAT-IDS-004",
    "Requirement description": "The mobile health application must generate audit records that log the start and end times of each user session to ensure accurate tracking of user activity.",
    "Source": "V-222464: The application must generate audit records showing starting and ending time for user access to the system. Configure the application or application server to record the start and end time of user session activity \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Tracking session activity enables effective monitoring of user access, supports security audits, and assists in identifying potential misuse or unauthorized access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-005",
    "Parent PUIDs": "SECM-CAT-IDS-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records that log the start and end times of each user session to ensure accurate tracking of user activity."
  },
  {
    "PUID": "SECM-CAT-IDS-005",
    "Requirement description": "The mobile health application must implement centralized audit logging with time-stamped correlation, unique application identifiers, and configurable log content to ensure comprehensive and secure audit record aggregation.",
    "Source": "V-222439: For applications providing audit record aggregation, the application must compile audit records from organization-defined information system components into a system-wide audit trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the audit trail. Configure the application to correlate time stamps when aggregating audit records \\[15\\].  V-222475: When using centralized logging; the application must include a unique identifier in order to distinguish itself from other application logs. Configure the application logs or the centralized log storage facility so the application name and the hosts hosting the application are uniquely identified in the logs \\[15\\].  V-222482: The application must be configured to write application logs to a centralized log repository. Configure the application to utilize a centralized log repository and ensure the logs are off-loaded from the application system as quickly as possible \\[15\\].  V-222480: The application must provide centralized management and configuration of the content to be captured in audit records generated by all application components. Configure the application to utilize a centralized log management system that provides the capability to configure the content of audit records \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Centralized audit management enhances the efficiency of tracking security events, ensures precise time correlation for multi-system analysis, and meets regulatory requirements for secure and detailed audit trails in healthcare systems.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-006",
    "Parent PUIDs": "SECM-CAT-IDS-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement centralized audit logging with time-stamped correlation, unique application identifiers, and configurable log content to ensure comprehensive and secure audit record aggregation."
  },
  {
    "PUID": "SECM-CAT-IDS-006",
    "Requirement description": "The mobile health application must off-load audit records to a separate system or media at scheduled intervals, ensuring secure and reliable log storage.",
    "Source": "V-222481: The application must off-load audit records onto a different system or media than the system being audited. Configure the application to off-load audit records onto a different system as per approved schedule \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Off-loading audit records to a different system enhances data integrity, prevents log tampering, and ensures availability for forensic analysis in case of system compromise.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-007",
    "Parent PUIDs": "SECM-CAT-IDS-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must off-load audit records to a separate system or media at scheduled intervals, ensuring secure and reliable log storage."
  },
  {
    "PUID": "SECM-CAT-IDS-007",
    "Requirement description": "The mobile health application must provide immediate warnings to system administrators (SA) and Information System Security Officers (ISSO) when the audit record storage reaches 75% of its maximum capacity.",
    "Source": "V-222483: The application must provide an immediate warning to the SA and ISSO (at a minimum) when allocated audit record storage volume reaches 75% of repository maximum audit record storage capacity. Configure the application to send an immediate alarm to the application admin/SA and the ISSO when the allocated log storage capacity exceeds 75% of usage or exceeds the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Early alerts for storage capacity issues ensure timely action to prevent potential data loss or disruption in audit logging, which is critical for compliance and forensic investigations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-008",
    "Parent PUIDs": "SECM-CAT-IDS-006",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must provide immediate warnings to system administrators (SA) and Information System Security Officers (ISSO) when the audit record storage reaches 75% of its maximum capacity."
  },
  {
    "PUID": "SECM-CAT-IDS-008",
    "Requirement description": "The mobile health application must provide real-time alerts to system administrators (SA) and Information System Security Officers (ISSO) for all audit failure events, ensuring immediate notification when the audit system is at risk of failure or has failed.",
    "Source": "V-222484: Applications categorized as having a moderate or high impact must provide an immediate real-time alert to the SA and ISSO (at a minimum) for all audit failure events. Configure the log alerts to send an alarm when the audit system is in danger of failing or has failed. Configure the log alerts to be immediately sent to the application admin/SA and ISSO \\[15\\].  V-222485: The application must alert the ISSO and SA (at a minimum) in the event of an audit processing failure. Configure the application to send an alarm in the event the audit system has failed or is failing \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Real-time alerts for audit system failures are critical to maintaining compliance, ensuring data integrity, and addressing issues promptly to avoid data loss or breaches.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-009",
    "Parent PUIDs": "SECM-CAT-IDS-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must provide real-time alerts to system administrators (SA) and Information System Security Officers (ISSO) for all audit failure events, ensuring immediate notification when the audit system is at risk of failure or has failed."
  },
  {
    "PUID": "SECM-CAT-IDS-009",
    "Requirement description": "The mobile health application must initiate session auditing immediately upon startup, ensuring all application events are logged from the start of the session.",
    "Source": "V-222468: The application must initiate session auditing upon startup. Configure the application to begin logging application events as soon as the application starts up \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Early initiation of session auditing helps maintain a complete audit trail, ensuring no critical events are missed during application startup, which is vital for security monitoring and compliance.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-010",
    "Parent PUIDs": "SECM-CAT-IDS-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must initiate session auditing immediately upon startup, ensuring all application events are logged from the start of the session."
  },
  {
    "PUID": "SECM-CAT-IDS-010",
    "Requirement description": "The mobile health application must generate audit records for any instance of concurrent logons from different devices or workstations, ensuring detailed tracking of such activities.",
    "Source": "V-222672: The application must generate audit records when concurrent logons from different workstations occur. Configure the application to log concurrent logons from different workstations \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging concurrent logons from multiple workstations enhances the detection of potentially unauthorized access or credential sharing, improving the application\\'s security and compliance with audit requirements.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-011",
    "Parent PUIDs": "SECM-CAT-IDS-009",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for any instance of concurrent logons from different devices or workstations, ensuring detailed tracking of such activities."
  },
  {
    "PUID": "SECM-CAT-IDS-011",
    "Requirement description": "The mobile health application must log all shutdown events in the event logs to ensure comprehensive audit trail coverage.",
    "Source": "V-222469: The application must log application shutdown events. Configure the application or application server to record application shutdown events in the event logs \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging shutdown events provides critical insights for troubleshooting and security auditing, enabling the detection of unexpected or unauthorized shutdowns that may indicate potential security incidents or system issues.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-012",
    "Parent PUIDs": "SECM-CAT-IDS-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must log all shutdown events in the event logs to ensure comprehensive audit trail coverage."
  },
  {
    "PUID": "SECM-CAT-IDS-012",
    "Requirement description": "The mobile health application must generate and log audit records for all successful and unsuccessful logon attempts, and raise security events for detected log-on breaches.",
    "Source": "V-222462: The application must generate audit records when successful/unsuccessful logon attempts occur. Configure the application or application server to write a log entry when successful and unsuccessful logon events occur \\[15\\].  9.4.2 Secure log-on procedures: f) log unsuccessful and successful attempts; \\[7\\].  9.4.2 Secure log-on procedures: g) raise a security event if a potential attempted or successful breach of log-on controls is detected; \\[7\\]  164.308 Administrative safeguards.  \\(a\\) A covered entity or business associate must, in accordance with § 164.306:  \\(5\\)  \\(ii\\) Implementation specifications:  \\(B\\) Security reminders (Addressable)  i.  Log-in monitoring (Addressable)  Procedures for monitoring log-in attempts and reporting discrepancies \\[9\\].",
    "Priority": "Not described",
    "Rationale": "Logging and monitoring logon events provide critical insights into potential unauthorized access attempts and user activity, helping to maintain security and comply with regulatory requirements.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-013",
    "Parent PUIDs": "SECM-CAT-IDS-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate and log audit records for all successful and unsuccessful logon attempts, and raise security events for detected log-on breaches."
  },
  {
    "PUID": "SECM-CAT-IDS-013",
    "Requirement description": "The mobile health application must generate and log audit records for privileged activities and system-level access events.",
    "Source": "V-222463: The application must generate audit records for privileged activities or other system-level access. Configure the application to write a log entry when privileged activities or other system-level events occur \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging privileged activities and system-level access helps detect and prevent unauthorized or malicious actions, ensuring compliance with security policies and regulations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-014",
    "Parent PUIDs": "SECM-CAT-IDS-012",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate and log audit records for privileged activities and system-level access events."
  },
  {
    "PUID": "SECM-CAT-IDS-014",
    "Requirement description": "The mobile health application must generate audit records for both successful and unsuccessful attempts to grant user privileges.",
    "Source": "V-222450: The application must generate audit records when successful/unsuccessful attempts to grant privileges occur. Configure the application to audit successful and unsuccessful attempts to grant privileges \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Auditing privilege grant attempts ensures accountability and helps detect unauthorized or malicious attempts to escalate user access, enhancing security compliance.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-015",
    "Parent PUIDs": "SECM-CAT-IDS-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for both successful and unsuccessful attempts to grant user privileges."
  },
  {
    "PUID": "SECM-CAT-IDS-015",
    "Requirement description": "The mobile health application must generate audit records for both successful and unsuccessful attempts to access security or application objects.",
    "Source": "V-222451: The application must generate audit records when successful/unsuccessful attempts to access security objects occur. Configure the application to create an audit record for both successful and unsuccessful attempts to access security objects \\[15\\].  V-222465: The application must generate audit records when successful/unsuccessful accesses to objects occur. Configure the application to log successful and unsuccessful access to application objects \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Monitoring access to security and application objects ensures unauthorized attempts are identified, and security compliance is maintained, protecting sensitive health information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-016",
    "Parent PUIDs": "SECM-CAT-IDS-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for both successful and unsuccessful attempts to access security or application objects."
  },
  {
    "PUID": "SECM-CAT-IDS-016",
    "Requirement description": "The mobile health application must generate audit records for both successful and unsuccessful attempts to modify security objects.",
    "Source": "V-222455: The application must generate audit records when successful/unsuccessful attempts to modify security objects occur. Configure the application to create an audit record for both successful and unsuccessful attempts to modify security objects \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Capturing modification attempts on security objects ensures any unauthorized or unintended changes are detected and helps maintain the integrity and confidentiality of sensitive health data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-017",
    "Parent PUIDs": "SECM-CAT-IDS-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for both successful and unsuccessful attempts to modify security objects."
  },
  {
    "PUID": "SECM-CAT-IDS-017",
    "Requirement description": "The mobile health application must generate audit records for successful and unsuccessful attempts to delete database security objects.",
    "Source": "V-222460: The application must generate audit records when successful/unsuccessful attempts to delete application database security objects occur. Configure the application to create an audit record for both successful and unsuccessful attempts to delete database security objects \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging deletion attempts on database security objects ensures accountability, detects potential misuse, and preserves the integrity of sensitive healthcare data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-018",
    "Parent PUIDs": "SECM-CAT-IDS-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for successful and unsuccessful attempts to delete database security objects."
  },
  {
    "PUID": "SECM-CAT-IDS-018",
    "Requirement description": "The mobile health application must generate audit records for successful and unsuccessful attempts to access security levels.",
    "Source": "V-222452: The application must generate audit records when successful/unsuccessful attempts to access security levels occur. Configure the application to create an audit record for both successful and unsuccessful attempts to access security levels. \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Capturing attempts to access security levels ensures accountability, helps identify unauthorized access attempts, and protects sensitive healthcare data from misuse or compromise.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-019",
    "Parent PUIDs": "SECM-CAT-IDS-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for successful and unsuccessful attempts to access security levels."
  },
  {
    "PUID": "SECM-CAT-IDS-019",
    "Requirement description": "The mobile health application must generate audit records for all successful and unsuccessful attempts to modify security levels.",
    "Source": "V-222456: The application must generate audit records when successful/unsuccessful attempts to modify security levels occur. Configure the application to create an audit record for both successful and unsuccessful attempts to modify security levels \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Recording modifications to security levels ensures traceability, accountability, and early detection of potential misuse, which is critical for safeguarding sensitive health data in compliance with regulatory standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-020",
    "Parent PUIDs": "SECM-CAT-IDS-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for all successful and unsuccessful attempts to modify security levels."
  },
  {
    "PUID": "SECM-CAT-IDS-020",
    "Requirement description": "The mobile health application must generate audit records for all successful and unsuccessful attempts to access protected categories of information, such as classification levels.",
    "Source": "V-222453: The application must generate audit records when successful/unsuccessful attempts to access categories of information (e.g., classification levels) occur. Configure the application to create an audit record for both successful and unsuccessful attempts to access protected categories of information \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging access to protected categories of information ensures compliance with healthcare data privacy regulations, supports forensic investigations, and enhances accountability for safeguarding sensitive health data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-021",
    "Parent PUIDs": "SECM-CAT-IDS-019",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for all successful and unsuccessful attempts to access protected categories of information, such as classification levels."
  },
  {
    "PUID": "SECM-CAT-IDS-021",
    "Requirement description": "The mobile health application must generate audit records for all successful and unsuccessful attempts to modify protected categories of information, such as classification levels.",
    "Source": "V-222457: The application must generate audit records when successful/unsuccessful attempts to modify categories of information (e.g., classification levels) occur. Configure the application to create an audit record for both successful and unsuccessful attempts to modify protected categories of information \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging modification attempts to protected information categories ensures data integrity, supports regulatory compliance, and enables effective monitoring of unauthorized changes to sensitive health data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-022",
    "Parent PUIDs": "SECM-CAT-IDS-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for all successful and unsuccessful attempts to modify protected categories of information, such as classification levels."
  },
  {
    "PUID": "SECM-CAT-IDS-022",
    "Requirement description": "The mobile health application must generate audit records for all successful and unsuccessful attempts to delete protected categories of information, such as classification levels.",
    "Source": "V-222461: The application must generate audit records when successful/unsuccessful attempts to delete categories of information (e.g., classification levels) occur. Configure the application to create an audit record for both successful and unsuccessful attempts to delete protected categories of information \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging deletion attempts ensures the integrity and availability of critical health data, supports regulatory compliance, and facilitates investigations into unauthorized actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-023",
    "Parent PUIDs": "SECM-CAT-IDS-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for all successful and unsuccessful attempts to delete protected categories of information, such as classification levels."
  },
  {
    "PUID": "SECM-CAT-IDS-023",
    "Requirement description": "The mobile health application must generate audit records for all successful and unsuccessful attempts to delete security levels.",
    "Source": "V-222459: The application must generate audit records when successful/unsuccessful attempts to delete security levels occur. Configure the application to create an audit record for both successful and unsuccessful attempts to delete security levels \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Maintaining detailed logs of deletion activities ensures accountability, aids in forensic investigations, and upholds the integrity of security configurations within the mobile health application.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-024",
    "Parent PUIDs": "SECM-CAT-IDS-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for all successful and unsuccessful attempts to delete security levels."
  },
  {
    "PUID": "SECM-CAT-IDS-024",
    "Requirement description": "The mobile health application must generate audit records for both successful and unsuccessful attempts to modify privileges.",
    "Source": "V-222454: The application must generate audit records when successful/unsuccessful attempts to modify privileges occur. Configure the application to audit successful and unsuccessful attempts to modify privileges \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Auditing modifications to user privileges is essential for maintaining security and ensuring that unauthorized privilege escalation or changes are detected and appropriately addressed.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-025",
    "Parent PUIDs": "SECM-CAT-IDS-023",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate audit records for both successful and unsuccessful attempts to modify privileges."
  },
  {
    "PUID": "SECM-CAT-IDS-025",
    "Requirement description": "The mobile health application must log the destination IP addresses for all connections made by the application.",
    "Source": "V-222470: The application must log destination IP addresses. Configure the application to record the destination IP address of the remote system \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging destination IP addresses is crucial for monitoring network activity, identifying malicious behavior, and supporting after-the-fact forensic investigations in compliance with healthcare security requirements.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-026",
    "Parent PUIDs": "SECM-CAT-IDS-024",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must log the destination IP addresses for all connections made by the application."
  },
  {
    "PUID": "SECM-CAT-IDS-026",
    "Requirement description": "The mobile health application must log user actions involving data access and changes, specifying the data elements accessed or modified and the corresponding user actions.",
    "Source": "V-222471: The application must log user actions involving access to data. Identify the specific data elements requiring protection and audit access to the data \\[15\\].  V-222472: The application must log user actions involving changes to data. Configure the application to log all changes to application data \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging user access to and changes in sensitive healthcare data ensures compliance with regulatory standards, supports forensic investigations, and helps detect unauthorized activities.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-027",
    "Parent PUIDs": "SECM-CAT-IDS-025",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must log user actions involving data access and changes, specifying the data elements accessed or modified and the corresponding user actions."
  },
  {
    "PUID": "SECM-CAT-IDS-027",
    "Requirement description": "The mobile health application must log all successful and unsuccessful attempts to delete user privileges.",
    "Source": "V-222458: The application must generate audit records when successful/unsuccessful attempts to delete privileges occur. Configure the application to audit successful and unsuccessful attempts to delete privileges \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging attempts to delete user privileges ensures transparency, accountability, and detection of unauthorized or malicious actions, protecting sensitive health data and maintaining user role integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-028",
    "Parent PUIDs": "SECM-CAT-IDS-026",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must log all successful and unsuccessful attempts to delete user privileges."
  },
  {
    "PUID": "SECM-CAT-IDS-028",
    "Requirement description": "The mobile health application must generate detailed and time-synchronized audit records containing event type, date and time, user identity, and associated outcomes for security and accountability.",
    "Source": "V-222446: The application must record a time stamp indicating when the event occurred. Configure the application to record the time the event occurred when recording the event \\[15\\].  4.7 Communications and Operations Management: Consideration ID-15 Consider the Definition of Minimum Requirements and Specifications for Audit and Logging Capabilities to be Used by Member Organizations: Member organizations should consider use of common logging and auditing functions to facilitate trust relationships and to meet accountability obligations \\[10\\].  V-222476: The application must produce audit records that contain information to establish the outcome of the events. Configure the application to include the outcome of application functions or events \\[15\\].  V-222477: The application must generate audit records containing information that establishes the identity of any individual or process associated with the event. Configure the application to log the identity of the user and/or the process associated with the event \\[15\\].  V-222478: The application must generate audit records containing the full-text recording of privileged commands or the individual identities of group account users. Configure the application to log the full text recording of privileged commands or the individual identities of group users \\[15\\].  4.7 Communications and Operations Management: Security Requirement 42 -- Minimum Content of Audit Logs: The EHRi audit log and the audit logs of PoS systems connecting to the EHRi must contain:  a\\) The user ID of the accessing user;  b\\) The role the user is exercising;  c\\) The organization of the accessing user (at least in those cases where an individual accesses information on behalf of more than one organization);  d\\) The patient ID of the data subject (patient/person);  e\\) The function performed by the accessing user;  f\\) A timestamp;  g\\) In the case of access override to blocked or masked records or portions of records, a reason for the override, as chosen by the user making the access; and  h\\) In the case of changes to consent directives made by a substitute decision-maker, the identity of the decision-maker.  V-222448: The application must provide audit record generation capability for connecting system IP addresses. Configure the application or application server to log all connecting IP address information \\[15\\].  V-222497: The applications must use internal system clocks to generate time stamps for audit records. Configure the application to use the hosting systems internal clock for audit record generation \\[15\\].  V-222498: The application must record time stamps for audit records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT). Configure the application to use the underlying system clock that maps to relevant UTC or GMT time zone \\[15\\].  V-222499: The application must record time stamps for audit records that meet a granularity of one second for a minimum degree of precision. Configure the application to leverage the underlying operating system as the time source when recording time stamps or design the application to ensure granularity of 1 second as the minimum degree of precision \\[15\\].  V-222473: The application must produce audit records containing information to establish when (date and time) the events occurred. Configure the application or application server to include the date and the time of the event in the audit logs \\[15\\].  V-222449: The application must record the username or user ID of the user associated with the event. Configure the application to record the user ID of the user responsible for the log event entry \\[15\\].  AU-8 TIME STAMPS  Control:  a\\. Use internal system clocks to generate time stamps for audit records; and  b\\. Record time stamps for audit records that meet \\[Assignment: organization-defined granularity of time measurement\\] and that use Coordinated Universal Time, have a fixed local time offset from Coordinated Universal Time, or that include the local time offset as part of the time stamp \\[11\\].  AU-3 CONTENT OF AUDIT RECORDS  Control: Ensure that audit records contain information that establishes the following:  a\\. What type of event occurred;  b\\. When the event occurred;  c\\. Where the event occurred;  d\\. Source of the event;  e\\. Outcome of the event; and  f\\. Identity of any individuals, subjects, or objects/entities associated with the event \\[11\\].  V-222474: The application must produce audit records containing enough information to establish which component, feature or function of the application triggered the audit event. Configure the application to log which component, feature or functionality of the application triggered the event \\[15\\].  12.4.1 Event logging  Control: Event logs recording user activities, exceptions, faults and information security events should be produced, kept and regularly reviewed.  Event logs should include, when relevant:  user IDs;  system activities;  dates, times and details of key events, e.g. log-on and log-off;  device identity or location if possible and system identifier;  records of successful and rejected system access attempts;  records of successful and rejected data and other resource access attempts;  changes to system configuration;  use of privileges;  use of system utilities and applications;  files accessed and the kind of access;  network addresses and protocols;  alarms raised by the access control system;  activation and de-activation of protection systems, such as anti-virus systems and intrusion detection systems;  records of transactions executed by users in applications \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Comprehensive and precise audit logging supports forensic analysis, accountability, compliance, and incident response in mobile health applications, ensuring integrity and security of operations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-029",
    "Parent PUIDs": "SECM-CAT-IDS-027",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must generate detailed and time-synchronized audit records containing event type, date and time, user identity, and associated outcomes for security and accountability."
  },
  {
    "PUID": "SECM-CAT-IDS-029",
    "Requirement description": "The mobile health application must automatically log all account lifecycle actions, including creation, modification, enabling, disabling, and removal, capturing account name, event type, and timestamp.",
    "Source": "Control Enhancements:  \\(4\\) ACCOUNT MANAGEMENT \\| AUTOMATED AUDIT ACTIONS  Automatically audit account creation, modification, enabling, disabling, and removal actions \\[11\\].  V-222467: The application must generate audit records for all account creations, modifications, disabling, and termination events. Configure the application to log user account creation, modification, disabling, and termination events \\[15\\].  V-222413: The application must automatically audit account creation. Configure the application to write a log entry when a new user account is created. At a minimum, ensure account name, date and time of the event are recorded \\[15\\].  V-222414: The application must automatically audit account modification. Configure the application to write a log entry when a user account is modified. At a minimum, ensure account name, date and time of the event are recorded \\[15\\].  V-222415: The application must automatically audit account disabling actions. Configure the application to write a log entry when a user account is disabled. At a minimum, ensure account name, date and time of the event are recorded \\[15\\].  V-222416: The application must automatically audit account removal actions. Configure the application to write a log entry when a user account is removed. At a minimum, ensure account name, date and time of the event are recorded \\[15\\].  V-222421: The application must automatically audit account enabling actions. Configure the application to write a log entry when a user account is enabled. At a minimum, ensure account name, date and time of the event are recorded \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Automated logging of account lifecycle events ensures traceability, supports forensic investigations, and meets regulatory compliance requirements for securing sensitive healthcare data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-030",
    "Parent PUIDs": "SECM-CAT-IDS-028",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must automatically log all account lifecycle actions, including creation, modification, enabling, disabling, and removal, capturing account name, event type, and timestamp."
  },
  {
    "PUID": "SECM-CAT-IDS-030",
    "Requirement description": "The mobile health application must log all configuration changes, capturing details of the user account making the change, event type, and timestamp.",
    "Source": "V-222512: The application must audit who makes configuration changes to the application. Configure the application to create log entries that can be used to identify the user accounts that make application configuration changes \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Logging configuration changes enhances traceability, supports accountability, and helps in investigating unauthorized or erroneous modifications critical to healthcare applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-031",
    "Parent PUIDs": "SECM-CAT-IDS-029",
    "Exclusion PUIDs": "Not described",
    "Importance": "86",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must log all configuration changes, capturing details of the user account making the change, event type, and timestamp."
  },
  {
    "PUID": "SECM-CAT-IDS-031",
    "Requirement description": "The mobile health application must securely log all accesses, modifications, or archiving of personal health information (PHI), ensuring accountability and non-repudiation for all user interactions.",
    "Source": "12.4.1 Event logging: health information systems processing personal health information should create a secure audit record each time a user accesses, creates, updates or archives personal health information via the system \\[7\\].  4.7. Communications and Operations Management: Security Requirement 46 -- Reporting Every Access to a Patient/Person\\'s HER: The EHRi must be capable of identifying all users who have accessed or modified a given patient/person\\'s record(s) over a given period of time \\[10\\].  AU-10 NON-REPUDIATION  Control: Provide irrefutable evidence that an individual (or process acting on behalf of an individual) has performed \\[Assignment: organization-defined actions to be covered by non-repudiation\\] \\[11\\].  7\\) Non-Repudiation: It guarantees the reliability of the data communicated in epidemic situation applications, where the originator of the data is not able to deny the validity of the signature transmitted \\[31\\].  V-222438: The application must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation. Configure the application to provide users with a non-repudiation function in the form of digital signatures when it is required by the organization or by the application design and architecture \\[15\\].  4.7. Communications and Operations Management: Security Requirement 47 -- Reporting Every Access by a User: The EHRi must be capable of identifying all patients/persons whose records have been accessed or modified by a given user over a given period of time \\[10\\].  V-222512: The application must audit who makes configuration changes to the application. Configure the application to create log entries that can be used to identify the user accounts that make application configuration changes \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Secure logging of PHI interactions strengthens accountability, enables auditability, and supports compliance with healthcare regulations by identifying users involved in PHI actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-032",
    "Parent PUIDs": "SECM-CAT-IDS-030",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must securely log all accesses, modifications, or archiving of personal health information (PHI), ensuring accountability and non-repudiation for all user interactions."
  },
  {
    "PUID": "SECM-CAT-IDS-032",
    "Requirement description": "The mobile health application must enforce strict access controls for configuration settings, ensuring only authorized users can modify or view application configurations.",
    "Source": "V-222511: The application must enforce access restrictions associated with changes to application configuration. Configure the application to limit access to configuration settings to only authorized users \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Restricting access to application configurations reduces the risk of unauthorized changes that may compromise system security or functionality, safeguarding sensitive healthcare operations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-033",
    "Parent PUIDs": "SECM-CAT-IDS-031",
    "Exclusion PUIDs": "Not described",
    "Importance": "85",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must enforce strict access controls for configuration settings, ensuring only authorized users can modify or view application configurations."
  },
  {
    "PUID": "SECM-CAT-IDS-033",
    "Requirement description": "The mobile health application must utilize transaction recovery logs for all database operations, ensuring the ability to restore data integrity in the event of failure or rollback.",
    "Source": "V-222479: The application must implement transaction recovery logs when transaction based. Configure the application database to utilize transactional logging\\ \\ Transaction recovery through logs allows you to record transactional operations performed in the database, including both modifications and insertions and deletions of data \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Transaction recovery logging ensures that all changes to the database are tracked, enabling the restoration of the system to a consistent state after errors, interruptions, or failures, which is critical for maintaining data integrity in health-related applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-034",
    "Parent PUIDs": "SECM-CAT-IDS-032",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must utilize transaction recovery logs for all database operations, ensuring the ability to restore data integrity in the event of failure or rollback."
  },
  {
    "PUID": "SECM-CAT-IDS-034",
    "Requirement description": "The mobile health application must retain historical records of personal health information updates, including the original data, changes made, and associated audit details such as user identity and timestamps.",
    "Source": "12.4.1 Event logging: When personal health information is updated, a record of the former content of the data and the associated audit record (i.e. who entered the data on what date) should be retained \\[7\\].  8.15 Logging: Logs that record activities, exceptions, faults and other relevant events should be produced, stored, protected and analyzed. (It could be used for logging and auditing) \\[6\\].",
    "Priority": "Not described",
    "Rationale": "Retaining comprehensive logs of data updates is essential for accountability, non-repudiation, and compliance with health information privacy and security regulations. These logs support auditability and forensic investigations while maintaining data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-035",
    "Parent PUIDs": "SECM-CAT-IDS-033",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must retain historical records of personal health information updates, including the original data, changes made, and associated audit details such as user identity and timestamps."
  },
  {
    "PUID": "SECM-CAT-IDS-035",
    "Requirement description": "The mobile health application must implement an emergency access procedure to allow authorized access to electronic protected health information (ePHI) during emergencies.",
    "Source": "§ 164.312 Technical safeguards.  \\(a\\)  \\(2\\) Implementation specifications:  \\(i\\)  1\\. Emergency access procedure (Required):  Establish (and implement as needed) procedures for obtaining necessary electronic protected health information during an emergency \\[9\\].",
    "Priority": "Not described",
    "Rationale": "Emergency access ensures the availability of critical health information to authorized personnel in life-threatening or urgent scenarios, complying with § 164.312 technical safeguards for ePHI access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-036",
    "Parent PUIDs": "SECM-CAT-IDS-034",
    "Exclusion PUIDs": "Not described",
    "Importance": "84",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement an emergency access procedure to allow authorized access to electronic protected health information (ePHI) during emergencies."
  },
  {
    "PUID": "SECM-CAT-IDS-036",
    "Requirement description": "The mobile health application must maintain a transmission log for messages containing personal health information (PHI), recording metadata such as time, date, origin, and destination, while excluding message content.",
    "Source": "12.4.1 Event logging: Messaging systems used to transmit messages containing personal health information should keep a log of message transmissions (such a log should contain the time, date, origin and destination of the message, but not its content) \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Logging metadata for message transmissions ensures accountability and traceability without compromising the confidentiality of sensitive health information, aligning with health data logging standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-037",
    "Parent PUIDs": "SECM-CAT-IDS-035",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must maintain a transmission log for messages containing personal health information (PHI), recording metadata such as time, date, origin, and destination, while excluding message content."
  },
  {
    "PUID": "SECM-CAT-IDS-037",
    "Requirement description": "The mobile health application must implement organization-defined data mining detection techniques to monitor and safeguard data storage objects from unauthorized data mining attempts.",
    "Source": "V-222424: The application must utilize organization-defined data mining detection techniques for organization-defined data storage objects to adequately detect data mining attempts. Utilize and implement data mining protections when requirements specify it \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Detecting and preventing data mining ensures that sensitive patient information stored within the application remains secure and is not misused or accessed inappropriately.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-038",
    "Parent PUIDs": "SECM-CAT-IDS-036",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement organization-defined data mining detection techniques to monitor and safeguard data storage objects from unauthorized data mining attempts."
  },
  {
    "PUID": "SECM-CAT-IDS-038",
    "Requirement description": "The mobile health application must include facilities for analyzing logs and audit trails to identify users who have accessed or modified patient records, as well as patients whose records were accessed by specific users, within a defined time frame.",
    "Source": "4.7. Communications and Operations Management: Security Requirement 48 -- Analyzing EHRi Audit Logs for Patients/Persons at Elevated Risk: The EHRi must provide functions for analyzing logs and audit trails to allow the identification of all users who have accessed or modified such record(s) over a given period of time \\[10\\].  12.4.1 Event logging: 7. Health information systems containing personal health information should be provided with facilities for analyzing logs and audit trails that:  a\\) allow the identification of all system users who have accessed or modified a given subject of care's record(s) over a given period of time;  b\\) allow the identification of all subjects of care whose records have been accessed or modified by a given system user over a given period of time. \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Enabling comprehensive log analysis ensures accountability and enhances security by identifying potential misuse or unauthorized access to sensitive health records.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-039",
    "Parent PUIDs": "SECM-CAT-IDS-037",
    "Exclusion PUIDs": "Not described",
    "Importance": "83",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must include facilities for analyzing logs and audit trails to identify users who have accessed or modified patient records, as well as patients whose records were accessed by specific users, within a defined time frame."
  },
  {
    "PUID": "SECM-CAT-IDS-039",
    "Requirement description": "The mobile health application must include an audit reduction capability for on-demand reporting, real-time review, and forensic investigations, supporting both centralized and local audit log analysis.",
    "Source": "V-222489: The application must provide an audit reduction capability that supports on-demand reporting requirements. Configure the application to generate soft copy, hard copy and/or screen-based reports based on the selected filtered event data \\[15\\].  V-222490: The application must provide an audit reduction capability that supports on-demand audit review and analysis. Configure the application to log to a centralized auditing capability that provides on-demand reports based on the filtered audit event data or design or configure the application to meet the requirement \\[15\\].  V-222491: The application must provide an audit reduction capability that supports after-the-fact investigations of security incidents. Configure the application to provide an audit reduction capability that supports forensic investigations \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Audit reduction capabilities streamline security incident investigations, enabling efficient reporting, analysis, and compliance with regulatory requirements.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-040",
    "Parent PUIDs": "SECM-CAT-IDS-038",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must include an audit reduction capability for on-demand reporting, real-time review, and forensic investigations, supporting both centralized and local audit log analysis."
  },
  {
    "PUID": "SECM-CAT-IDS-040",
    "Requirement description": "Ensure the mobile health application provides an audit reduction and reporting capability that preserves the original content and time ordering of audit records.",
    "Source": "V-222495: The application must provide an audit reduction capability that does not alter original content or time ordering of audit records. Configure the application to not alter original log content or time ordering of audit records \\[15\\].  V-222496: The application must provide a report generation capability that does not alter original content or time ordering of audit records. Configure and design the application to not modify source logs when filtering events \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Maintaining unaltered audit logs ensures data integrity, compliance with regulations, and reliability for forensic investigations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-041",
    "Parent PUIDs": "SECM-CAT-IDS-039",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application provides an audit reduction and reporting capability that preserves the original content and time ordering of audit records."
  },
  {
    "PUID": "SECM-CAT-IDS-041",
    "Requirement description": "Ensure the mobile health application provides filtering capabilities for audit records, enabling event searches based on organization-defined criteria.",
    "Source": "V-222488: The application must provide the capability to filter audit records for events of interest based upon organization-defined criteria. Configure the application filters to search event logs based on defined criteria \\[15\\].  V-222492: The application must provide a report generation capability that supports on-demand audit review and analysis. Design or configure the application to provide an immediate audit review capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting \\[15\\].  V-222493: The application must provide a report generation capability that supports on-demand reporting requirements. Design or configure the application to provide an on-demand report generation capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Filtering audit logs based on specific criteria supports efficient incident investigation, compliance, and operational monitoring.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-042",
    "Parent PUIDs": "SECM-CAT-IDS-040",
    "Exclusion PUIDs": "Not described",
    "Importance": "82",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application provides filtering capabilities for audit records, enabling event searches based on organization-defined criteria."
  },
  {
    "PUID": "SECM-CAT-IDS-042",
    "Requirement description": "Ensure the mobile health application employs cryptographic mechanisms to protect the integrity of audit logs, preventing tampering or unauthorized modifications.",
    "Source": "V-222507: The application must use cryptographic mechanisms to protect the integrity of audit information. Configure the application to create an integrity check consisting of a cryptographic hash or one-way digest that can be used to establish the integrity when storing log files \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Cryptographic protection ensures the integrity of audit information, safeguarding it against tampering and preserving its value for forensic analysis and compliance audits.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-043",
    "Parent PUIDs": "SECM-CAT-IDS-041",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application employs cryptographic mechanisms to protect the integrity of audit logs, preventing tampering or unauthorized modifications."
  },
  {
    "PUID": "SECM-CAT-IDS-043",
    "Requirement description": "The mobile health application must safeguard audit tools and audit logs from unauthorized deletion by implementing access controls and role-based permissions.",
    "Source": "V-222505: The application must protect audit tools from unauthorized deletion. Configure the application to protect audit tools from unauthorized deletions. Limit users to roles that are assigned the rights to edit or delete audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings \\[15\\].  V-222502: The application must protect audit information from unauthorized deletion. Configure the application to protect audit data from unauthorized deletion. Limit users to roles that are assigned the rights to delete audit data and establish permissions that control access to the audit logs and audit configuration settings \\[15\\].  V-222500: The application must protect audit information from any type of unauthorized read access. Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish permissions that control access to the audit logs and audit configuration settings \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Protecting audit tools and logs ensures the integrity and availability of audit data for compliance, security monitoring, and forensic investigations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-044",
    "Parent PUIDs": "SECM-CAT-IDS-042",
    "Exclusion PUIDs": "Not described",
    "Importance": "81",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must safeguard audit tools and audit logs from unauthorized deletion by implementing access controls and role-based permissions."
  },
  {
    "PUID": "SECM-CAT-IDS-044",
    "Requirement description": "The mobile health application must protect audit information and tools from unauthorized modification and access by implementing strict role-based access controls and secure permissions.",
    "Source": "V-222501: The application must protect audit information from unauthorized modification. Configure the application to protect audit data from unauthorized modification and changes. Limit users to roles that are assigned the rights to edit audit data and establish permissions that control access to the audit logs and audit configuration settings \\[15\\].  V-222504: The application must protect audit tools from unauthorized modification. Configure the application to protect audit tools from unauthorized modifications. Limit users to roles that are assigned the rights to edit or update audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings \\[15\\].  V-222503: The application must protect audit tools from unauthorized access. Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Safeguarding the integrity and confidentiality of audit data and tools ensures reliable auditing and compliance with security standards, preventing unauthorized tampering or access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-045",
    "Parent PUIDs": "SECM-CAT-IDS-043",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must protect audit information and tools from unauthorized modification and access by implementing strict role-based access controls and secure permissions."
  },
  {
    "PUID": "SECM-CAT-IDS-045",
    "Requirement description": "The mobile health application must secure access to audit logs and tools by implementing cryptographic hashing, tamper-proof storage, and access safeguards to prevent misuse or compromise.",
    "Source": "4.7. Communications and Operations Management: Security Requirement 49 -- Securing Access to EHRi Audit Logs: The EHRi must secure access to audit records and must safeguard access to system audit tools and audit trails to prevent misuse or compromise \\[10\\]  V-222508: Application audit tools must be cryptographically hashed. Cryptographically hash the audit tool files used by the application. Store and protect the generated hash values for future reference \\[15\\].  12.4.2. Protection of log Information: Audit records shall be secure and tamper-proof. Access to system audit tools and audit trails shall be safeguarded to prevent misuse or compromise \\[7\\].",
    "Priority": "Not described",
    "Rationale": "Protecting audit records and tools from unauthorized access or tampering ensures data integrity, supports compliance with healthcare regulations, and preserves audit reliability.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-046",
    "Parent PUIDs": "SECM-CAT-IDS-044",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must secure access to audit logs and tools by implementing cryptographic hashing, tamper-proof storage, and access safeguards to prevent misuse or compromise."
  },
  {
    "PUID": "SECM-CAT-IDS-046",
    "Requirement description": "The mobile health application must implement automated backup processes to securely copy audit records to a separate system or storage component at least every seven days, in compliance with organizational policies and risk-level guidelines.",
    "Source": "V-222506: The application must back up audit records at least every seven days onto a different system or system component than the system or component being audited. Configure application backup settings to backup application audit logs every 7 days \\[15\\].  V-222638: Data backup must be performed at required intervals in accordance with DoD policy. Develop and implement backup procedures based on risk level of the system and in accordance with DoD policy \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Regularly backing up audit records ensures data availability, supports forensic analysis, and prevents data loss in the event of system failures or security incidents.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-047",
    "Parent PUIDs": "SECM-CAT-IDS-045",
    "Exclusion PUIDs": "Not described",
    "Importance": "80",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement automated backup processes to securely copy audit records to a separate system or storage component at least every seven days, in compliance with organizational policies and risk-level guidelines."
  },
  {
    "PUID": "SECM-CAT-IDS-047",
    "Requirement description": "The mobile health application must implement a process to validate the integrity of audit tools by periodically verifying their cryptographic hash values to detect and prevent tampering.",
    "Source": "V-222509: The integrity of the audit tools must be validated by checking the files for changes in the cryptographic hash value. Establish a process to periodically check the audit tool cryptographic hashes to ensure the audit tools have not been tampered with \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Validating the integrity of audit tools ensures their reliability, prevents unauthorized modifications, and maintains the security of audit processes.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-048",
    "Parent PUIDs": "SECM-CAT-IDS-046",
    "Exclusion PUIDs": "Not described",
    "Importance": "79",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement a process to validate the integrity of audit tools by periodically verifying their cryptographic hash values to detect and prevent tampering."
  },
  {
    "PUID": "SECM-CAT-IDS-048",
    "Requirement description": "The mobile health application must ensure that during the uninstallation process, all confidential user data, including health information and app-specific credentials, is securely deleted from the device, storage media, and execution environment.",
    "Source": "1.11. Ensure that during application removal (uninstall operation), any confidential user data and the corresponding app-specific credentials are deleted from the execution environment, the device, and any other storage medium \\[16\\].  Delete all stored health information before discarding or reusing the mobile device \\[32\\].",
    "Priority": "Not described",
    "Rationale": "Secure removal of user data during app uninstallation mitigates risks of data leakage, unauthorized access, and potential privacy violations.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-049",
    "Parent PUIDs": "SECM-CAT-IDS-047",
    "Exclusion PUIDs": "Not described",
    "Importance": "79",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure that during the uninstallation process, all confidential user data, including health information and app-specific credentials, is securely deleted from the device, storage media, and execution environment."
  },
  {
    "PUID": "SECM-CAT-IDS-049",
    "Requirement description": "The mobile health application must store configuration and control files in a directory separate from user data to enhance security and prevent unauthorized access to application settings.",
    "Source": "V-222626: The designer must ensure the application does not store configuration and control files in the same directory as user data. Separate the application user data into a different directory than the application code and user file permissions to restrict user access to application configuration settings \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Segregating application configuration files from user data reduces the risk of accidental or malicious modification of configuration files and enhances overall application security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-050",
    "Parent PUIDs": "SECM-CAT-IDS-048",
    "Exclusion PUIDs": "Not described",
    "Importance": "78",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must store configuration and control files in a directory separate from user data to enhance security and prevent unauthorized access to application settings."
  },
  {
    "PUID": "SECM-CAT-IDS-050",
    "Requirement description": "The mobile health application must ensure the confidentiality and integrity of stored information by implementing approved cryptographic mechanisms to protect sensitive data elements at rest, in compliance with DoD policy and data owner requirements.",
    "Source": "V-222587: The application must protect the confidentiality and integrity of stored information when required by DoD policy or the information owner. Identify data elements that require protection. Document the data types and specify protection requirements and methods used \\[15\\].  V-222588: The application must implement approved cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components. Identify data elements that require protection. Document the data types and specify encryption requirements. Encrypt data according to DoD policy or data owner requirements \\[15\\].  V-222589: The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Protecting data at rest through encryption and integrity mechanisms mitigates the risk of unauthorized access or modification, ensuring compliance with security standards and safeguarding sensitive health information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-051",
    "Parent PUIDs": "SECM-CAT-IDS-049",
    "Exclusion PUIDs": "Not described",
    "Importance": "78",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure the confidentiality and integrity of stored information by implementing approved cryptographic mechanisms to protect sensitive data elements at rest, in compliance with DoD policy and data owner requirements."
  },
  {
    "PUID": "SECM-CAT-IDS-051",
    "Requirement description": "The mobile health application must prevent the use of insecure cached data in HTTP connections and embedded web browsing components, such as WebViews, by ensuring cache storage is secure and not tampered with.",
    "Source": "12.14. Do not use insecure cached data in HTTP connections and in embedded web browsing capabilities (e.g., WebViews). Caches are usually located on the device file system. Many platforms allow applications to place this cached data to insecure locations (e.g., sdcard on Android) in which they can be easily tampered \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Storing HTTP or WebView cache data in insecure locations can lead to data tampering and unauthorized access, compromising sensitive health information and application integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-052",
    "Parent PUIDs": "SECM-CAT-IDS-050",
    "Exclusion PUIDs": "Not described",
    "Importance": "78",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must prevent the use of insecure cached data in HTTP connections and embedded web browsing components, such as WebViews, by ensuring cache storage is secure and not tampered with."
  },
  {
    "PUID": "SECM-CAT-IDS-052",
    "Requirement description": "The mobile health application must support remote wipe and kill switch capabilities to securely remove sensitive data in case of theft or loss of the device.",
    "Source": "1.14. Applications on managed devices should leverage remote wipe and kill switch APIs to remove sensitive information from the device in the event of theft or loss \\[16\\].  Install and activate remote wiping or remote disabling: As discussed, the deletion system for personalized mobile health data can be deleted at the app level and the individual level \\[32\\].  IPC-006 Remote removal of my personal data on a lost mobile device \\[26\\].",
    "Priority": "Not described",
    "Rationale": "Remote wipe and kill switch mechanisms ensure sensitive health information is protected by enabling quick and secure data removal when a device is compromised, thereby mitigating risks of unauthorized access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-053",
    "Parent PUIDs": "SECM-CAT-IDS-051",
    "Exclusion PUIDs": "Not described",
    "Importance": "77",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must support remote wipe and kill switch capabilities to securely remove sensitive data in case of theft or loss of the device."
  },
  {
    "PUID": "SECM-CAT-IDS-053",
    "Requirement description": "Incorporate an application-specific \\\"data kill switch\\\" feature to securely delete sensitive data associated with the mobile health application, ensuring strong user authentication to prevent misuse.",
    "Source": "1.15. Application developers may want to incorporate an application-specific \\\"data kill switch\\\" into their products, to allow the per-app deletion of their application\\'s sensitive data when needed (strong authentication is required to protect misuse of such a feature) \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Protects personal health information (PHI) and other sensitive data by allowing secure, app-specific data deletion, enhancing data security in emergency scenarios or user-initiated actions.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-054",
    "Parent PUIDs": "SECM-CAT-IDS-052",
    "Exclusion PUIDs": "Not described",
    "Importance": "77",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Incorporate an application-specific \\\"data kill switch\\\" feature to securely delete sensitive data associated with the mobile health application, ensuring strong user authentication to prevent misuse."
  },
  {
    "PUID": "SECM-CAT-IDS-054",
    "Requirement description": "Ensure the mobile health application does not store sensitive information in hidden fields or embed authentication data in any code, configuration files, or other files.",
    "Source": "V-222601: The application must not store sensitive information in hidden fields. Design and configure the application to not store sensitive information in hidden fields \\[15\\].  V-222642: The application must not contain embedded authentication data. Remove embedded authentication data stored in code, configuration files, scripts, HTML file, or any ASCII files \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Storing sensitive data in hidden fields or embedding authentication credentials increases the risk of unauthorized access or data breaches, compromising patient confidentiality and application security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-055",
    "Parent PUIDs": "SECM-CAT-IDS-053",
    "Exclusion PUIDs": "Not described",
    "Importance": "76",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application does not store sensitive information in hidden fields or embed authentication data in any code, configuration files, or other files."
  },
  {
    "PUID": "SECM-CAT-IDS-055",
    "Requirement description": "Ensure that sensitive data stored by the mobile health application is encrypted and protected based on its classification and retained only for the duration necessary for its functionality.",
    "Source": "MASVS-STORAGE-1: The app securely stores sensitive data: Any sensitive data that is intentionally stored by the app is properly protected independently of the target location \\[20\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[5\\].  1.5. Do not store/cache sensitive data (including keys) unless they are encrypted and if possible stored in a platform supported tamper-proof area \\[5\\].  1.7. Do not store historical location data or other sensitive information on the device beyond the period required by the application. Assume that shared storage is untrusted - information may easily leak in unexpected ways through any shared storage. In particular:  Be aware of caches and temporary storage as a possible leakage channel, when shared with other apps.  Be aware of shared storage such as address book, media gallery, audio files, as a possible leakage channel. For example, storing images with location metadata in the media-gallery allows that information to be shared in unintended ways.  Do not store temporary cached data in a world readable directory \\[16\\]",
    "Priority": "Not described",
    "Rationale": "Ensure that sensitive data stored by the mobile health application is encrypted and protected based on its classification and retained only for the duration necessary for its functionality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-056",
    "Parent PUIDs": "SECM-CAT-IDS-054",
    "Exclusion PUIDs": "Not described",
    "Importance": "76",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure that sensitive data stored by the mobile health application is encrypted and protected based on its classification and retained only for the duration necessary for its functionality."
  },
  {
    "PUID": "SECM-CAT-IDS-056",
    "Requirement description": "Ensure the mobile health application securely deletes all cached data upon termination to prevent sensitive information exposure.",
    "Source": "1.31. Delete application caches on app termination \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Retaining cached data after app termination increases the risk of sensitive information being accessed by unauthorized users or other applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-057",
    "Parent PUIDs": "SECM-CAT-IDS-055",
    "Exclusion PUIDs": "Not described",
    "Importance": "76",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application securely deletes all cached data upon termination to prevent sensitive information exposure."
  },
  {
    "PUID": "SECM-CAT-IDS-057",
    "Requirement description": "Ensure the mobile health application removes all temporary files upon termination to prevent unauthorized access to sensitive data.",
    "Source": "SRG-APP-000516-MAPP-000065: The mobile app must remove temporary files when it terminates \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Retaining temporary files after application termination increases the risk of exposing sensitive information to unauthorized users or malicious applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-058",
    "Parent PUIDs": "SECM-CAT-IDS-056",
    "Exclusion PUIDs": "Not described",
    "Importance": "75",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application removes all temporary files upon termination to prevent unauthorized access to sensitive data."
  },
  {
    "PUID": "SECM-CAT-IDS-058",
    "Requirement description": "Ensure the mobile health application restricts the upload of files to only those of secure and approved types, implementing validation and processing controls to mitigate risks associated with dangerous file types.",
    "Source": "CWE-434: Unrestricted Upload of File with Dangerous Type  The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product\\'s environment.  The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue. This weakness is caused by missing a security tactic during the architecture and design phase \\[35\\].",
    "Priority": "Not described",
    "Rationale": "Allowing unrestricted file uploads can lead to exploitation by attackers who may upload malicious files, leading to unauthorized access, data corruption, or compromise of system integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-059",
    "Parent PUIDs": "SECM-CAT-IDS-057",
    "Exclusion PUIDs": "Not described",
    "Importance": "75",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile health application restricts the upload of files to only those of secure and approved types, implementing validation and processing controls to mitigate risks associated with dangerous file types."
  },
  {
    "PUID": "SECM-CAT-IDS-059",
    "Requirement description": "Ensure that database files containing sensitive data, such as iOS WebView caches, are securely and completely removed from the file system to prevent residual data exposure.",
    "Source": "1.32. Database files that contain sensitive data (e.g., iOS WebView caches) must be manually removed from the file system. Deleting records using the database API will not necessary lead to complete data removal from database structure \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Using the database API to delete records does not guarantee that sensitive information is fully removed from the database structure, leaving potential security vulnerabilities.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-060",
    "Parent PUIDs": "SECM-CAT-IDS-058",
    "Exclusion PUIDs": "Not described",
    "Importance": "74",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure that database files containing sensitive data, such as iOS WebView caches, are securely and completely removed from the file system to prevent residual data exposure."
  },
  {
    "PUID": "SECM-CAT-IDS-060",
    "Requirement description": "Ensure the mobile application does not write data to persistent memory that is accessible to other applications to prevent unauthorized data access or leakage.",
    "Source": "SRG-APP-000243-MAPP-000049: The mobile app must not write data to persistent memory accessible to other applications \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Storing sensitive or private data in persistent memory locations accessible to other applications increases the risk of data breaches and violates security best practices.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-061",
    "Parent PUIDs": "SECM-CAT-IDS-059",
    "Exclusion PUIDs": "Not described",
    "Importance": "74",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Ensure the mobile application does not write data to persistent memory that is accessible to other applications to prevent unauthorized data access or leakage."
  },
  {
    "PUID": "SECM-CAT-IDS-061",
    "Requirement description": "The mobile health application must ensure correct handling of electronic health records (EHR). It must uniquely identify records and provide functionality to merge multiple records for the same patient/person, ensuring seamless consolidation of unintentional duplicates.",
    "Source": "4.9.2. Correct Processing of Information  Security Requirement 75 -- Uniquely Identifying:\\ b) Be capable of merging two or more EHR records if it is determined that multiple records for the same patient/person have been unintentionally created \\[10\\].",
    "Priority": "Not described",
    "Rationale": "Accurate record management ensures that healthcare providers access complete and consolidated patient information, supporting effective care delivery and compliance with healthcare standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-062",
    "Parent PUIDs": "SECM-CAT-IDS-060",
    "Exclusion PUIDs": "Not described",
    "Importance": "74",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure correct handling of electronic health records (EHR). It must uniquely identify records and provide functionality to merge multiple records for the same patient/person, ensuring seamless consolidation of unintentional duplicates."
  },
  {
    "PUID": "SECM-CAT-IDS-062",
    "Requirement description": "The mobile health application must ensure protection Against Tampered Executables.",
    "Source": "Protection Against Tampered Versions: The system must ensure that interactions from modified or tampered app binaries are identified and handled securely to protect app functionality and data \\[18\\].  Cryptographic Verification of Executables: If the system retrieves executable files from external storage, those files must be signed and cryptographically verified before they are dynamically loaded to ensure their authenticity and integrity \\[18\\].",
    "Priority": "Not described",
    "Rationale": "The mobile health application must ensure protection against tampered app binaries and dynamically loaded executables. Interactions from modified binaries must be identified and handled securely to maintain the integrity of app functionality and data. Executable files retrieved from external storage must be signed and cryptographically verified prior to dynamic loading.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-063",
    "Parent PUIDs": "SECM-CAT-IDS-061",
    "Exclusion PUIDs": "Not described",
    "Importance": "73",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must ensure protection Against Tampered Executables."
  },
  {
    "PUID": "SECM-CAT-IDS-063",
    "Requirement description": "Sensitive data must never be stored in publicly accessible locations, as external storage is globally readable, writable, and modifiable by other applications.",
    "Source": "Non-Sensitive Data Storage: Files created on external storage, such as SD cards, are globally readable and writable. Because external storage can be removed by the user and also modified by any application, only store non-sensitive information using external storage \\[18\\].  MASVS-STORAGE-2: The app prevents leakage of sensitive data: Prevent the unintentional storage or exposure of sensitive data in publicly accessible locations. This control addresses potential leaks that can be avoided through proactive measures by the developer \\[20\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].",
    "Priority": "Not described",
    "Rationale": "By limiting sensitive data storage to private locations, the application protects against unauthorized access, tampering, and exposure, ensuring the security and privacy of user information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-064",
    "Parent PUIDs": "SECM-CAT-IDS-062",
    "Exclusion PUIDs": "Not described",
    "Importance": "73",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Sensitive data must never be stored in publicly accessible locations, as external storage is globally readable, writable, and modifiable by other applications."
  },
  {
    "PUID": "SECM-CAT-IDS-064",
    "Requirement description": "The mobile health application must implement monitoring mechanisms to oversee all data interactions with external storage. Only non-sensitive and validated data may be written to or read from external storage to maintain application security and integrity.",
    "Source": "External Storage Monitoring: The system must monitor any data being written to or read from external storage and ensure that only non-sensitive, validated data is accessed to maintain application integrity \\[18\\].",
    "Priority": "Not described",
    "Rationale": "By actively monitoring external storage operations, the application ensures the protection of its data integrity, prevents unauthorized tampering, and reduces the risk of security breaches due to improper data handling.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-065",
    "Parent PUIDs": "SECM-CAT-IDS-063",
    "Exclusion PUIDs": "Not described",
    "Importance": "72",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement monitoring mechanisms to oversee all data interactions with external storage. Only non-sensitive and validated data may be written to or read from external storage to maintain application security and integrity."
  },
  {
    "PUID": "SECM-CAT-IDS-065",
    "Requirement description": "The mobile health application must implement hardware, software, and procedural mechanisms to log and monitor all activities within systems that process or access electronic protected health information (ePHI).",
    "Source": "§ 164.312 Technical safeguards.  \\(b\\) Standard: Audit controls.  Implement hardware, software, and/or procedural mechanisms that record and examine activity in information systems that contain or use electronic protected health information \\[9\\].  Logging and Monitoring of API Activity: Implement API usage logging and monitoring mechanisms to detect suspicious activity, unauthorized access, or abnormal usage patterns, and trigger alerts when necessary \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Implementing robust logging and monitoring mechanisms ensures the application meets regulatory compliance, such as HIPAA, and mitigates risks associated with unauthorized access or misuse of ePHI, safeguarding patient confidentiality.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-066",
    "Parent PUIDs": "SECM-CAT-IDS-064",
    "Exclusion PUIDs": "Not described",
    "Importance": "72",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must implement hardware, software, and procedural mechanisms to log and monitor all activities within systems that process or access electronic protected health information (ePHI)."
  },
  {
    "PUID": "SECM-CAT-IDS-066",
    "Requirement description": "The mobile health application must utilize internal storage for storing sensitive data wherever feasible. This approach eliminates the dependency on external storage and reduces the need for storage-related permissions, enhancing the security of sensitive information",
    "Source": "Internal Storage for Data: The app must use internal storage instead of external storage, where feasible, to avoid the need for storage-related permissions \\[18\\].",
    "Priority": "Not described",
    "Rationale": "By using internal storage, the application ensures enhanced protection for sensitive data, minimizing the risk of unauthorized access through external storage mechanisms and complying with secure development practices for mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "72",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must utilize internal storage for storing sensitive data wherever feasible. This approach eliminates the dependency on external storage and reduces the need for storage-related permissions, enhancing the security of sensitive information"
  },
  {
    "PUID": "SECM-CAT-IDS-067",
    "Requirement description": "The mobile health application must utilize content providers for securely sharing data with other app processes. Content providers must implement fine-grained, controlled read and write permissions, ensuring the secure exchange of data while preventing unauthorized access or misuse.",
    "Source": "Use Content Provider for Data Sharing: The system must utilize a content provider for sharing data with other app processes. This approach must enable controlled read and write permissions for other apps, ensuring secure data sharing \\[18\\].  1.17. Restrict the data that is shared with other applications (e.g., by implementing an Android Content Provider). This can be accomplished using fine-grained permissions (ensure permissions are protected using signature protection level on Android) \\[16\\].  Write Permission Misuse Prevention: Avoid assuming that the write permission is inherently secure. Developers must be aware that SQL statements with creative WHERE clauses may be used by attackers to infer or confirm sensitive data. Write permissions must be treated with caution, especially if the content provider\\'s data structure is predictable \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Implementing secure content providers for data sharing reduces the risk of unauthorized data access and ensures compliance with best practices for secure development in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-068",
    "Parent PUIDs": "SECM-CAT-IDS-066",
    "Exclusion PUIDs": "Not described",
    "Importance": "71",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must utilize content providers for securely sharing data with other app processes. Content providers must implement fine-grained, controlled read and write permissions, ensuring the secure exchange of data while preventing unauthorized access or misuse."
  },
  {
    "PUID": "SECM-CAT-IDS-068",
    "Requirement description": "The mobile health application must enforce secure practices for accessing content providers. All data handling operations, including reading and writing data, must mitigate potential security threats such as unauthorized access and data manipulation.",
    "Source": "Secure Access to Content Provider: Any application that accesses a content provider must follow secure practices, ensuring all data handling is performed in a way that mitigates potential security threats, including unauthorized access and data manipulation \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Enforcing secure access to content providers ensures sensitive data within mobile health applications is protected against unauthorized access and manipulation, safeguarding user privacy and data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-069",
    "Parent PUIDs": "SECM-CAT-IDS-067",
    "Exclusion PUIDs": "Not described",
    "Importance": "71",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile health application must enforce secure practices for accessing content providers. All data handling operations, including reading and writing data, must mitigate potential security threats such as unauthorized access and data manipulation."
  },
  {
    "PUID": "SECM-CAT-IDS-069",
    "Requirement description": "For mobile health applications, content providers must use the android:exported attribute to control external access. If a content provider is not intended to be accessed by other applications, the android:exported attribute in the manifest must be set to false. For cases where external access is required, the attribute must be set to true, ensuring proper data sharing while maintaining security.",
    "Source": "Export Control: If a content provider is not intended to be accessed by other applications, the android:exported attribute in the manifest must be set to false. If external access is needed, the attribute must be set to true to allow proper access to the data \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Explicitly managing the android:exported attribute ensures that only intended content providers are accessible externally, reducing the risk of unauthorized data access or manipulation in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-070",
    "Parent PUIDs": "SECM-CAT-IDS-068",
    "Exclusion PUIDs": "Not described",
    "Importance": "70",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "For mobile health applications, content providers must use the android:exported attribute to control external access. If a content provider is not intended to be accessed by other applications, the android:exported attribute in the manifest must be set to false. For cases where external access is required, the attribute must be set to true, ensuring proper data sharing while maintaining security."
  },
  {
    "PUID": "SECM-CAT-IDS-070",
    "Requirement description": "Permissions must align with the principle of least privilege, ensuring access is limited to the minimum necessary for the task. Additional permissions may be extended only when explicitly required.",
    "Source": "Export Control: Permission Limitation: When creating an exported content provider, specify distinct permissions for read and write operations, or use a single permission if both operations are required. Ensure permissions are limited to what is necessary for the task, with the option to extend permissions later if required \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Defining specific permissions for exported content providers ensures controlled data access and supports compliance with security policies, reducing the risk of unauthorized operations in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-071",
    "Parent PUIDs": "SECM-CAT-IDS-069",
    "Exclusion PUIDs": "Not described",
    "Importance": "70",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Permissions must align with the principle of least privilege, ensuring access is limited to the minimum necessary for the task. Additional permissions may be extended only when explicitly required."
  },
  {
    "PUID": "SECM-CAT-IDS-071",
    "Requirement description": "Mobile health applications must restrict data access to authorized applications as defined by predefined permissions. Shared data files must not be globally accessible. Access should be granted only to applications or entities with the appropriate private and corresponding public keys, ensuring secure and controlled data sharing.",
    "Source": "Limit Data Access to Specific Applications: The system must ensure that data access is restricted to specific applications as per predefined permissions, avoiding global access to shared data files \\[18\\].  File or data sharing is not enabled at the app layer, although the blockchain resides on a decentralized network. The access to data is provided only to those with the private and corresponding public key \\[32\\].",
    "Priority": "Not described",
    "Rationale": "Restricting data access to authorized applications enhances security and prevents unauthorized entities from accessing sensitive health data. Key-based access control aligns with the principles of secure data sharing in decentralized networks, ensuring data confidentiality and integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-072",
    "Parent PUIDs": "SECM-CAT-IDS-070",
    "Exclusion PUIDs": "Not described",
    "Importance": "70",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must restrict data access to authorized applications as defined by predefined permissions. Shared data files must not be globally accessible. Access should be granted only to applications or entities with the appropriate private and corresponding public keys, ensuring secure and controlled data sharing."
  },
  {
    "PUID": "SECM-CAT-IDS-072",
    "Requirement description": "Mobile health applications must not retain sensitive data in memory for longer than necessary. Sensitive data must be explicitly cleared from memory after its use to reduce the risk of unauthorized access or memory dumps.",
    "Source": "2.10: Verify that the app does not hold sensitive data in memory longer than necessary, and memory is cleared explicitly after use \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Explicitly clearing sensitive data from memory minimizes exposure risks, including unauthorized access and memory-based attacks. This practice ensures compliance with secure coding standards and enhances overall application security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-073",
    "Parent PUIDs": "SECM-CAT-IDS-071",
    "Exclusion PUIDs": "Not described",
    "Importance": "69",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must not retain sensitive data in memory for longer than necessary. Sensitive data must be explicitly cleared from memory after its use to reduce the risk of unauthorized access or memory dumps."
  },
  {
    "PUID": "SECM-CAT-IDS-073",
    "Requirement description": "Mobile health applications must utilize secure system credential storage facilities to safeguard sensitive data, including user credentials and cryptographic keys. The application should leverage industry-standard key management practices, storing data using tools like Credential Manager or equivalent secure mechanisms, and avoiding direct storage of sensitive data such as passwords on the device.",
    "Source": "2.1: Verify that system credential storage facilities are used appropriately to store sensitive data, such as user credentials or cryptographic keys \\[19\\].  Secure Credential Storage: Use Credential Manager for passwordless authentication via passkeys or federated sign-ins (e.g., Sign in with Google). Do not store user IDs or passwords on the device. Instead, use a short-lived, service-specific authorization token after initial authentication \\[18\\].  MASVS-CRYPTO-2: The app performs key management according to industry best practices: Even the strongest cryptography would be compromised by poor key management. This control covers the management of cryptographic keys throughout their lifecycle, including key generation, storage and protection \\[20\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring the secure storage and management of sensitive data and credentials minimizes the risk of unauthorized access, reduces exposure to attacks, and aligns with best practices in cryptographic key management and authentication. This is critical for maintaining user trust and regulatory compliance in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-074",
    "Parent PUIDs": "SECM-CAT-IDS-072",
    "Exclusion PUIDs": "Not described",
    "Importance": "69",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must utilize secure system credential storage facilities to safeguard sensitive data, including user credentials and cryptographic keys. The application should leverage industry-standard key management practices, storing data using tools like Credential Manager or equivalent secure mechanisms, and avoiding direct storage of sensitive data such as passwords on the device."
  },
  {
    "PUID": "SECM-CAT-IDS-074",
    "Requirement description": "Mobile health applications must implement encryption and decryption mechanisms for all electronic protected health information (ePHI) stored on client devices or transmitted through the application.",
    "Source": "§ 164.312 Technical safeguards.  \\(a\\)  \\(2\\) Implementation specifications:  \\(iii\\) Encryption and decryption (Addressable):  Implement a mechanism to encrypt and decrypt electronic protected health information \\[9\\].  Secure Avoid Weak Patterns: 4. If client-side data storage is necessary, encrypt the data using an encryption key securely derived from the user's login credentials. However, there are additional risks that the data will be decrypted via binary attacks. \\[3\\].  Install and enable encryption: All data are encrypted at multiple levels \\[32\\].  Sensitive Information should be encrypted \\[28\\].  4.3.3. Device integrity:  Encryption of data at rest  All systems that serve, manage, and protect systems that serve patient information use disk encryption. All archived patient information and server system files are stored off-site/remotely via encrypted communication with a backup service \\[36\\].",
    "Priority": "Not described",
    "Rationale": "Encrypting ePHI ensures data confidentiality, aligns with technical safeguard requirements for health information, and protects against data breaches. Proper encryption minimizes risks associated with unauthorized access, ensuring compliance with privacy regulations and fostering user trust in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-075",
    "Parent PUIDs": "SECM-CAT-IDS-073",
    "Exclusion PUIDs": "Not described",
    "Importance": "68",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must implement encryption and decryption mechanisms for all electronic protected health information (ePHI) stored on client devices or transmitted through the application."
  },
  {
    "PUID": "SECM-CAT-IDS-075",
    "Requirement description": "Mobile health applications must ensure that the \\\"Remember Me\\\" functionality does not store user passwords on the device. Instead, secure mechanisms such as short-lived tokens or encrypted identifiers should be used to maintain session persistence without compromising the user\\'s credentials.",
    "Source": "Secure Avoid Weak Patterns: 5. The \"Remember Me\" functionality should never store a user's password on the device \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Storing user passwords on devices, even temporarily, introduces a significant security risk, including exposure to unauthorized access or malicious exploitation. By utilizing alternative mechanisms, applications ensure enhanced security while providing a seamless user experience for returning users.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-076",
    "Parent PUIDs": "SECM-CAT-IDS-074",
    "Exclusion PUIDs": "Not described",
    "Importance": "68",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Mobile health applications must ensure that the \\\"Remember Me\\\" functionality does not store user passwords on the device. Instead, secure mechanisms such as short-lived tokens or encrypted identifiers should be used to maintain session persistence without compromising the user\\'s credentials."
  },
  {
    "PUID": "SECM-CAT-IDS-076",
    "Requirement description": "API keys and encryption keys used within mobile health applications must not be embedded directly in the source code to prevent exposure through reverse engineering or decompilation. Instead, they must be securely stored using operating system-provided mechanisms, such as the Android Keystore or iOS Keychain.",
    "Source": "Secure API Key Storage: API keys used within the app must not be embedded directly in the source code to prevent exposure through reverse engineering or decompilation. Use secure storage mechanisms such as Android Keystore to protect API keys within the app \\[18\\].  Secure Storage of Encryption Keys: 1. Ensure encryption keys are securely stored on the mobile device. Avoid storing keys in plain text or easily accessible locations. Consider using secure storage mechanisms provided by the operating system or utilizing hardware-based secure storage options \\[3\\].  Strong Key Storage: API keys must be securely stored using Android Keystore to ensure that sensitive data is protected from unauthorized access \\[18\\].  Application Verification: If credentials are used exclusively by a single application, securely store them in a KeyStore instead of embedding them within the app or device \\[18\\].  Minimize API Key Exposure: API keys should be fetched dynamically from a secure server or environment during runtime where applicable \\[18\\].  1.3. When storing sensitive data on the device, use a file encryption API provided by the OS or other trusted source. Some platforms (e.g., iOS and Android) provide file encryption API's which use a secret key protected by the device unlock code and deletable on remote wipe. If this is available, it should be used as it increases the security of the encryption without creating extra burden on the end-user. It also makes stored data safer in the case of loss or theft. However, it should be borne in mind that even when protected by the device unlock key, if data is stored on the device, its security is dependent on the security of the device unlock code if remote deletion of the key is for any reason not possible \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Directly embedding keys in application code exposes sensitive credentials to potential attackers through reverse engineering or device compromise. By using secure storage mechanisms, the risk of unauthorized access and misuse of API keys or encryption keys is minimized, aligning with best practices for secure app development in healthcare.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-077",
    "Parent PUIDs": "SECM-CAT-IDS-075",
    "Exclusion PUIDs": "Not described",
    "Importance": "68",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "API keys and encryption keys used within mobile health applications must not be embedded directly in the source code to prevent exposure through reverse engineering or decompilation. Instead, they must be securely stored using operating system-provided mechanisms, such as the Android Keystore or iOS Keychain."
  },
  {
    "PUID": "SECM-CAT-IDS-077",
    "Requirement description": "Cryptographic keys and user credentials must be securely managed throughout their lifecycle, including generation, storage, transmission, and rotation. Keys must be stored using secure OS-provided mechanisms such as KeyStore or Keychain.",
    "Source": "Long-Term Key Storage: Store keys securely using KeyStore, which provides long-term storage and retrieval for cryptographic keys \\[18\\].  Properly Handle User Credentials: User credentials should always be stored, transmitted, and authenticated securely:  ```{=html} <!-- --> ``` Encrypt credentials during transmission.  Do not store user credentials on the device. Instead, consider using secure, revocable access tokens.  Implement strong user authentication protocols.  Regularly update and rotate any used API keys or tokens \\[3\\].  ```{=html} <!-- --> ``` MASVS-CRYPTO-2: The app performs key management according to industry best practices: Even the strongest cryptography would be compromised by poor key management. This control covers the management of cryptographic keys throughout their lifecycle, including key generation, storage and protection \\[20\\].  1.3. When storing sensitive data on the device, use a file encryption API provided by the OS or other trusted source. Some platforms (e.g., iOS and Android) provide file encryption API's which use a secret key protected by the device unlock code and deletable on remote wipe. If this is available, it should be used as it increases the security of the encryption without creating extra burden on the end-user. It also makes stored data safer in the case of loss or theft. However, it should be borne in mind that even when protected by the device unlock key, if data is stored on the device, its security is dependent on the security of the device unlock code if remote deletion of the key is for any reason not possible \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Improper key and credential management exposes applications to potential security breaches, including unauthorized access, data leaks, and identity theft. Secure storage, encryption, and lifecycle management mitigate these risks and align with healthcare data protection regulations and industry best practices.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-078",
    "Parent PUIDs": "SECM-CAT-IDS-076",
    "Exclusion PUIDs": "Not described",
    "Importance": "67",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Cryptographic keys and user credentials must be securely managed throughout their lifecycle, including generation, storage, transmission, and rotation. Keys must be stored using secure OS-provided mechanisms such as KeyStore or Keychain."
  },
  {
    "PUID": "SECM-CAT-IDS-078",
    "Requirement description": "Applications must utilize platform-provided key-store mechanisms (e.g., Android Keystore, iOS Keychain) at the highest supported security level. Keys and sensitive data must be protected using device passcodes, configured to remain inaccessible when the device is locked.",
    "Source": "3.3. Leverage the provided key-store mechanisms at the highest supported security level and only when a device passcode has been set. If possible, request key-store items to be protected after the device is locked and to remain only in the current device (e.g., exclude these items from backups and cloud synchronization) \\[16\\].  Implement Secure Storage Mechanisms: 1. Store sensitive data in secure storage locations that are inaccessible to unauthorized users. Use platform-specific secure storage mechanisms provided by the mobile operating system, such as Keychain (iOS) or Keystore (Android) \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Leveraging native key-store mechanisms ensures sensitive data is stored securely and is protected from unauthorized access. Limiting backup and cloud synchronization further mitigates risks of data compromise, aligning with best practices for safeguarding healthcare information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-079",
    "Parent PUIDs": "SECM-CAT-IDS-077",
    "Exclusion PUIDs": "Not described",
    "Importance": "67",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must utilize platform-provided key-store mechanisms (e.g., Android Keystore, iOS Keychain) at the highest supported security level. Keys and sensitive data must be protected using device passcodes, configured to remain inaccessible when the device is locked."
  },
  {
    "PUID": "SECM-CAT-IDS-079",
    "Requirement description": "Sensitive data must be classified appropriately, stored using file encryption APIs provided by the operating system, and protected by device-level security mechanisms like unlock codes.",
    "Source": "Strong Key Storage: Encrypt stored API keys using robust encryption libraries, such as Tink Java, to safeguard them from potential threats \\[18\\].  1.1. Classify data storage according to sensitivity and apply controls accordingly (e.g. passwords, personal data, location, error logs, etc.). Process, store and use data according to its classification. Validate the security of API calls applied to sensitive data \\[16\\].  1.3. When storing sensitive data on the device, use a file encryption API provided by the OS or other trusted source. Some platforms (e.g., iOS and Android) provide file encryption API's which use a secret key protected by the device unlock code and delete-able on remote wipe. If this is available, it should be used as it increases the security of the encryption without creating extra burden on the end-user. It also makes stored data safer in the case of loss or theft. However, it should be borne in mind that even when protected by the device unlock key, if data is stored on the device, its security is dependent on the security of the device unlock code if remote deletion of the key is for any reason not possible \\[16\\].  data encryption and secure key management are especially important \\[16\\]",
    "Priority": "Not described",
    "Rationale": "Storing API keys without encryption exposes applications to potential reverse engineering and security breaches. Employing robust encryption and secure key management practices ensures compliance with data protection requirements, enhances application resilience, and mitigates risks associated with device loss or theft.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-080",
    "Parent PUIDs": "SECM-CAT-IDS-078",
    "Exclusion PUIDs": "Not described",
    "Importance": "66",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Sensitive data must be classified appropriately, stored using file encryption APIs provided by the operating system, and protected by device-level security mechanisms like unlock codes."
  },
  {
    "PUID": "SECM-CAT-IDS-080",
    "Requirement description": "Applications must leverage hardware-level encryption to secure files, utilizing the highest supported security level provided by the device. Application files must be configured to remain protected after the device is locked to ensure data confidentiality.",
    "Source": "1.25. Leverage the hardware-level encryption support for files at the highest supported security level. If possible request application's files to be protected after the device is locked \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Hardware-level encryption provides robust security for sensitive data stored on mobile devices, minimizing risks of unauthorized access. Protecting files after the device is locked ensures that data remains secure even in the event of theft or loss.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-081",
    "Parent PUIDs": "Not described",
    "Exclusion PUIDs": "Not described",
    "Importance": "66",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must leverage hardware-level encryption to secure files, utilizing the highest supported security level provided by the device. Application files must be configured to remain protected after the device is locked to ensure data confidentiality."
  },
  {
    "PUID": "SECM-CAT-IDS-081",
    "Requirement description": "Applications must prioritize the use of platform-provided framework functionalities, such as Android Content Providers, for data sharing. Avoid using file system permissions or custom access schemes for managing shared data.",
    "Source": "1.27. Prefer using framework functionality (e.g., Android Content Provider) for data sharing instead of using file system permissions or a custom access scheme on platforms that support this (e.g., Android) \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Framework functionalities provide standardized, secure mechanisms for data sharing, reducing risks associated with improperly configured file system permissions or custom access implementations. Leveraging these features ensures better alignment with platform security practices and mitigates the potential for unauthorized access.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-082",
    "Parent PUIDs": "SECM-CAT-IDS-080",
    "Exclusion PUIDs": "Not described",
    "Importance": "65",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must prioritize the use of platform-provided framework functionalities, such as Android Content Providers, for data sharing. Avoid using file system permissions or custom access schemes for managing shared data."
  },
  {
    "PUID": "SECM-CAT-IDS-082",
    "Requirement description": "Applications must prevent interpreted code from directly accessing user data and encrypted storage. Implement strict isolation and controlled access mechanisms to ensure that interpreted code cannot bypass security controls or interact with sensitive data storage areas.",
    "Source": "10.4. Deny interpreted code direct access to user data and encrypted storage \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Interpreted code poses a higher security risk due to its runtime nature, which may expose vulnerabilities that can be exploited. Restricting its access to sensitive data mitigates potential risks such as unauthorized data exposure or corruption.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-083",
    "Parent PUIDs": "SECM-CAT-IDS-081",
    "Exclusion PUIDs": "Not described",
    "Importance": "65",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must prevent interpreted code from directly accessing user data and encrypted storage. Implement strict isolation and controlled access mechanisms to ensure that interpreted code cannot bypass security controls or interact with sensitive data storage areas."
  },
  {
    "PUID": "SECM-CAT-IDS-083",
    "Requirement description": "Applications must avoid using deprecated file modes such as MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE for IPC files to prevent uncontrolled access to sensitive data. Additionally, sensitive IPC must not rely on localhost network ports, which can be accessed by other apps on the device.",
    "Source": "Avoid Deprecated File Modes: The system must not use deprecated file modes such as MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE for inter-process communication (IPC) files, as they do not offer control over data access or format \\[18\\].  Avoid Localhost for Sensitive IPC: The application must not use localhost network ports for sensitive Inter-Process Communication (IPC), as these ports are accessible to other apps on the device. Instead, secure IPC mechanisms such as Android Service with authentication must be used \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Using deprecated file modes or localhost for IPC can lead to unauthorized access and data leakage, compromising user security and privacy. Employing secure IPC mechanisms ensures robust access control and mitigates potential vulnerabilities.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-IDS-084",
    "Parent PUIDs": "SECM-CAT-IDS-082",
    "Exclusion PUIDs": "Not described",
    "Importance": "65",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "Applications must avoid using deprecated file modes such as MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE for IPC files to prevent uncontrolled access to sensitive data. Additionally, sensitive IPC must not rely on localhost network ports, which can be accessed by other apps on the device."
  },
  {
    "PUID": "SECM-CAT-IDS-084",
    "Requirement description": "The application must implement and maintain robust data recovery practices to restore critical enterprise assets, including sensitive health data, to a pre-incident and trusted state. This includes establishing secure and reliable mechanisms for data backup, encryption, and restoration processes.",
    "Source": "CIS Critical Security Control 11: Data Recovery: Establish and maintain data recovery practices sufficient to restore in-scope enterprise assets to a pre-incident and trusted state \\[18\\].",
    "Priority": "Not described",
    "Rationale": "Data recovery is essential to maintain operational continuity and ensure patient safety in the event of system failure, data corruption, or security incidents. Compliance with established standards for secure data recovery practices minimizes downtime and supports regulatory requirements.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-IDS-083",
    "Exclusion PUIDs": "Not described",
    "Importance": "65",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement and maintain robust data recovery practices to restore critical enterprise assets, including sensitive health data, to a pre-incident and trusted state. This includes establishing secure and reliable mechanisms for data backup, encryption, and restoration processes."
  },
  {
    "PUID": "SECM-CAT-ICR-001",
    "Requirement description": "The mobile application must implement NIST-approved or NSA-approved key management technologies and processes for the production, control, and distribution of asymmetric cryptographic keys. The system must utilize PKI Class 3 or Class 4 certificates and, where applicable, hardware tokens to safeguard private keys. Prepositioned keying materials or approved PKI certificates must be employed to meet recognized cryptographic security standards.",
    "Source": "SRG-APP-000516-MAPP-000041: Mobile apps involved in the production, control, and distribution of asymmetric cryptographic keys must use approved PKI Class 3 or class 4 certificates and hardware tokens that protect the user\\'s private key \\[17\\].  SRG-APP-000516-MAPP-000040: Mobile apps involved in the production, control, and distribution of asymmetric cryptographic keys must use approved PKI Class 3 certificates or prepositioned keying material \\[17\\].  SRG-APP-000516-MAPP-000039: Mobile apps involved in the production, control, and distribution of asymmetric cryptographic keys must use NIST approved or NSA approved key management technology and processes \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Asymmetric key management is critical to ensuring the confidentiality, integrity, and authenticity of sensitive data in mobile health applications. By employing secure key management practices, the application mitigates risks of unauthorized key access, data breaches, and compromised communications.",
    "Number of Children": "1",
    "Number of Parents": "0",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-002",
    "Parent PUIDs": "root",
    "Exclusion PUIDs": "Not described",
    "Importance": "99",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must implement NIST-approved or NSA-approved key management technologies and processes for the production, control, and distribution of asymmetric cryptographic keys. The system must utilize PKI Class 3 or Class 4 certificates and, where applicable, hardware tokens to safeguard private keys. Prepositioned keying materials or approved PKI certificates must be employed to meet recognized cryptographic security standards."
  },
  {
    "PUID": "SECM-CAT-ICR-002",
    "Requirement description": "The mobile application must utilize NIST-approved or NSA-approved key management technologies and processes for the production, control, and distribution of symmetric cryptographic keys. These technologies must ensure robust encryption standards and secure key lifecycle management, including generation, storage, rotation, and destruction.",
    "Source": "SRG-APP-000516-MAPP-000038: Mobile apps involved in the production, control, and distribution of symmetric cryptographic keys must use NIST approved or NSA approved key management technology and processes. \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Secure symmetric key management is essential to protecting sensitive health data in mobile applications. By adhering to recognized cryptographic standards, the application can safeguard against unauthorized access, mitigate the risk of data breaches, and maintain the confidentiality and integrity of transmitted and stored information.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-003",
    "Parent PUIDs": "SECM-CAT-ICR-001",
    "Exclusion PUIDs": "Not described",
    "Importance": "97",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The mobile application must utilize NIST-approved or NSA-approved key management technologies and processes for the production, control, and distribution of symmetric cryptographic keys. These technologies must ensure robust encryption standards and secure key lifecycle management, including generation, storage, rotation, and destruction."
  },
  {
    "PUID": "SECM-CAT-ICR-003",
    "Requirement description": "The application must store passwords only in cryptographic representations, using secure hashing algorithms and salting mechanisms to protect against unauthorized access. Passwords must never be stored in plain text or reversible encrypted formats.",
    "Source": "Implement V-222542: The application must only store cryptographic representations of passwords \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Storing cryptographic representations of passwords ensures the security and confidentiality of user credentials. This approach mitigates risks of password exposure in the event of data breaches, supporting compliance with best practices for cryptographic security and protecting sensitive health information managed by mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-004",
    "Parent PUIDs": "SECM-CAT-ICR-00",
    "Exclusion PUIDs": "Not described",
    "Importance": "96",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must store passwords only in cryptographic representations, using secure hashing algorithms and salting mechanisms to protect against unauthorized access. Passwords must never be stored in plain text or reversible encrypted formats."
  },
  {
    "PUID": "SECM-CAT-ICR-004",
    "Requirement description": "The application must implement salting for all password hashing processes, using strong and unique random salts for each password. Salts must be securely generated and stored alongside cryptographic hash values, ensuring robust protection against precomputed or rainbow table attacks.",
    "Source": "Implement Salting: 1. Always use a strong random salt when hashing passwords. Salting adds an extra layer of security by making it harder for attackers to use precomputed tables or rainbow tables to crack passwords \\[3\\].  V-222542: Use strong cryptographic hash functions when creating password hash values. Utilize random salt values when creating the password hash. Ensure strong access control permissions on data files containing authentication data \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Salting strengthens password security by adding uniqueness to each hash, even when users choose identical passwords. This practice significantly increases the computational effort required for an attacker to crack password hashes, ensuring compliance with secure password management standards and safeguarding sensitive health application data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-005",
    "Parent PUIDs": "SECM-CAT-ICR-003",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement salting for all password hashing processes, using strong and unique random salts for each password. Salts must be securely generated and stored alongside cryptographic hash values, ensuring robust protection against precomputed or rainbow table attacks."
  },
  {
    "PUID": "SECM-CAT-ICR-005",
    "Requirement description": "The application must employ Key Derivation Functions (KDFs), such as PBKDF2, bcrypt, or scrypt, for password hashing. These functions must include mechanisms like iteration counts and adaptive work factors to enhance security against brute-force attacks and ensure secure derivation of cryptographic keys from user passwords.",
    "Source": "Use Key Derivation Functions (KDFs): 1. For password hashing, use Key Derivation Functions like PBKDF2, bcrypt, or scrypt. These functions are specifically designed for securely deriving cryptographic keys from passwords and provide additional security features like iteration counts to slow down brute-force attacks \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Key Derivation Functions are purpose-built to securely transform user passwords into cryptographic keys. By integrating iteration counts and adaptive mechanisms, KDFs increase computational cost for attackers, reducing the feasibility of brute-force attacks and ensuring compliance with secure password management standards.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-006",
    "Parent PUIDs": "SECM-CAT-ICR-004",
    "Exclusion PUIDs": "Not described",
    "Importance": "95",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must employ Key Derivation Functions (KDFs), such as PBKDF2, bcrypt, or scrypt, for password hashing. These functions must include mechanisms like iteration counts and adaptive work factors to enhance security against brute-force attacks and ensure secure derivation of cryptographic keys from user passwords."
  },
  {
    "PUID": "SECM-CAT-ICR-006",
    "Requirement description": "The application must implement NSA-approved cryptographic mechanisms to protect classified information and comply with applicable federal laws, directives, and industry standards. It must utilize FIPS-validated cryptographic modules for encryption, authentication, and signing application components.",
    "Source": "V-254803: The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards \\[15\\].  V-222555: The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module. Use FIPS-approved cryptographic modules \\[15\\].  V-222570: The application must utilize FIPS-validated cryptographic modules when signing application components. Utilize FIPS-validated algorithms when signing application components \\[15\\].  MASVS-CRYPTO-1: The app employs current strong cryptography and uses it according to industry best practices: Cryptography plays an especially important role in securing the user's data - even more so in a mobile environment, where attackers having physical access to the user's device is a likely scenario. This control covers general cryptography best practices, which are typically defined in external standards \\[20\\].  8.24 Use of cryptography: Rules for the effective use of cryptography, including cryptographic key management, should be defined and implemented \\[6\\].  SRG-APP-000416-MAPP-000100: The mobile app must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards \\[17\\].  Follow Industry Standards and Best Practices: 1. Stay updated with industry standards and best practices related to cryptography. Organizations like NIST (National Institute of Standards and Technology) and IETF (Internet Engineering Task Force) provide guidelines and recommendations for secure cryptographic practices \\[3\\].  3.2: Verify that the app uses proven implementations of cryptographic primitives \\[19\\].  3.3: Verify that the app uses cryptographic primitives that are appropriate for the particular use-case, configured with parameters that adhere to industry best practices \\[19\\].  Use Strong Encryption: 1. Implement robust encryption algorithms and practices to protect sensitive data both at rest and in transit. Utilize industry-standard encryption algorithms and ensure that encryption keys are securely stored and managed \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Strong cryptographic implementations safeguard sensitive and classified data, ensuring compliance with federal regulations and minimizing risks associated with unauthorized access or data breaches. Using FIPS-validated modules and industry-recommended practices strengthens the security posture of mobile health applications, especially in scenarios involving classified or sensitive patient data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-007",
    "Parent PUIDs": "SECM-CAT-ICR-005",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement NSA-approved cryptographic mechanisms to protect classified information and comply with applicable federal laws, directives, and industry standards. It must utilize FIPS-validated cryptographic modules for encryption, authentication, and signing application components."
  },
  {
    "PUID": "SECM-CAT-ICR-007",
    "Requirement description": "The application must use FIPS-validated cryptographic modules for generating cryptographic hashes. All hash generation must be performed using FIPS-validated algorithms, ensuring compliance with federal standards for cryptographic security.",
    "Source": "V-222571: The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes. Configure the application to use a FIPS-validated hashing algorithm when creating a cryptographic hash \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Using FIPS-validated hashing algorithms ensures that the cryptographic hash functions meet rigorous security standards, protecting sensitive data from tampering and ensuring the integrity of the application. This is critical for applications handling sensitive health information to comply with regulatory requirements and safeguard data integrity.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-008",
    "Parent PUIDs": "SECM-CAT-ICR-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "94",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use FIPS-validated cryptographic modules for generating cryptographic hashes. All hash generation must be performed using FIPS-validated algorithms, ensuring compliance with federal standards for cryptographic security."
  },
  {
    "PUID": "SECM-CAT-ICR-008",
    "Requirement description": "The application must implement NIST FIPS-validated cryptographic mechanisms for generating digital signatures, cryptographic hashes, and ensuring confidentiality of sensitive data in compliance with federal regulations.",
    "Source": "V-222572: The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection. Configure the application to use a FIPS-validated cryptographic module \\[15\\].  SRG-APP-000514-MAPP-000100: If the underlying MOS does not provide NIST FIPS-validated crypto modules, the mobile app must implement NIST FIPS-validated cryptography for the following: to provision digital signatures; to generate cryptographic hashes; and to protect unclassified information requiring confidentiality and cryptographic protection in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Utilizing FIPS-validated cryptographic modules ensures adherence to federal security standards, enhancing the confidentiality, integrity, and authenticity of unclassified information. This is especially critical in mobile health applications to safeguard sensitive data against unauthorized access and tampering.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-009",
    "Parent PUIDs": "SECM-CAT-ICR-007",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement NIST FIPS-validated cryptographic mechanisms for generating digital signatures, cryptographic hashes, and ensuring confidentiality of sensitive data in compliance with federal regulations."
  },
  {
    "PUID": "SECM-CAT-ICR-009",
    "Requirement description": "The application must establish and manage cryptographic keys according to defined key management requirements, ensuring secure generation, distribution, storage, access, and destruction.",
    "Source": "SC-12 CRYPTOGRAPHIC KEY ESTABLISHMENT AND MANAGEMENT  Control: Establish and manage cryptographic keys when cryptography is employed within the system in accordance with the following key management requirements: \\[Assignment: organization-defined requirements for key generation, distribution, storage, access, and destruction\\].  Discussion: Cryptographic key management and establishment can be performed using manual procedures or automated mechanisms with supporting manual procedures. Organizations define key management requirements in accordance with applicable laws, executive orders, directives, regulations, policies, standards, and guidelines and specify appropriate options, parameters, and levels. Organizations manage trust stores to ensure that only approved trust anchors are part of such trust stores. This includes certificates with visibility external to organizational systems and certificates related to the internal operations of systems. \\[NIST CMVP\\] and \\[NIST CAVP\\] provide additional information on validated cryptographic modules and algorithms that can be used in cryptographic key management and establishment \\[11\\].",
    "Priority": "Not described",
    "Rationale": "Effective cryptographic key management ensures that sensitive data is protected from unauthorized access, tampering, and misuse. By adhering to robust key management practices, the application can maintain the confidentiality, integrity, and authenticity of cryptographic operations critical to mobile health application security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-010",
    "Parent PUIDs": "SECM-CAT-ICR-008",
    "Exclusion PUIDs": "Not described",
    "Importance": "93",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must establish and manage cryptographic keys according to defined key management requirements, ensuring secure generation, distribution, storage, access, and destruction."
  },
  {
    "PUID": "SECM-CAT-ICR-010",
    "Requirement description": "The application must encrypt all messages when the SessionIndex is associated with privacy data to safeguard sensitive information during transmission and mitigate risks of unauthorized access or interception.",
    "Source": "V-222406: The application must ensure messages are encrypted when the SessionIndex is tied to privacy data. Encrypt messages when the SessionIndex is tied to privacy data \\[15\\].",
    "Priority": "Not described",
    "Rationale": "Encrypting messages tied to privacy data ensures that sensitive information remains secure and complies with privacy regulations. This practice protects against data breaches and unauthorized disclosures, fostering trust in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-011",
    "Parent PUIDs": "SECM-CAT-ICR-009",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must encrypt all messages when the SessionIndex is associated with privacy data to safeguard sensitive information during transmission and mitigate risks of unauthorized access or interception."
  },
  {
    "PUID": "SECM-CAT-ICR-011",
    "Requirement description": "The application must implement robust validation and authentication mechanisms to verify the integrity and authenticity of all parties involved in the encryption process.",
    "Source": "Validate and Authenticate: 1. Implement strong validation and authentication mechanisms to verify the integrity and authenticity of parties involved in the encryption process. Perform proper validation of certificates, digital signatures, or other mechanisms used for authentication \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Ensuring the authenticity and integrity of parties in the encryption process is critical to prevent man-in-the-middle attacks, unauthorized access, or data tampering. Proper validation and authentication mechanisms enhance trust and compliance with security standards in mobile health applications.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-012",
    "Parent PUIDs": "SECM-CAT-ICR-010",
    "Exclusion PUIDs": "Not described",
    "Importance": "92",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement robust validation and authentication mechanisms to verify the integrity and authenticity of all parties involved in the encryption process."
  },
  {
    "PUID": "SECM-CAT-ICR-012",
    "Requirement description": "The application must verify during the first run that no other application has previously requested the same custom permissions, particularly on platforms older than Android 5.0. This ensures that the permissions are securely associated with the intended application and are not subject to unauthorized access or conflict.",
    "Source": "12.5. In the case that the application requests custom permissions, and older platforms are supported (e.g., earlier than Android 5.0), always verify on the first run of the app that no other application has previously requested the same permissions \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Older platforms may lack the robust permission-handling mechanisms available in newer systems, leading to potential security vulnerabilities. By validating custom permissions during the initial run, the application mitigates risks associated with permission hijacking or unauthorized use.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-013",
    "Parent PUIDs": "SECM-CAT-ICR-011",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must verify during the first run that no other application has previously requested the same custom permissions, particularly on platforms older than Android 5.0. This ensures that the permissions are securely associated with the intended application and are not subject to unauthorized access or conflict."
  },
  {
    "PUID": "SECM-CAT-ICR-013",
    "Requirement description": "The application must adhere to the domain name registration infrastructure when declaring custom permissions to prevent collisions or conflicts with permissions declared by other applications.",
    "Source": "12.6. Always follow the domain name registration infrastructure to declare a custom permission, in order to avoid any collisions with other apps \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Using the domain name registration infrastructure ensures that custom permissions are uniquely identifiable and associated with the correct application, mitigating risks of unauthorized access, permission hijacking, and compatibility issues across the application ecosystem.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-014",
    "Parent PUIDs": "SECM-CAT-ICR-012",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must adhere to the domain name registration infrastructure when declaring custom permissions to prevent collisions or conflicts with permissions declared by other applications."
  },
  {
    "PUID": "SECM-CAT-ICR-014",
    "Requirement description": "The application must restrict access to its components, such as Activities, Services, and Content Providers, ensuring that only authorized applications can start or interact with them. This must be implemented using strict permissions and access controls.",
    "Source": "12.7. Restrict what apps can cause an application component (e.g., Android Activity) to start or are able to interact with it (e.g., Android Service and Content Provider). This can be accomplished using strict permissions \\[16\\].",
    "Priority": "Not described",
    "Rationale": "Restricting component access prevents unauthorized or malicious applications from interacting with sensitive parts of the application, reducing the risk of privilege escalation, data leakage, or other security vulnerabilities.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-015",
    "Parent PUIDs": "SECM-CAT-ICR-013",
    "Exclusion PUIDs": "Not described",
    "Importance": "91",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must restrict access to its components, such as Activities, Services, and Content Providers, ensuring that only authorized applications can start or interact with them. This must be implemented using strict permissions and access controls."
  },
  {
    "PUID": "SECM-CAT-ICR-015",
    "Requirement description": "The application must disable device identifiers after 35 days of inactivity unless cryptographic certificates, such as PKI credentials, are used for authentication.",
    "Source": "V-222535: The application must disable device identifiers after 35 days of inactivity unless a cryptographic certificate is used for authentication. Configure the application to disable device accounts after 35 days of inactivity or to utilize DoD PKI certificates that provide an expiration date \\[15\\].  SRG-APP-000391-MAPP-000100: The mobile app must accept Public Key Infrastructure (PKI) credentials \\[17\\].",
    "Priority": "Not described",
    "Rationale": "Limiting the duration of inactive device identifiers mitigates risks of unauthorized access due to outdated or unused accounts. Utilizing PKI credentials ensures a secure and verifiable authentication process, aligned with industry standards for cryptographic security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-016",
    "Parent PUIDs": "SECM-CAT-ICR-014",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must disable device identifiers after 35 days of inactivity unless cryptographic certificates, such as PKI credentials, are used for authentication."
  },
  {
    "PUID": "SECM-CAT-ICR-016",
    "Requirement description": "The application must use standard cryptographic algorithms provided by the platform, such as AES, RSA, or ECC, through validated cryptographic libraries or frameworks. Avoid the implementation of custom cryptographic algorithms or the use of deprecated cryptographic protocols and ensure compliance with industry-recommended practices for encryption and decryption processes.",
    "Source": "Use Standard Cryptography Algorithms: Use existing cryptographic algorithms provided by Android, such as AES and RSA, through the Cipher class. Avoid implementing custom cryptographic algorithms \\[18\\].  Use Strong Encryption Algorithms: 1. Implement widely accepted and secure encryption algorithms, such as AES (Advanced Encryption Standard), RSA (Rivest-Shamir-Adleman), or Elliptic Curve Cryptography (ECC). Stay updated with current cryptographic standards and avoid deprecated or weak algorithms \\[3\\].  3.4: Verify that the app does not use cryptographic protocols or algorithms that are widely considered depreciated for security purposes \\[19\\].  4.5. Use strong and standardized encryption algorithms (e.g., AES) and appropriate key lengths (check recommendations for the algorithm you use e.g. for the TLS configuration). Remove support for weak ciphers \\[16\\]  4.11. Always use platform supported or vetted frameworks for establishing secure communication channels. Avoid using custom solutions \\[16\\].  Implement Encryption Correctly: 1. Carefully implement encryption and decryption processes in the mobile application, adhering to established cryptographic libraries and frameworks. Avoid custom encryption implementations, as they are more prone to errors and vulnerabilities \\[3\\].",
    "Priority": "Not described",
    "Rationale": "Adopting standardized cryptographic algorithms reduces vulnerabilities associated with custom implementations and ensures robustness against evolving threats. Utilizing platform-supported cryptography improves security, compatibility, and maintainability, while avoiding deprecated algorithms minimizes exposure to known attacks.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-017",
    "Parent PUIDs": "SECM-CAT-ICR-015",
    "Exclusion PUIDs": "Not described",
    "Importance": "90",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use standard cryptographic algorithms provided by the platform, such as AES, RSA, or ECC, through validated cryptographic libraries or frameworks. Avoid the implementation of custom cryptographic algorithms or the use of deprecated cryptographic protocols and ensure compliance with industry-recommended practices for encryption and decryption processes."
  },
  {
    "PUID": "SECM-CAT-ICR-017",
    "Requirement description": "The application must implement Advanced Encryption Standard (AES) for encrypting sensitive data, such as Protected Health Information (PHI). AES encryption must utilize 256-bit keys where supported. If 256-bit AES is unavailable, fallback to 128-bit AES encryption, ensuring compliance with secure cryptographic practices.",
    "Source": "AES Encryption: For commercial encryption, use 256-bit AES encryption where available. If 256-bit AES is unavailable, use 128-bit AES as a fallback \\[18\\].  Use Advanced Encryption Standard (AES) to encrypt PHI. The cryptographic key used must have at least 128 bits. This method offers better encryption times than other techniques \\[23\\].",
    "Priority": "Not described",
    "Rationale": "AES is a widely recognized and efficient encryption standard for securing sensitive data. Utilizing 256-bit keys provides robust security, and falling back to 128-bit keys ensures encryption availability without compromising data protection. Adopting this standard safeguards PHI against unauthorized access and aligns with industry best practices.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-018",
    "Parent PUIDs": "SECM-CAT-ICR-016",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement Advanced Encryption Standard (AES) for encrypting sensitive data, such as Protected Health Information (PHI). AES encryption must utilize 256-bit keys where supported. If 256-bit AES is unavailable, fallback to 128-bit AES encryption, ensuring compliance with secure cryptographic practices."
  },
  {
    "PUID": "SECM-CAT-ICR-018",
    "Requirement description": "The application must implement Advanced Encryption Standard (AES) for all sensitive data encryption, prioritizing 256-bit keys for robust security. If 256-bit AES is unavailable, the system must fallback to 128-bit AES encryption to maintain secure data protection.",
    "Source": "AES Encryption: For commercial encryption, use 256-bit AES encryption where available. If 256-bit AES is unavailable, use 128-bit AES as a fallback \\[18\\].",
    "Priority": "Not described",
    "Rationale": "AES encryption is a globally recognized standard for securing sensitive data, providing strong resistance against unauthorized access. The use of 256-bit keys ensures a higher level of security, while a fallback to 128-bit keys maintains encryption availability in environments with limited support, without compromising the baseline security.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-019",
    "Parent PUIDs": "SECM-CAT-ICR-017",
    "Exclusion PUIDs": "Not described",
    "Importance": "89",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must implement Advanced Encryption Standard (AES) for all sensitive data encryption, prioritizing 256-bit keys for robust security. If 256-bit AES is unavailable, the system must fallback to 128-bit AES encryption to maintain secure data protection."
  },
  {
    "PUID": "SECM-CAT-ICR-019",
    "Requirement description": "The application must use the appropriate block cipher mode for encryption based on the context of use. For general encryption, Cipher Block Chaining (CBC) or Galois/Counter Mode (GCM) must be implemented. For streaming data, Counter (CTR) mode is recommended, ensuring no reuse of initialization vectors (IVs) or counters to maintain security.",
    "Source": "Block Mode Selection: Use the appropriate block mode for encryption:  ```{=html} <!-- --> ``` CBC or GCM for general encryption.  CTR for streaming encryption, while avoiding IV/counter reuse. \\[18\\].",
    "Priority": "Not described",
    "Rationale": "The selection of an appropriate block cipher mode is critical to ensure the security and integrity of encrypted data. CBC and GCM provide robust options for general encryption, with GCM offering additional authenticated encryption capabilities. CTR is suitable for streaming data, but improper IV or counter reuse can compromise encryption. Adhering to these standards ensures strong cryptographic practices aligned with industry guidelines.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-020",
    "Parent PUIDs": "SECM-CAT-ICR-018",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must use the appropriate block cipher mode for encryption based on the context of use. For general encryption, Cipher Block Chaining (CBC) or Galois/Counter Mode (GCM) must be implemented. For streaming data, Counter (CTR) mode is recommended, ensuring no reuse of initialization vectors (IVs) or counters to maintain security."
  },
  {
    "PUID": "SECM-CAT-ICR-020",
    "Requirement description": "The application must not rely solely on symmetric cryptography with hardcoded keys for encryption. Instead, implement secure key management practices, such as dynamically generating or securely retrieving keys at runtime, to enhance the cryptographic security of the application.",
    "Source": "3.1: Verify that the app does not rely on symmetric cryptography with hardcoded keys as a sole method of encryption \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Hardcoded symmetric keys can easily be extracted through reverse engineering, exposing encrypted data to unauthorized access. Adopting dynamic key generation and secure key retrieval mechanisms mitigates the risk of key compromise and strengthens the overall security posture of the application.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-021",
    "Parent PUIDs": "SECM-CAT-ICR-019",
    "Exclusion PUIDs": "Not described",
    "Importance": "88",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must not rely solely on symmetric cryptography with hardcoded keys for encryption. Instead, implement secure key management practices, such as dynamically generating or securely retrieving keys at runtime, to enhance the cryptographic security of the application."
  },
  {
    "PUID": "SECM-CAT-ICR-021",
    "Requirement description": "The application must ensure that cryptographic keys are not reused for multiple purposes, such as encrypting data and signing messages. Separate cryptographic keys must be utilized for distinct cryptographic operations to maintain security and prevent key misuse.",
    "Source": "3.5: Verify that the app doesn\\'t re-use the same cryptographic key for multiple purposes \\[19\\].",
    "Priority": "Not described",
    "Rationale": "Reusing cryptographic keys for multiple purposes can lead to vulnerabilities, such as weakening the encryption scheme or enabling cryptographic attacks. Implementing distinct keys for each purpose ensures that the security of one function does not compromise another, maintaining the integrity and confidentiality of sensitive data.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-022",
    "Parent PUIDs": "SECM-CAT-ICR-020",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that cryptographic keys are not reused for multiple purposes, such as encrypting data and signing messages. Separate cryptographic keys must be utilized for distinct cryptographic operations to maintain security and prevent key misuse."
  },
  {
    "PUID": "SECM-CAT-ICR-022",
    "Requirement description": "The application must utilize a secure and cryptographically strong random number generator, such as SecureRandom, to generate random values for cryptographic purposes, including key initialization, nonce generation, and secure tokens. This ensures the randomness required to maintain encryption strength and protect sensitive data.",
    "Source": "3.6: Verify that all random values are generated using a sufficiently secure random number generator \\[19\\].  Random Number Generation: Use SecureRandom to initialize cryptographic keys. Cryptographic keys generated without a secure random number generator may weaken the encryption and allow offline attacks \\[18\\]  Encryption Best Practices: When handling sensitive data, follow established practices for encryption and secure communications. Always use secure key storage and transmission methods to protect data integrity and confidentiality \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Using non-secure random number generators can result in predictable values, undermining cryptographic protocols and exposing sensitive data to attacks such as brute force or replay. A secure random number generator provides high entropy and ensures randomness critical for secure encryption and token generation.",
    "Number of Children": "1",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "SECM-CAT-ICR-023",
    "Parent PUIDs": "SECM-CAT-ICR-021",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must utilize a secure and cryptographically strong random number generator, such as SecureRandom, to generate random values for cryptographic purposes, including key initialization, nonce generation, and secure tokens. This ensures the randomness required to maintain encryption strength and protect sensitive data."
  },
  {
    "PUID": "SECM-CAT-ICR-023",
    "Requirement description": "The application must ensure that Initialization Vectors (IVs) or counters used in CTR (Counter) mode encryption are cryptographically random and never reused. This protects the confidentiality and integrity of encrypted data by preventing vulnerabilities related to predictability or repeated usage of cryptographic parameters.",
    "Source": "Avoid Counter Reuse: In CTR mode, ensure IV/counters are cryptographically random to prevent vulnerabilities \\[18\\]",
    "Priority": "Not described",
    "Rationale": "Using non-secure random number generators can result in predictable values, undermining cryptographic protocols and exposing sensitive data to attacks such as brute force or replay. A secure random number generator provides high entropy and ensures randomness critical for secure encryption and token generation.",
    "Number of Children": "0",
    "Number of Parents": "1",
    "Cycles": "1",
    "Number of audits": "1",
    "Child PUIDs": "Not described",
    "Parent PUIDs": "SECM-CAT-ICR-022",
    "Exclusion PUIDs": "Not described",
    "Importance": "87",
    "Current state": "To_be_determined",
    "Verification method": "Demonstration/Analysis",
    "Validation criteria": "Not described",
    "controles": "The application must ensure that Initialization Vectors (IVs) or counters used in CTR (Counter) mode encryption are cryptographically random and never reused. This protects the confidentiality and integrity of encrypted data by preventing vulnerabilities related to predictability or repeated usage of cryptographic parameters."
  }
]
