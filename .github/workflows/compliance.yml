name: Compliance Check

on:
  push:
    branches: [ main ]        # ejecuta la auditoría en cada commit a main
  pull_request:
    branches: [ main ]

jobs:
  compliance:
    # No ejecutes si el actor es Dependabot o la rama del PR es dependabot/*
    if: ${{ github.actor != 'dependabot[bot]' && !startsWith(github.head_ref || github.ref_name || '', 'dependabot/') && (github.event_name != 'pull_request' || github.event.pull_request.user.login != 'dependabot[bot]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup OPA (fiable)
        uses: open-policy-agent/setup-opa@v2
        with:
          version: '1.x'
          static: true

      - name: Show OPA version
        run: opa version

      - name: "Install Pandoc + TeX Live (PDF engine: xelatex)"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pandoc \
                                  texlive-latex-recommended \
                                  texlive-latex-extra \
                                  texlive-fonts-recommended \
                                  texlive-xetex

      - name: Collect system data
        run: |
          python scripts/recolectar_datos.py

      - name: Wrap requisitos JSON (si es lista)
        run: |
          python - <<'PY'
          import json
          f = 'requirements/requisitos.json'
          with open(f, encoding='utf-8') as fh:
            data = json.load(fh)
          if isinstance(data, list):
            with open(f, 'w', encoding='utf-8') as out:
              json.dump({'requisitos': data}, out, ensure_ascii=False, indent=2)
          PY

      - name: Run OPA evaluation and save report
        run: |
          mkdir -p report
          opa eval --format pretty \
            -i input.json \
            -d policies/ \
            -d requirements/requisitos.json \
            "data.secmcat.violation" > report/compliance_output.txt

      - name: Generate PDF report (pandoc + xelatex)
        run: |
          awk 'BEGIN{print "# Resultados de Compliance\n"}{print}' report/compliance_output.txt > report/compliance_output.md
          pandoc report/compliance_output.md \
            --pdf-engine=xelatex \
            -V mainfont="Latin Modern Roman" \
            -V geometry:margin=1in \
            -o report/compliance_output.pdf

      - name: Upload compliance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: report/

      - name: Comment on pull request (optional)
        if: failure() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ❌ Cumplimiento fallido. Revisa el artefacto "compliance-report" para ver qué requisitos no se cumplieron.
