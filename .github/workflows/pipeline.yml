---
name: Pipeline (orquestador)

on:
  push:
    branches:
      - main
  pull_request: {}
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  actions: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ github.event_name == 'push' }}

jobs:
  # 1) Primero
  codeql_analysis:
    if: ${{ github.actor != 'dependabot[bot]' && !startsWith(github.ref_name, 'dependabot/') }}
    uses: ./.github/workflows/codeql-analysis.yml
    secrets: inherit

  # 2) Luego de codeql_analysis
  security_scans:
    needs: [codeql_analysis]
    if: ${{ github.actor != 'dependabot[bot]' && !startsWith(github.ref_name, 'dependabot/') }}
    uses: ./.github/workflows/security-scans.yml
    secrets: inherit

  # 3) Luego de security_scans
  mobsf:
    needs: [security_scans]
    if: ${{ github.actor != 'dependabot[bot]' && !startsWith(github.ref_name, 'dependabot/') }}
    uses: ./.github/workflows/mobsf.yml
    secrets: inherit

   ai_correlation:
  # 4)  Ejecuta aunque falle mobsf/security_scans y omite Dependabot
    if: ${{ always() && github.actor != 'dependabot[bot]' && !startsWith(github.ref_name, 'dependabot/') }}
    needs: [security_scans, mobsf, codeql_analysis]   # también puedes añadir codeql_analysis si lo quieres
    uses: ./.github/workflows/ai-workflow.yml
    with:
      # Descarga TODOS los artefactos del run y los fusiona en reports/
      # (tu reusable ya usa pattern y merge-multiple)
      artifact_pattern: "*"
      checklist_path: "requirements/requisitos.json"
      secrets: inherit

  # Job "noop" para Dependabot
  noop:
    if: ${{ github.actor == 'dependabot[bot]' || startsWith(github.ref_name, 'dependabot/') }}
    runs-on: ubuntu-latest
    steps:
      - run: "printf '%s\n' 'Dependabot detectado: se omite pipeline (noop).'"
