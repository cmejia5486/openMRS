# .github/workflows/mobsf.yml
name: Mobile Security Scan (CMD • auto-discover APK → static & dynamic artifacts)

on:
  workflow_call:
    inputs:
      run_build:
        description: "Intentar compilar para generar APK (si falla, no bloquea)"
        type: boolean
        required: false
        default: true
      try_dynamic_report:
        description: "Intentar descargar el JSON del análisis dinámico si existe"
        type: boolean
        required: false
        default: true
    secrets:
      MOBSF_API_KEY:
        required: true
      MOBSF_URL:
        required: false  # si no se define, usa http://localhost:8000

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: cmd  # <<— todo el job en CMD por defecto (se puede sobreescribir por step)

jobs:
  mobsf_scan:
    name: MobSF (static + dynamic artifacts) [CMD]
    # Omitir Dependabot por actor/branch/PR user
    if: >-
      ${{
        github.actor != 'dependabot[bot]' &&
        !startsWith(github.ref_name, 'dependabot/') &&
        (github.event_name != 'pull_request' || github.event.pull_request.user.login != 'dependabot[bot]')
      }}
    runs-on: self-hosted  # el runner que ve tu MobSF

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Build NO BLOQUEANTE (opcional, en CMD) ----------
      - name: Set up JDK (only if build)
        if: ${{ inputs.run_build }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Try Gradle build (non-blocking, CMD)
        if: ${{ inputs.run_build }}
        id: build_try
        run: |
          @echo off
          setlocal enabledelayedexpansion
          chcp 65001 >NUL
          set CODE=0
          if exist ".\gradlew.bat" (
            call .\gradlew.bat assembleRelease
            set CODE=%ERRORLEVEL%
          ) else if exist ".\gradlew" (
            rem Si solo hay gradlew (unix), necesitas Git Bash u otro shell para ejecutarlo.
            echo ::notice::No Gradle wrapper .bat; skipping unix gradlew.
            set CODE=0
          ) else (
            echo ::notice::No Gradle wrapper; skipping build.
            set CODE=0
          )
          if not "%CODE%"=="0" (
            echo ::warning::Gradle failed with exit code %CODE%. Will continue with APK autodiscovery.
          ) else (
            echo ::notice::Gradle build completed (exit %CODE%).
          )
          >>"%GITHUB_OUTPUT%" echo gradle_exit=%CODE%

      # ---------- Artefactos del RUN (si existen) ----------
      - name: Download all artifacts (merge)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: artifacts
          merge-multiple: true
      # (v4 tiene nuevas reglas; usa v4 al subir y descargar). :contentReference[oaicite:3]{index=3}

      # ---------- Descubrir APK automáticamente (prioridad: build → repo → artifacts) ----------
      - name: Resolve APK (auto-discovery, CMD)
        id: resolve_apk
        run: |
          @echo off
          setlocal enabledelayedexpansion
          chcp 65001 >NUL

          set "APK="
          rem 1) Priorizar build\outputs\apk
          for /f "delims=" %%F in ('dir /b /s "%GITHUB_WORKSPACE%\*build\outputs\apk\*.apk" 2^>NUL') do (
            set "APK=%%F"
            goto after_search
          )
          rem 2) Cualquier *.apk en repo
          for /f "delims=" %%F in ('dir /b /s "%GITHUB_WORKSPACE%\*.apk" 2^>NUL') do (
            set "APK=%%F"
            goto after_search
          )
          rem 3) Artefactos descargados
          if exist "artifacts" (
            for /f "delims=" %%F in ('dir /b /s "artifacts\*.apk" 2^>NUL') do (
              set "APK=%%F"
              goto after_search
            )
          )

          :after_search
          if defined APK (
            echo ::notice::APK selected: %APK%
            >>"%GITHUB_OUTPUT%" echo apk_path=%APK%
          ) else (
            echo ::notice::No APK found in repo nor artifacts. Job will continue without scanning.
            >>"%GITHUB_OUTPUT%" echo apk_path=
          )

      # ---------- Static: upload → scan → report_json ----------
      - name: MobSF static scan (CMD)
        if: ${{ steps.resolve_apk.outputs.apk_path != '' }}
        id: mobsf_static
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
          MOBSF_URL: ${{ secrets.MOBSF_URL }}
        run: |
          @echo off
          setlocal enabledelayedexpansion
          chcp 65001 >NUL

          set "APK=${{ steps.resolve_apk.outputs.apk_path }}"
          if "%MOBSF_API_KEY%"=="" (
            echo ::warning::MOBSF_API_KEY not set; skipping scan.
            goto end
          )
          if "%MOBSF_URL%"=="" (
            set "BASE=http://localhost:8000"
          ) else (
            set "BASE=%MOBSF_URL%"
          )

          if not exist reports mkdir reports

          rem Upload
          curl -s -X POST "%BASE%/api/v1/upload" -H "Authorization: %MOBSF_API_KEY%" -F "file=@%APK%" > upload.json

          rem Extraer hash con PowerShell (llamado desde CMD)
          for /f "usebackq delims=" %%H in (`powershell -NoProfile -Command "(Get-Content -Raw 'upload.json' | ConvertFrom-Json).hash"`) do (
            set "HASH=%%H"
          )
          if "%HASH%"=="" (
            echo ::warning::Upload returned no hash.
            goto end
          )
          >>"%GITHUB_OUTPUT%" echo hash=%HASH%

          rem Scan
          curl -s -X POST "%BASE%/api/v1/scan" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" >NUL

          rem Report JSON
          curl -s -X POST "%BASE%/api/v1/report_json" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" > "reports\mobsf_static.json"
          if exist "reports\mobsf_static.json" (
            echo ::notice::Static report saved to reports\mobsf_static.json
          )

          :end
          rem fin

      - name: Upload MobSF static results
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-static-report
          path: reports/mobsf_static.json
          if-no-files-found: error
          retention-days: 14

      # ---------- Dynamic report (opcional, no bloquea) ----------
      - name: Try to fetch dynamic JSON report (CMD)
        if: ${{ inputs.try_dynamic_report && steps.mobsf_static.outputs.hash != '' }}
        id: mobsf_dynamic
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
          MOBSF_URL: ${{ secrets.MOBSF_URL }}
        run: |
          @echo off
          setlocal enabledelayedexpansion
          chcp 65001 >NUL

          set "HASH=${{ steps.mobsf_static.outputs.hash }}"
          if "%HASH%"=="" (
            echo No hash from static; skipping dynamic report.
            goto done
          )

          if "%MOBSF_URL%"=="" (
            set "BASE=http://localhost:8000"
          ) else (
            set "BASE=%MOBSF_URL%"
          )

          curl -s -X POST "%BASE%/api/v1/dynamic/report_json" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" > "reports\mobsf_dynamic.json"

          if exist "reports\mobsf_dynamic.json" (
            for %%A in ("reports\mobsf_dynamic.json") do set SIZE=%%~zA
            if not "%SIZE%"=="0" (
              echo ::notice::Dynamic report saved to reports\mobsf_dynamic.json
              >>"%GITHUB_OUTPUT%" echo dynamic_exists=true
              goto done
            )
          )
          echo ::notice::No dynamic report available for hash %HASH%.
          >>"%GITHUB_OUTPUT%" echo dynamic_exists=false

          :done
          rem fin

      - name: Upload MobSF dynamic results (if present)
        if: ${{ steps.mobsf_dynamic.outputs.dynamic_exists == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-dynamic-report
          path: reports/mobsf_dynamic.json
          if-no-files-found: ignore
          retention-days: 14
