# .github/workflows/mobsf.yml
name: Mobile Security Scan (CMD • auto-discover APK → static & dynamic)

on:
  workflow_call:
    inputs:
      run_build:
        description: "Intentar compilar para generar APK (si falla, no bloquea)"
        type: boolean
        required: false
        default: true
      try_dynamic_report:
        description: "Intentar descargar el JSON del análisis dinámico si existe"
        type: boolean
        required: false
        default: true
    secrets:
      MOBSF_API_KEY:
        required: true
      MOBSF_URL:
        required: false  # si no se define, usa http://localhost:8000

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: cmd   # <<— ejecutar pasos en CMD por defecto (válido en Actions)

jobs:
  mobsf_scan:
    name: MobSF (static + dynamic artifacts) [CMD]
    # Omitir Dependabot por actor/branch/PR user
    if: >-
      ${{
        github.actor != 'dependabot[bot]' &&
        !startsWith(github.ref_name, 'dependabot/') &&
        (github.event_name != 'pull_request' || github.event.pull_request.user.login != 'dependabot[bot]')
      }}
    runs-on: self-hosted  # tu runner Windows que ve el servidor MobSF

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Build NO BLOQUEANTE (opcional) ----------
      - name: Set up JDK (only if build)
        if: ${{ inputs.run_build }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Try Gradle build (non-blocking, CMD)
        if: ${{ inputs.run_build }}
        id: build_try
        run: |
          @echo off
          setlocal
          set "CODE=0"
          rem NOTA: en CMD NO existe 'else if'; hay que anidar IFs.
          if exist ".\gradlew.bat" (
            call ".\gradlew.bat" assembleRelease
            set "CODE=%ERRORLEVEL%"
          ) else (
            if exist ".\gradlew" (
              echo ::notice::Se encontró gradlew (Unix). En CMD se omite.
              set "CODE=0"
            ) else (
              echo ::notice::No hay Gradle wrapper; se omite build.
              set "CODE=0"
            )
          )
          if not "%CODE%"=="0" (
            echo ::warning::Gradle falló con exit %CODE%. Se continuará con autodiscovery de APK.
          ) else (
            echo ::notice::Gradle finalizado (exit %CODE%).
          )
          >>"%GITHUB_OUTPUT%" echo gradle_exit=%CODE%
          endlocal
          exit /b 0    # <- pase lo que pase, este step NO falla

      # ---------- Descargar artefactos del run (si existen) ----------
      - name: Download all artifacts (merge)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: artifacts
          merge-multiple: true   # combinar múltiples artefactos en un solo dir
      # (Con Artifacts v4, usar v4 en subida y descarga; soporta pattern/merge-multiple). 
      # Ref: GA de v4 y notas de comportamiento. 

      # ---------- Descubrir APK automáticamente ----------
      - name: Resolve APK (auto-discovery, CMD)
        id: resolve_apk
        run: |
          @echo off
          setlocal
          set "APK="

          rem 1) Priorizar build\outputs\apk
          for /f "delims=" %%F in ('dir /b /s "%GITHUB_WORKSPACE%\*.apk" 2^>NUL ^| findstr /i "\\build\\outputs\\apk\\"') do (
            set "APK=%%F"
            goto :got_apk
          )
          rem 2) Cualquier *.apk en el repo
          for /f "delims=" %%F in ('dir /b /s "%GITHUB_WORKSPACE%\*.apk" 2^>NUL') do (
            set "APK=%%F"
            goto :got_apk
          )
          rem 3) Artefactos descargados
          if exist "artifacts" (
            for /f "delims=" %%F in ('dir /b /s "artifacts\*.apk" 2^>NUL') do (
              set "APK=%%F"
              goto :got_apk
            )
          )

          :got_apk
          if defined APK (
            echo ::notice::APK seleccionado: %APK%
            >>"%GITHUB_OUTPUT%" echo apk_path=%APK%
          ) else (
            echo ::notice::No se encontró APK en repo ni artefactos. Se omite el escaneo.
            >>"%GITHUB_OUTPUT%" echo apk_path=
          )
          endlocal
          exit /b 0

      # ---------- Static: upload → scan → report_json ----------
      - name: MobSF static scan (CMD)
        if: ${{ steps.resolve_apk.outputs.apk_path != '' }}
        id: mobsf_static
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
          MOBSF_URL: ${{ secrets.MOBSF_URL }}
        run: |
          @echo off
          setlocal
          set "APK=${{ steps.resolve_apk.outputs.apk_path }}"
          if "%MOBSF_API_KEY%"=="" (
            echo ::warning::MOBSF_API_KEY no definido; se omite escaneo.
            endlocal & exit /b 0
          )
          if "%MOBSF_URL%"=="" (
            set "BASE=http://localhost:8000"
          ) else (
            set "BASE=%MOBSF_URL%"
          )

          if not exist reports mkdir reports

          rem Upload
          curl -s -X POST "%BASE%/api/v1/upload" -H "Authorization: %MOBSF_API_KEY%" -F "file=@%APK%" > upload.json

          rem Extraer hash con PowerShell (llamado desde CMD)
          for /f "usebackq delims=" %%H in (`powershell -NoProfile -Command "$h=(Get-Content -Raw 'upload.json' | ConvertFrom-Json).hash; if($h){$h}"`) do (
            set "HASH=%%H"
          )
          if "%HASH%"=="" (
            echo ::warning::Upload no devolvió hash. Respuesta:
            type upload.json
            endlocal & exit /b 0
          )
          >>"%GITHUB_OUTPUT%" echo hash=%HASH%

          rem Scan
          curl -s -X POST "%BASE%/api/v1/scan" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" >NUL

          rem Report JSON
          curl -s -X POST "%BASE%/api/v1/report_json" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" > "reports\mobsf_static.json"
          if exist "reports\mobsf_static.json" (
            echo ::notice::Static report guardado en reports\mobsf_static.json
          )
          endlocal
          exit /b 0

      - name: Upload MobSF static results
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-static-report
          path: reports/mobsf_static.json
          if-no-files-found: ignore    # <<— no fallar si no hubo reporte
          retention-days: 14

      # ---------- Dynamic report (opcional, no bloquea) ----------
      - name: Try to fetch dynamic JSON report (CMD)
        if: ${{ inputs.try_dynamic_report && steps.mobsf_static.outputs.hash != '' }}
        id: mobsf_dynamic
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
          MOBSF_URL: ${{ secrets.MOBSF_URL }}
        run: |
          @echo off
          setlocal
          set "HASH=${{ steps.mobsf_static.outputs.hash }}"
          if "%HASH%"=="" (
            echo No hash from static; skipping dynamic report.
            endlocal & exit /b 0
          )
          if "%MOBSF_URL%"=="" (
            set "BASE=http://localhost:8000"
          ) else (
            set "BASE=%MOBSF_URL%"
          )

          curl -s -X POST "%BASE%/api/v1/dynamic/report_json" -H "Authorization: %MOBSF_API_KEY%" -d "hash=%HASH%" > "reports\mobsf_dynamic.json"

          if exist "reports\mobsf_dynamic.json" (
            for %%A in ("reports\mobsf_dynamic.json") do set SIZE=%%~zA
            if not "%SIZE%"=="0" (
              echo ::notice::Dynamic report guardado en reports\mobsf_dynamic.json
              >>"%GITHUB_OUTPUT%" echo dynamic_exists=true
              endlocal & exit /b 0
            )
          )
          echo ::notice::No dynamic report available for hash %HASH%.
          >>"%GITHUB_OUTPUT%" echo dynamic_exists=false
          endlocal
          exit /b 0

      - name: Upload MobSF dynamic results (if present)
        if: ${{ steps.mobsf_dynamic.outputs.dynamic_exists == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-dynamic-report
          path: reports/mobsf_dynamic.json
          if-no-files-found: ignore
          retention-days: 14
