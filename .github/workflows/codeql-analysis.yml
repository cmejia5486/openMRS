name: CodeQL Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'

jobs:
  analyze:
    name: CodeQL (Java, extended)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write         # para publicar release con JSON (público si el repo es público)
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Diagnóstico: cuántos .java / .kt y una source-root aproximada
      - name: Detect layout
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          count_java=$(git ls-files '*.java' | wc -l | tr -d ' ')
          count_kotlin=$(git ls-files '*.kt' '*.kts' 2>/dev/null | wc -l | tr -d ' ')
          # Raíz con más ficheros fuente (nivel 1); si no, usa repo root
          roots=$(git ls-files '*.java' '*.kt' 2>/dev/null | awk -F/ 'NF>1{print $1}' | sort | uniq -c | sort -rn | awk '{print $2}')
          srcroot="./"
          if [ -n "${roots:-}" ]; then
            first=$(echo "$roots" | head -n1)
            [ -d "$first" ] && srcroot="./$first"
          fi
          echo "count_java=$count_java"        >> $GITHUB_OUTPUT
          echo "count_kotlin=$count_kotlin"    >> $GITHUB_OUTPUT
          echo "source_root=$srcroot"          >> $GITHUB_OUTPUT
          echo "Java files: $count_java"
          echo "Kotlin files: $count_kotlin"
          echo "Guessed source-root: $srcroot"

      - name: Initialize CodeQL (Java, no build, extended suites)
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: none
          source-root: ${{ steps.detect.outputs.source_root }}
          queries: +security-extended,+security-and-quality

      - name: Analyze (write SARIF locally)
        uses: github/codeql-action/analyze@v3
        with:
          output: ${{ github.workspace }}/codeql-sarif

      # Artefacto SARIF (interno)
      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif
          path: ${{ github.workspace }}/codeql-sarif/*.sarif
          retention-days: 14

      # JSON compacto para tu agente IA
      - name: Build AI payload (from SARIF)
        shell: bash
        run: |
          set -euo pipefail
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TS=$(date -u +%FT%TZ)
          shopt -s nullglob
          SARIFS=("$GITHUB_WORKSPACE/codeql-sarif"/*.sarif)
          if [ ${#SARIFS[@]} -eq 0 ]; then
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg run_url "$RUN_URL" \
              --arg ts "$TS" \
              '{meta:{repo:$repo,sha:$sha,ref:$ref,run_url:$run_url,generated_at:$ts},
                scan:{engine:"codeql",language:"java",schema:"agent-payload:v2"},
                summary:{total:0,by_security_severity_label:{critical:0,high:0,medium:0,low:0,unknown:0},
                         by_level:{error:0,warning:0,note:0,none:0},unique_rules:0,by_rule:[],by_file:[],by_cwe:[]},
                findings:[]}' > codeql_agent_payload.json
          else
            SARIF_FILE="${SARIFS[0]}"
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg run_url "$RUN_URL" \
              --arg ts "$TS" \
              --slurpfile sarif "$SARIF_FILE" '
                def runs: ($sarif[0].runs // []);
                def rules: [ runs[]? | .tool?.driver?.rules[]? ];
                def rules_index: ( [ rules[] | {key: .id, value: .} ] | from_entries );
                def res: [ runs[]? | .results[]? ];

                def secscore($r; $ri):
                  ( ($r.properties["security-severity"]
                      // $ri[$r.ruleId].properties["security-severity"]) | tonumber? );
                def label($s):
                  if $s == null then "unknown"
                  elif $s >= 9 then "critical"
                  elif $s >= 7 then "high"
                  elif $s >= 4 then "medium"
                  elif $s > 0 then "low"
                  else "unknown" end;

                def cwe($ri):
                  ( $ri[.ruleId].properties.tags // [] )
                  | map(select(startswith("external/cwe/cwe-")))
                  | map(sub("^external/cwe/cwe-"; ""));

                (rules_index) as $RI
                | (res) as $R
                | ($R | map(
                    (secscore(.; $RI)) as $s
                    | {
                        rule_id: .ruleId,
                        rule_name: ($RI[.ruleId].name // $RI[.ruleId].shortDescription.text // null),
                        security_severity_score: $s,
                        security_severity_label: (label($s)),
                        level: (.level // "warning"),
                        message: (.message.text // null),
                        file: (.locations[0].physicalLocation.artifactLocation.uri // null),
                        startLine: (.locations[0].physicalLocation.region.startLine // null),
                        help: ($RI[.ruleId].helpUri // null),
                        rule_tags: ($RI[.ruleId].properties.tags // []),
                        cwe: (cwe($RI))
                      }
                  )) as $F
                | def sev_init: {"critical":0,"high":0,"medium":0,"low":0,"unknown":0};
                | def lvl_init: {"error":0,"warning":0,"note":0,"none":0};
                | {
                    meta: {repo:$repo, sha:$sha, ref:$ref, run_url:$run_url, generated_at:$ts},
                    scan: {engine:"codeql", language:"java", schema:"agent-payload:v2"},
                    summary: {
                      total: ($F|length),
                      by_security_severity_label:
                        (reduce $F[] as $x (sev_init; .[($x.security_severity_label // "unknown")] += 1)),
                      by_level:
                        (reduce $F[] as $x (lvl_init; .[($x.level // "warning")] += 1)),
                      unique_rules: ($F | map(.rule_id) | unique | length),
                      by_rule:
                        ($F | group_by(.rule_id)
                             | map({rule_id: .[0].rule_id, count: length})
                             | sort_by(-.count) | .[:20]),
                      by_file:
                        ($F | group_by(.file)
                             | map({file: (.[0].file // "<unknown>"), count: length})
                             | sort_by(-.count) | .[:20]),
                      by_cwe:
                        ($F | map(.cwe[]) | group_by(.) | map({cwe: .[0], count: length}) | sort_by(-.count) | .[:20])
                    },
                    findings: $F
                  }' > codeql_agent_payload.json
          fi

          echo "Wrote codeql_agent_payload.json"
          jq -r '.summary' codeql_agent_payload.json || true

      # Bundle único para la IA (payload + SARIF)
      - name: Build bundle
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          SARIFS=("$GITHUB_WORKSPACE/codeql-sarif"/*.sarif)
          if [ ${#SARIFS[@]} -gt 0 ]; then
            jq -n --slurpfile payload codeql_agent_payload.json --slurpfile sarif "${SARIFS[0]}" \
              '{version:"codeql-bundle:v1", generated_at: (now|todate),
                items:{ codeql_agent_payload:$payload[0], sarif:$sarif[0] }}' > codeql-bundle.json
          else
            jq -n --slurpfile payload codeql_agent_payload.json \
              '{version:"codeql-bundle:v1", generated_at: (now|todate),
                items:{ codeql_agent_payload:$payload[0] }}' > codeql-bundle.json
          fi

      # Publica como Release (descarga sin auth si el repo es público)
      - name: Publish/Update 'codeql-latest' release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: codeql-latest
          name: CodeQL Bundle (latest)
          body: "Automated CodeQL results for ${{ github.sha }} on ${{ github.ref_name }}."
          draft: false
          prerelease: true
          make_latest: false
          files: |
            codeql-bundle.json
            codeql_agent_payload.json
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
