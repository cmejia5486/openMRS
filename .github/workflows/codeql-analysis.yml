name: CodeQL Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: none

      - name: Perform CodeQL Analysis (write SARIF locally)
        uses: github/codeql-action/analyze@v3
        with:
          output: ${{ github.workspace }}/codeql-sarif

      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif
          path: ${{ github.workspace }}/codeql-sarif/*.sarif
          retention-days: 14

      - name: Build AI-friendly payload from SARIF (v2, fixed)
        shell: bash
        run: |
          set -euo pipefail

          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CS_URL="https://github.com/${{ github.repository }}/security/code-scanning?query=branch%3A${{ github.ref_name }}"
          TS=$(date -u +%FT%TZ)
          COMMIT_SUBJECT="$(git log -1 --pretty=%s || true)"

          shopt -s nullglob
          SARIFS=("$GITHUB_WORKSPACE/codeql-sarif"/*.sarif)
          if [ ${#SARIFS[@]} -eq 0 ]; then
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg ref_name "${{ github.ref_name }}" \
              --arg base_ref "${{ github.base_ref }}" \
              --arg pr_number "${{ github.event.pull_request.number }}" \
              --arg actor "${{ github.actor }}" \
              --arg event "${{ github.event_name }}" \
              --arg def_branch "${{ github.event.repository.default_branch }}" \
              --arg commit_subject "$COMMIT_SUBJECT" \
              --arg run_id "${{ github.run_id }}" \
              --arg run_url "$RUN_URL" \
              --arg cs_url "$CS_URL" \
              --arg ts "$TS" \
              --arg lang "${{ matrix.language }}" \
              '{meta:{repo:$repo,sha:$sha,ref:$ref,ref_name:$ref_name,base_ref:$base_ref,pr_number:$pr_number,
                      actor:$actor,event:$event,default_branch:$def_branch,commit_subject:$commit_subject,
                      run_id:$run_id,run_url:$run_url,code_scanning_url:$cs_url,generated_at:$ts},
                scan:{engine:"codeql",language:$lang,schema:"agent-payload:v2",
                      tool_name:null,tool_version:null,query_packs:[]},
                policy_hints:{severity_label_thresholds:{critical:">=9.0",high:"7.0-8.9",medium:"4.0-6.9",low:"0.1-3.9"},
                              notes:"security_severity_score es numérico (0.0-10.0) y la etiqueta se deriva."},
                summary:{total:0,by_security_severity_label:{critical:0,high:0,medium:0,low:0,unknown:0},
                         by_level:{error:0,warning:0,note:0,none:0},unique_rules:0,by_rule:[],by_file:[],by_cwe:[]},
                findings:[]}' > codeql_agent_payload.json
          else
            SARIF_FILE="${SARIFS[0]}"
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg ref_name "${{ github.ref_name }}" \
              --arg base_ref "${{ github.base_ref }}" \
              --arg pr_number "${{ github.event.pull_request.number }}" \
              --arg actor "${{ github.actor }}" \
              --arg event "${{ github.event_name }}" \
              --arg def_branch "${{ github.event.repository.default_branch }}" \
              --arg commit_subject "$COMMIT_SUBJECT" \
              --arg run_id "${{ github.run_id }}" \
              --arg run_url "$RUN_URL" \
              --arg cs_url "$CS_URL" \
              --arg ts "$TS" \
              --arg lang "${{ matrix.language }}" \
              --slurpfile sarif "$SARIF_FILE" '
                ### --- defs al inicio, sin pipes delante ---
                def first_run: ($sarif[0].runs[0] // {});
                def all_runs: ($sarif[0].runs // []);
                def tool: (first_run.tool.driver // {});
                def tool_name: (tool.name // null);
                def tool_version: (tool.semanticVersion // tool.version // null);
                def tool_ext: (first_run.tool.extensions // []);

                # index de reglas: from_entries para robustez
                def rules_index:
                  ( [ all_runs[]? | .tool?.driver?.rules[]?
                      | {key: .id, value: .} ] | from_entries );

                def all_results: [ all_runs[]? | .results[]? ];

                def secscore($r; $ri):
                  ( ($r.properties["security-severity"]
                      // $ri[$r.ruleId].properties["security-severity"]) | tonumber? );

                def seclabel($s):
                  if $s == null then "unknown"
                  elif $s >= 9 then "critical"
                  elif $s >= 7 then "high"
                  elif $s >= 4 then "medium"
                  elif $s > 0 then "low"
                  else "unknown" end;

                def cwe_list($ri):
                  ( $ri[.ruleId].properties.tags // [] )
                  | map(select(startswith("external/cwe/cwe-")))
                  | map(sub("^external/cwe/cwe-"; ""));

                def safe_code_flow:
                  (
                    (
                      ((.codeFlows // []) | .[0]? | .threadFlows // [] | .[0]? | .locations // [])
                      // []
                    )
                    | map({
                        file: .location.physicalLocation.artifactLocation.uri,
                        line: (.location.physicalLocation.region.startLine // null)
                      })
                    | .[:5]
                  );

                def toFinding($ri):
                  (secscore(.; $ri)) as $score
                  | {
                      rule_id: .ruleId,
                      rule_name: ($ri[.ruleId].name // $ri[.ruleId].shortDescription.text // null),
                      rule_precision: ($ri[.ruleId].properties.precision // null),
                      security_severity_score: $score,
                      security_severity_label: (seclabel($score)),
                      level: (.level // "warning"),
                      message: (.message.text // null),
                      file: (.locations[0].physicalLocation.artifactLocation.uri // null),
                      startLine: (.locations[0].physicalLocation.region.startLine // null),
                      endLine: (.locations[0].physicalLocation.region.endLine // null),
                      startColumn: (.locations[0].physicalLocation.region.startColumn // null),
                      snippet: (.locations[0].physicalLocation.region.snippet.text // null),
                      help: ($ri[.ruleId].helpUri // null),
                      rule_tags: ($ri[.ruleId].properties.tags // []),
                      cwe: (cwe_list($ri)),
                      code_flow: safe_code_flow
                    };

                def sev_init: {"critical":0,"high":0,"medium":0,"low":0,"unknown":0};
                def lvl_init: {"error":0,"warning":0,"note":0,"none":0};

                (rules_index) as $RI
                | (all_results) as $R
                | ($R | map(toFinding($RI))) as $F
                | {
                    meta: {
                      repo: $repo, sha: $sha, ref: $ref, ref_name: $ref_name,
                      base_ref: $base_ref, pr_number: $pr_number,
                      actor: $actor, event: $event, default_branch: $def_branch,
                      commit_subject: $commit_subject,
                      run_id: $run_id, run_url: $run_url,
                      code_scanning_url: $cs_url,
                      generated_at: $ts
                    },
                    scan: {
                      engine: "codeql", language: $lang, schema: "agent-payload:v2",
                      tool_name: tool_name, tool_version: tool_version,
                      query_packs: (tool_ext | map(.name))
                    },
                    policy_hints: {
                      severity_label_thresholds: {critical: ">=9.0", high: "7.0-8.9", medium: "4.0-6.9", low: "0.1-3.9"},
                      notes: "security_severity_score es numérico (0.0-10.0) y la etiqueta se deriva."
                    },
                    summary: {
                      total: ($F | length),
                      by_security_severity_label:
                        (reduce $F[] as $x (sev_init; .[($x.security_severity_label // "unknown")] += 1)),
                      by_level:
                        (reduce $F[] as $x (lvl_init; .[($x.level // "warning")] += 1)),
                      unique_rules: ($F | map(.rule_id) | unique | length),
                      by_rule:
                        ($F | group_by(.rule_id)
                             | map({rule_id: .[0].rule_id, count: length})
                             | sort_by(-.count) | .[:20]),
                      by_file:
                        ($F | group_by(.file)
                             | map({file: (.[0].file // "<unknown>"), count: length})
                             | sort_by(-.count) | .[:20]),
                      by_cwe:
                        ($F | map(.cwe[]) | group_by(.) | map({cwe: .[0], count: length}) | sort_by(-.count) | .[:20])
                    },
                    findings: $F
                  }' > codeql_agent_payload.json
          fi

          echo "Wrote codeql_agent_payload.json"
          jq -r '.summary' codeql_agent_payload.json || true

      - name: Upload CodeQL agent payload
        uses: actions/upload-artifact@v4
        with:
