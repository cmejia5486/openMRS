name: CodeQL Analysis (AI Findings)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          build-mode: none

      # Escribe resultados SARIF localmente para poder transformarlos
      - name: Perform CodeQL Analysis (write SARIF locally)
        uses: github/codeql-action/analyze@v3
        with:
          output: ${{ github.workspace }}/codeql-sarif

      # Transforma SARIF -> JSON compacto para IA
      - name: Build AI-friendly findings (compact JSON)
        shell: bash
        run: |
          set -euo pipefail
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TS=$(date -u +%FT%TZ)

          shopt -s nullglob
          SARIFS=("$GITHUB_WORKSPACE/codeql-sarif"/*.sarif)
          if [ ${#SARIFS[@]} -eq 0 ]; then
            # Sin resultados: payload vacío pero válido
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg run_url "$RUN_URL" \
              --arg ts "$TS" \
              '{meta:{repo:$repo,sha:$sha,ref:$ref,run_url:$run_url,generated_at:$ts},
                summary:{total:0},
                findings:[]}' > codeql-ai-findings.json
          else
            SARIF_FILE="${SARIFS[0]}"
            jq -n \
              --arg repo "${{ github.repository }}" \
              --arg sha "${{ github.sha }}" \
              --arg ref "${{ github.ref }}" \
              --arg run_url "$RUN_URL" \
              --arg ts "$TS" \
              --slurpfile sarif "$SARIF_FILE" '
                # ==== helpers / extractores ====
                def runs: ($sarif[0].runs // []);
                def rules: [ runs[]? | .tool?.driver?.rules[]? ];
                def rules_index: ( [ rules[] | {key: .id, value: .} ] | from_entries );
                def results: [ runs[]? | .results[]? ];

                def secscore($r; $ri):
                  ( ($r.properties["security-severity"]
                      // $ri[$r.ruleId].properties["security-severity"]) | tonumber? );

                def severity_label($s):
                  if $s == null then "unknown"
                  elif $s >= 9 then "critical"
                  elif $s >= 7 then "high"
                  elif $s >= 4 then "medium"
                  elif $s > 0 then "low"
                  else "unknown" end;

                def cwe_list($ri):
                  ( $ri[.ruleId].properties.tags // [] )
                  | map(select(startswith("external/cwe/cwe-")))
                  | map(sub("^external/cwe/cwe-"; ""));

                (rules_index) as $RI
                | (results) as $R
                | ($R | map(
                    (secscore(.; $RI)) as $s
                    | {
                        file: (.locations[0].physicalLocation.artifactLocation.uri // null),
                        line: (.locations[0].physicalLocation.region.startLine // null),
                        rule_id: .ruleId,
                        rule_name: ($RI[.ruleId].name // $RI[.ruleId].shortDescription.text // null),
                        severity_score: $s,
                        severity_label: severity_label($s),
                        level: (.level // "warning"),
                        message: (.message.text // null),
                        help: ($RI[.ruleId].helpUri // null),
                        cwe: (cwe_list($RI))
                      }
                  )) as $F
                | {
                    meta: {repo:$repo, sha:$sha, ref:$ref, run_url:$run_url, generated_at:$ts},
                    summary: { total: ($F | length) },
                    findings: $F
                  }' > codeql-ai-findings.json
          fi

          echo "Wrote codeql-ai-findings.json"
          jq -r '.summary' codeql-ai-findings.json || true

      # Sube **solo** el JSON compacto para la IA
      - name: Upload AI findings artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-ai-findings
          path: codeql-ai-findings.json
          retention-days: 14
